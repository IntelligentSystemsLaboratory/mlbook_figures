---
title: "6.15 Subgroups Right"
execute: 
    echo: true
code-fold: true
---


## Subgoups Right

### R figure

```{r}
#| echo: false

c <- 1 
pos <- c*50  
neg <- 50 

rocgrid <- function() {
	plot( c(0,neg), c(0,pos),
		 xlim=c(0,neg),ylim=c(0,pos),
		 xaxs = "i",yaxs = "i",
		 xaxt = 'n', yaxt = 'n',
		 type = "n",
		 xlab = "Negatives", ylab = "Positives")
	

	grid (nx = neg/10, ny = pos/10, col = gray(0.5))
	
}

metric <- function(tp,fp,m) {
  if (tp+fp == 0) { return(0) }
  else {
    Pos = pos
    Neg = neg
    N = Pos+Neg
    TP = tp
    FP = fp
    FN = Pos-TP
    TN = Neg-FP
    if (m=='accuracy') return( (TP+TN)/N ) 
    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) 
    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) 
    if (m=='generality') return( (TP+FP)/N ) 
    if (m=='precision') return( TP/(TP+FP) ) 
    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) 
    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) 
    if (m=='g-measure') return( TP/(FP+Pos) ) 
    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) 
    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) 
    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) 
    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) 
    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) 
    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )
    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )
    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )
    if (m=='entropy') return( (TP+FP)/N*entropy(TP,FP) )
    if (m=='giniimp') return( (TP+FP)/N*gini(TP,FP) )
    if (m=='dkmimp') return( dkm(TP,FP) )
  }
}

entropy <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  if (P==0 || N==0) { return( 0 ) }
  else { return( -p*log2(p) -n*log2(n) ) }
}

gini <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 4*p*n )	
}

dkm <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 2*sqrt(p*n) )	
}

x <- seq(0,neg)
y <- seq(0,pos)
z <- matrix(nrow=neg+1,ncol=pos+1)

save = FALSE

if (save==FALSE) {colour1="red"; colour2="blue"} else {colour1="black"; colour2="black"}

contours <- function(m,label) {
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,m)
	  }
	}
	contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty="solid",method=label)
}

contour1 <- function(m,col,lty,tp,fp) {
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,m)
	  }
	}
	v <- metric(tp,fp,m)
	points(fp,tp,col=col,type='p')
	contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels="")
}

plotmetric <- function(m,label) {
	rocgrid()
	contours(m,label)
	if (save==TRUE) dev2bitmap(file=paste(m,".png",sep=""),type="pngmono",res=300)
}

plotmetrics <- function() {
	plotmetric('accuracy',1,1/2,"edge")
	plotmetric('precision',1,1/2,"edge")
	plotmetric('f-measure',1,5,"edge")
	plotmetric('precision*recall',1,5,"edge")
	plotmetric('info-gain',1,1/10,"flattest")
	plotmetric('gini',1,1/10,"flattest")
	plotmetric('dkm',1,1/10,"flattest")
}

rocgrid()
d = 1
method = 'wracc'
colour = 'black'
p =  0; n = 40
contour1(method,'red','solid',  p,  n)
contour1(method,colour,'dotted',10, 30)
contour1(method,colour,'dotted',20, 20)
contour1(method,colour,'dotted',20,  0)
contour1(method,'orange','solid',50, 10)
contour1(method,colour,'dotted',50, 30)
contour1(method,colour,'dotted', 0, 20)
contour1(method,colour,'dotted',30, 40)
contour1(method,colour,'dotted',20, 10)

```

### Python figure

```{python}

import numpy as np
import matplotlib.pyplot as plt
from math import log2, sqrt

c = 1
pos = c * 50
neg = 50

def entropy(P, N):
    if P == 0 or N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return -p * log2(p) - n * log2(n)

def gini(P, N):
    p = P / (P + N)
    n = N / (P + N)
    return 4 * p * n

def dkm(P, N):
    p = P / (P + N)
    n = N / (P + N)
    return 2 * sqrt(p * n)

def metric(tp, fp, m):
    Pos = pos
    Neg = neg
    N = Pos + Neg
    TP = tp
    FP = fp
    FN = Pos - TP
    TN = Neg - FP

    if tp + fp == 0:
        return 0

    if m == 'accuracy':
        return (TP + TN) / N
    elif m == 'wracc':
        return TP / N - (TP + FP) * (TP + FN) / (N ** 2)
    elif m == 'precision':
        return TP / (TP + FP)
    elif m == 'f-measure':
        return 2 * TP / (2 * TP + FP + FN)
    elif m == 'gini':
        return gini(Pos, Neg) - ((TP + FP) / N) * gini(TP, FP) - ((FN + TN) / N) * gini(FN, TN)
    elif m == 'entropy':
        return ((TP + FP) / N) * entropy(TP, FP)
    elif m == 'dkm':
        return dkm(Pos, Neg) - ((TP + FP) / N) * dkm(TP, FP) - ((FN + TN) / N) * dkm(FN, TN)
    else:
        return 0

def rocgrid():
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.set_xlim(0, neg)
    ax.set_ylim(0, pos)
    ax.set_xlabel('Negatives')
    ax.set_ylabel('Positives')
    ax.set_xticks(np.arange(0, neg+1, 10))
    ax.set_yticks(np.arange(0, pos+1, 10))
    ax.grid(True, color='gray', linestyle='--', linewidth=0.5)
    return ax

def contour1(ax, m, color, linestyle, tp, fp):
    x = np.arange(0, neg+1)
    y = np.arange(0, pos+1)
    Z = np.zeros((len(y), len(x)))

    for i, xi in enumerate(x):
        for j, yj in enumerate(y):
            Z[j, i] = metric(yj, xi, m)

    v = metric(tp, fp, m)
    CS = ax.contour(x, y, Z, levels=[v], colors=color, linestyles=linestyle)
    ax.plot(fp, tp, 'o', color=color)

ax = rocgrid()
method = 'wracc'
d = 1

contour1(ax, method, 'red', 'solid',   0, 40)
contour1(ax, method, 'black', 'dotted', 10, 30)
contour1(ax, method, 'black', 'dotted', 20, 20)
contour1(ax, method, 'black', 'dotted', 20, 0)
contour1(ax, method, 'orange', 'solid', 50, 10)
contour1(ax, method, 'black', 'dotted', 50, 30)
contour1(ax, method, 'black', 'dotted', 0, 20)
contour1(ax, method, 'black', 'dotted', 30, 40)
contour1(ax, method, 'black', 'dotted', 20, 10)

plt.title("Curvas de nível para a métrica 'wracc'")
plt.show()


```