---
title: "6.3 Rule List"
format: html
execute:
  echo: false
  warning: true
  error: true
  cache: false
  result: 'show'
---

## Rule List 2 right

```{r}


#c <- 1  # class ratio dt-cost-left
c <- 1 # class ratio dt-cost-right
pos <- c*50  # positive examples
neg <- 50  # negative examples

rocgrid <- function() {
	plot( c(0,neg), c(0,pos),
		 xlim=c(0,neg),ylim=c(0,pos),
		 #asp = pos/neg,
		 xaxs = "i",yaxs = "i",
		 xaxt = 'n', yaxt = 'n',
		 type = "n",
		 xlab = "Negatives", ylab = "Positives")
	
	# add a grid
	#grid.step <- 5
	grid (nx = neg/10, ny = pos/10, col = gray(0.5))
	
	# draw diagonals
	#abline(0,pos/neg,lty="dotted")	# ascending
	#abline(pos,-pos/neg,lty="dotted")	# descending
	
	# draw axes
	#axis(2,c(0,0.2*pos,0.4*pos,0.6*pos,0.8*pos,pos),labels=c('0','20%','40%','60%','80%','100%'))
	#axis(1,c(0,0.2*neg,0.4*neg,0.6*neg,0.8*neg,neg),labels=c('0','20%','40%','60%','80%','100%'))
}

box <- function(x0,y0,x1,y1,col) {
	lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1)}

metric <- function(tp,fp,Pos,Neg,m) {
  if (tp+fp == 0) { return(0) }
  else {
    #Pos = pos
    #Neg = neg
    N = Pos+Neg
    TP = tp
    FP = fp
    FN = Pos-TP
    TN = Neg-FP
    if (m=='accuracy') return( (TP+TN)/N ) 
    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) 
    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) 
    if (m=='generality') return( (TP+FP)/N ) 
    if (m=='precision') return( TP/(TP+FP) ) 
    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) 
    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) 
    if (m=='g-measure') return( TP/(FP+Pos) ) 
    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) 
    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) 
    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) 
    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) 
    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) 
    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )
    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )
    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )
    if (m=='entropy') return( entropy(TP,FP)/2 )
    if (m=='giniimp') return( gini(TP,FP) )
    if (m=='dkmimp') return( dkm(TP,FP) )
    if (m=='minacc') return( minacc(TP,FP) )
  }
}

entropy <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  if (P==0 || N==0) { return( 0 ) }
  else { return( -p*log2(p) -n*log2(n) ) }
}

gini <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 4*p*n )	
}

dkm <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 2*sqrt(p*n) )	
}

minacc <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( min(p,n) )	
}


save = FALSE

if (save==FALSE) {colour1="red"; colour2="blue"} else {colour1="black"; colour2="black"}

contours <- function(m,label) {
	x <- seq(0,neg)
	y <- seq(0,pos)
	z <- matrix(nrow=neg+1,ncol=pos+1)
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,pos,neg,m)
	  }
	}
	contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty="solid",method=label)
}

contour1 <- function(m,col,lty,tp,fp,Pos,Neg) {
	#v <- metric(tp,fp*(Pos/Neg),Pos,Neg,m)
	v <- metric(tp,fp,Pos,Neg,m)
	col=rgb(min(2-2*v,1),v,0)
	points(fp,tp,col=col,type='p',lwd=3)
	if (tp==0 || fp==0) { 
		lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)
		return() 
	}
	Pos <- tp
	Neg <- fp
	x <- seq(0,Neg)
	y <- seq(0,Pos)
	z <- matrix(nrow=Neg+1,ncol=Pos+1)
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,Pos,Neg,m)
	  }
	}
	v <- metric(tp,fp,Pos,Neg,m)
	contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels="",lwd=2)
}

pos=50; neg=10;
rocgrid()
d = 1
method = 'precision'
colour = 'black'
#box(0,0,neg,pos,colour)
p = 30; n =  0
arrows(neg-d,pos-d,n+d,p+d,col='violet',length=0.1,lwd=3)
#lines(c(0,0),c(0,pos),col='green',lwd=3)
contour1(method,'green','solid',  p,  n, pos, neg)
contour1(method,'green','solid',20,  0, pos, neg)
contour1(method,colour,'dotted',10, 10, pos, neg)
contour1(method,colour,'dotted',50, 10, pos, neg)
contour1(method,colour,'dotted',20, 10, pos, neg)
#contour1(method,colour,'dotted', 0,  0, pos, neg)


```

## Rule List 2 left

```{mermaid}

graph TD;
    34["true<br>[5+, 1-]"]
    38["Length=3<br>[2+, 0-]"]:::green
    76["Length=4<br>[1+, 1-]"]
    95["Length=5<br>[2+, 0-]"]:::green
    62["Gills=no<br>[5+, 1-]"]
    33["Beak=yes<br>[5+, 1-]"]
    32["Teeth=many<br>[3+, 0-]"]:::green
    45["Teeth=few<br>[2+, 1-]"]

    34 --> 32
    34 --> 33
    34 --> 38
    34 --> 45
    34 --> 62
    34 --> 76
    34 --> 95

    classDef green fill:#00a000,stroke:#000,stroke-width:1px;


```