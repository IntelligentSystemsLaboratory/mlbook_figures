---
title: "6.8 Rules 2"
format: html
execute:
  echo: true
  warning: true
  error: true
  cache: false
  result: 'show'
code-fold: true
---

## Rules 2 right

### R figure

```{r}

c <- 1 
pos <- c*50  
neg <- 50 

rocgrid <- function() {
	plot( c(0,neg), c(0,pos),
		 xlim=c(0,neg),ylim=c(0,pos),
		 xaxs = "i",yaxs = "i",
		 xaxt = 'n', yaxt = 'n',
		 type = "n",
		 xlab = "Negatives", ylab = "Positives")
	
	grid (nx = neg/10, ny = pos/10, col = gray(0.5))
	
	
}

box <- function(x0,y0,x1,y1,col) {
	lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}

metric <- function(tp,fp,Pos,Neg,m) {
  if (tp+fp == 0) { return(0) }
  else {

    N = Pos+Neg
    TP = tp
    FP = fp
    FN = Pos-TP
    TN = Neg-FP
    if (m=='accuracy') return( (TP+TN)/N ) 
    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) 
    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) 
    if (m=='generality') return( (TP+FP)/N ) 
    if (m=='precision') return( TP/(TP+FP) ) 
    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) 
    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) 
    if (m=='g-measure') return( TP/(FP+Pos) ) 
    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) 
    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) 
    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) 
    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) 
    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) 
    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )
    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )
    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )
    if (m=='entropy') return( entropy(TP,FP)/2 )
    if (m=='giniimp') return( gini(TP,FP) )
    if (m=='dkmimp') return( dkm(TP,FP) )
    if (m=='minacc') return( minacc(TP,FP) )
  }
}

entropy <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  if (P==0 || N==0) { return( 0 ) }
  else { return( -p*log2(p) -n*log2(n) ) }
}

gini <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 4*p*n )	
}

dkm <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 2*sqrt(p*n) )	
}

minacc <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( min(p,n) )	
}


save = FALSE

if (save==FALSE) {colour1="red"; colour2="blue"} else {colour1="black"; colour2="black"}

contours <- function(m,label) {
	x <- seq(0,neg)
	y <- seq(0,pos)
	z <- matrix(nrow=neg+1,ncol=pos+1)
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,pos,neg,m)
	  }
	}
	contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty="solid",method=label)
}

contour1 <- function(m,col,lty,tp,fp,Pos,Neg) {
	v <- metric(tp,fp,Pos,Neg,m)
	col=rgb(min(2-2*v,1),v,0)
	points(fp,tp,col=col,type='p',lwd=3)
	if (tp==0 || fp==0) { 
		lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)
		return() 
	}
	Pos <- tp
	Neg <- fp
	x <- seq(0,Neg)
	y <- seq(0,Pos)
	z <- matrix(nrow=Neg+1,ncol=Pos+1)
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,Pos,Neg,m)
	  }
	}
	v <- metric(tp,fp,Pos,Neg,m)
	contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels="",lwd=2)
}

pos=30; neg=50;
rocgrid()
d = 1
method = 'precision'
colour = 'black'
box(0,0,neg,pos,colour,lwd=2)
p = 30; n = 10
arrows(neg-d,pos-d,n+d,p-d, col='violet',length=0.1,lwd=3)
contour1(method,'orange','solid',  p,  n, pos, neg)
contour1(method,colour,'dotted',10, 30, pos, neg)
contour1(method,colour,'dotted',20, 20, pos, neg)
contour1(method,colour,'dotted', 0, 40, pos, neg)
contour1(method,colour,'dotted',30, 30, pos, neg)
contour1(method,colour,'dotted', 0, 20, pos, neg)
contour1(method,colour,'dotted',20, 40, pos, neg)
contour1(method,colour,'dotted',10, 10, pos, neg)
contour1(method,colour,'dotted', 0,  0, pos, neg)
colour = 'blue'
box(0,0,n,p,colour)
p1 = 20; n1 = 00
arrows(n-d,p-d,n1+d,p1+d, col='violet',length=0.1,lwd=3)
contour1(method,'green','solid',  p1,  n1, p, n)
contour1(method,colour,'dotted',10, 10, p, n)
contour1(method,colour,'dotted',30, 10, p, n)
contour1(method,colour,'dotted', 0,  0, p, n)

```


### Python figure 

```{python}

import numpy as np
import matplotlib.pyplot as plt

def entropy(P, N):
    if P == 0 or N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return -p * np.log2(p) - n * np.log2(n)

def gini(P, N):
    if P + N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return 4 * p * n

def dkm(P, N):
    if P + N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return 2 * np.sqrt(p * n)

def minacc(P, N):
    if P + N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return min(p, n)

def metric(tp, fp, Pos, Neg, m):
    N = Pos + Neg
    TP = tp
    FP = fp
    FN = Pos - TP
    TN = Neg - FP

    if TP + FP == 0:
        return 0

    if m == 'accuracy':
        return (TP + TN) / N
    if m == 'wracc':
        return TP / N - (TP + FP) * (TP + FN) / N**2
    if m == 'generality':
        return (TP + FP) / N
    if m == 'precision':
        return TP / (TP + FP)
    if m == 'laplace-precision':
        return (TP + 10) / (TP + FP + 20)
    if m == 'f-measure':
        return 2 * TP / (2 * TP + FP + FN)
    if m == 'g-measure':
        return TP / (FP + Pos)
    if m == 'precision*recall':
        return TP**2 / ((TP + FP) * (TP + FN))
    if m == 'avg-precision-recall':
        return TP / (2 * (TP + FP)) + TP / (2 * (TP + FN))
    if m == 'balanced-aucsplit':
        return TP / Pos - FP / Neg
    if m == 'entropy':
        return entropy(TP, FP) / 2
    if m == 'giniimp':
        return gini(TP, FP)
    if m == 'dkmimp':
        return dkm(TP, FP)
    if m == 'minacc':
        return minacc(TP, FP)
    return 0

def contour1(ax, m, tp, fp, Pos, Neg, color, lty):
    v = metric(tp, fp, Pos, Neg, m)
    x = np.arange(0, Neg + 1)
    y = np.arange(0, Pos + 1)
    z = np.zeros((len(y), len(x)))

    for i in range(len(x)):
        for j in range(len(y)):
            z[j, i] = metric(j, i, Pos, Neg, m)

    ax.contour(x, y, z, levels=[v], colors=color, linestyles=lty, linewidths=2)
    ax.plot(fp, tp, 'o', color=color, markersize=5)

def rocgrid(pos, neg):
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlim(0, neg)
    ax.set_ylim(0, pos)
    ax.set_xlabel("Negatives")
    ax.set_ylabel("Positives")
    ax.set_xticks(np.arange(0, neg + 1, 10))
    ax.set_yticks(np.arange(0, pos + 1, 10))
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    return fig, ax

pos = 30
neg = 50
method = 'precision'

fig, ax = rocgrid(pos, neg)

ax.plot([0, neg, neg, 0, 0], [0, 0, pos, pos, 0], color='black', linewidth=2)

p = 30
n = 10
ax.arrow(neg - 1, pos - 1, n - neg + 2, p - pos - 2, head_width=1, head_length=1, fc='violet', ec='violet', linewidth=2)

contour1(ax, method, p, n, pos, neg, 'orange', 'solid')

test_points = [(10, 30), (20, 20), (0, 40), (30, 30), (0, 20), (20, 40), (10, 10), (0, 0)]
for tp, fp in test_points:
    contour1(ax, method, tp, fp, pos, neg, 'black', 'dotted')

p1 = 20
n1 = 0
ax.plot([0, n, n, 0, 0], [0, 0, p, p, 0], color='blue', linewidth=2)
ax.arrow(n - 1, p - 1, n1 - n + 2, p1 - p + 2, head_width=1, head_length=1, fc='violet', ec='violet', linewidth=2)

contour1(ax, method, p1, n1, p, n, 'green', 'solid')
for tp, fp in [(10, 10), (30, 10), (0, 0)]:
    contour1(ax, method, tp, fp, p, n, 'blue', 'dotted')

plt.tight_layout()
plt.show()

```

## Rules 2 left

```{mermaid}

graph TD;
  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;

  34["true<br>[5+, 5-]"];
  38["Length=3<br>[2+, 0-]"]:::green;
  76["Length=4<br>[1+, 3-]"];
  95["Length=5<br>[2+, 2-]"];
  35["Gills=yes<br>[0+, 4-]"];
  62["Gills=no<br>[5+, 1-]"];
  33["Beak=yes<br>[5+, 3-]"];
  52["Beak=no<br>[0+, 2-]"];
  32["Teeth=many<br>[3+, 4-]"];
  45["Teeth=few<br>[2+, 1-]"];

  34 --> 32;
  34 --> 33;
  34 --> 35;
  34 --> 38;
  34 --> 45;
  34 --> 52;
  34 --> 62;
  34 --> 76;
  34 --> 95;


```