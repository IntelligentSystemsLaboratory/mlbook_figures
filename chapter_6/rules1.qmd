---
title: "6.7 Rules 1"
format: html
execute:
  echo: true
  warning: true
  error: true
  cache: false
  result: 'show'
code-fold: true
---

## Rules 1 right

### R figure

```{r}


c <- 1 
pos <- c*50  
neg <- 50  

rocgrid <- function() {
	plot( c(0,neg), c(0,pos),
		 xlim=c(0,neg),ylim=c(0,pos),
		 
		 xaxs = "i",yaxs = "i",
		 xaxt = 'n', yaxt = 'n',
		 type = "n",
		 xlab = "Negatives", ylab = "Positives")
	

	grid (nx = neg/10, ny = pos/10, col = gray(0.5))
	
}

metric <- function(tp,fp,m) {
  if (tp+fp == 0) { return(0) }
  else {
    Pos = pos
    Neg = neg
    N = Pos+Neg
    TP = tp
    FP = fp
    FN = Pos-TP
    TN = Neg-FP
    if (m=='accuracy') return( (TP+TN)/N ) 
    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) 
    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) 
    if (m=='generality') return( (TP+FP)/N ) 
    if (m=='precision') return( TP/(TP+FP) ) 
    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) 
    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) 
    if (m=='g-measure') return( TP/(FP+Pos) ) 
    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) 
    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) 
    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) 
    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) 
    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) 
    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )
    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )
    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )
    if (m=='entropy') return( entropy(TP,FP)/2 )
    if (m=='giniimp') return( gini(TP,FP) )
    if (m=='dkmimp') return( dkm(TP,FP) )
    if (m=='minacc') return( minacc(TP,FP) )
  }
}

entropy <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  if (P==0 || N==0) { return( 0 ) }
  else { return( -p*log2(p) -n*log2(n) ) }
}

gini <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 4*p*n )	
}

dkm <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( 2*sqrt(p*n) )	
}

minacc <- function(P,N) {
  p <- P/(P+N)
  n <- N/(P+N)
  return( min(p,n) )	
}


save = FALSE

if (save==FALSE) {colour1="red"; colour2="blue"} else {colour1="black"; colour2="black"}

contour1 <- function(m,col,lty,tp,fp) {
	v <- metric(tp,fp,m)
	col=rgb(min(2-2*v,1),v,0)
	points(fp,tp,col=col,type='p',lwd=3)
	if (tp==0 || fp==0) { 
		lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)
		return() 
	}
	x <- seq(0,fp)
	y <- seq(0,tp)
	z <- matrix(nrow=fp+1,ncol=tp+1)
	for (i in x) {
	  for (j in y) {
		z[i+1,j+1] = metric(j,i,m)
	  }
	}
	contour(x,y,z,level=v,lwd=2,add=TRUE,col=col,lty=lty,labels="")
}

rocgrid()
d = 1
method = 'precision'
colour = 'black'
p = 20; n = 0
arrows(50-d,50-d,n+d,p+d,col='violet',length=0.1,lwd=3)
contour1(method,'green','solid',  p,  n)
contour1(method,colour,'dotted',10, 30)
contour1(method,colour,'dotted',20, 20)
contour1(method,colour,'dotted', 0, 40)
contour1(method,colour,'dotted',50, 10)
contour1(method,colour,'dotted',50, 30)
contour1(method,colour,'dotted', 0, 20)
contour1(method,colour,'dotted',30, 40)
contour1(method,colour,'dotted',20, 10)

```

### Python figure

```{python}

import numpy as np
import matplotlib.pyplot as plt

c = 1
pos = c * 50
neg = 50

def entropy(P, N):
    if P == 0 or N == 0:
        return 0
    p = P / (P + N)
    n = N / (P + N)
    return -p * np.log2(p) - n * np.log2(n)

def gini(P, N):
    p = P / (P + N)
    n = N / (P + N)
    return 4 * p * n

def dkm(P, N):
    p = P / (P + N)
    n = N / (P + N)
    return 2 * np.sqrt(p * n)

def minacc(P, N):
    p = P / (P + N)
    n = N / (P + N)
    return min(p, n)

def metric(tp, fp, m):
    if tp + fp == 0:
        return 0
    Pos = pos
    Neg = neg
    N = Pos + Neg
    TP = tp
    FP = fp
    FN = Pos - TP
    TN = Neg - FP
    if m == 'accuracy': return (TP + TN) / N
    if m == 'wracc': return TP / N - (TP + FP) * (TP + FN) / N ** 2
    if m == 'confirmation':
        num = ((TP + FP) * (FP + TN)) / N ** 2 - FP / N
        den = np.sqrt((TP + FP) * (FP + TN)) / N - ((TP + FP) * (FP + TN)) / N ** 2
        return num / den if den != 0 else 0
    if m == 'generality': return (TP + FP) / N
    if m == 'precision': return TP / (TP + FP)
    if m == 'laplace-precision': return (TP + 10) / (TP + FP + 20)
    if m == 'f-measure': return 2 * TP / (2 * TP + FP + FN)
    if m == 'g-measure': return TP / (FP + Pos)
    if m == 'precision*recall': return TP ** 2 / ((TP + FP) * (TP + FN))
    if m == 'avg-precision-recall': return TP / (2 * (TP + FP)) + TP / (2 * (TP + FN))
    if m == 'aucsplit': return (TP * Neg + Pos * TN) / (2 * Pos * Neg)
    if m == 'balanced-aucsplit': return TP / Pos - FP / Neg
    if m == 'chi2': return (TP * TN - FP * FN) ** 2 / ((TP + FP) * (TP + FN) * (FP + TN) * (FN + TN))
    if m == 'info-gain': return entropy(Pos, Neg) - (TP + FP) / N * entropy(TP, FP) - (FN + TN) / N * entropy(FN, TN)
    if m == 'gini': return gini(Pos, Neg) - (TP + FP) / N * gini(TP, FP) - (FN + TN) / N * gini(FN, TN)
    if m == 'dkm': return dkm(Pos, Neg) - (TP + FP) / N * dkm(TP, FP) - (FN + TN) / N * dkm(FN, TN)
    if m == 'entropy': return entropy(TP, FP) / 2
    if m == 'giniimp': return gini(TP, FP)
    if m == 'dkmimp': return dkm(TP, FP)
    if m == 'minacc': return minacc(TP, FP)

def rocgrid():
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.set_xlim(0, neg)
    ax.set_ylim(0, pos)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_xlabel("Negatives")
    ax.set_ylabel("Positives")
    ax.grid(which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.5)
    return ax

def contour1(ax, m, col, lty, tp, fp):
    v = metric(tp, fp, m)
    r = min(2 - 2 * v, 1)
    color = (r, v, 0)
    ax.plot(fp, tp, marker='o', color=color, markersize=8)
    if tp == 0 or fp == 0:
        ax.plot([0, fp], [0, tp], linestyle=lty, color=color, linewidth=2)
        return
    x = np.arange(0, fp + 1)
    y = np.arange(0, tp + 1)
    z = np.zeros((len(y), len(x)))
    for i in range(len(x)):
        for j in range(len(y)):
            z[j, i] = metric(y[j], x[i], m)
    cs = ax.contour(x, y, z, levels=[v], colors=[color], linestyles=[lty])

save = False
colour1 = "red" if not save else "black"
colour2 = "blue" if not save else "black"

ax = rocgrid()
d = 1
method = 'precision'
colour = 'black'

p = 20
n = 0
ax.arrow(50 - d, 50 - d, n + d - (50 - d), p + d - (50 - d), head_width=0.8, head_length=1.5, fc='violet', ec='violet', linewidth=2)

contour1(ax, method, 'green', 'solid', p, n)
contour1(ax, method, colour, 'dotted', 10, 30)
contour1(ax, method, colour, 'dotted', 20, 20)
contour1(ax, method, colour, 'dotted', 0, 40)
contour1(ax, method, colour, 'dotted', 50, 10)
contour1(ax, method, colour, 'dotted', 50, 30)
contour1(ax, method, colour, 'dotted', 0, 20)
contour1(ax, method, colour, 'dotted', 30, 40)
contour1(ax, method, colour, 'dotted', 20, 10)

plt.title('ROC Grid - MÃ©trica: ' + method)
plt.tight_layout()
plt.show()


```

## Rules 1 left

```{mermaid}

graph TD;
  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;

  34["true<br>[5+, 5-]"];
  38["Length=3<br>[2+, 0-]"]:::green;
  76["Length=4<br>[1+, 3-]"];
  95["Length=5<br>[2+, 2-]"];
  35["Gills=yes<br>[0+, 4-]"];
  62["Gills=no<br>[5+, 1-]"];
  33["Beak=yes<br>[5+, 3-]"];
  52["Beak=no<br>[0+, 2-]"];
  32["Teeth=many<br>[3+, 4-]"];
  45["Teeth=few<br>[2+, 1-]"];

  34 -->|Teeth=many| 32;
  34 -->|Beak=yes| 33;
  34 -->|Gills=yes| 35;
  34 -->|Length=3| 38;
  34 -->|Teeth=few| 45;
  34 -->|Beak=no| 52;
  34 -->|Gills=no| 62;
  34 -->|Length=4| 76;
  34 -->|Length=5| 95;


```