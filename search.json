[
  {
    "objectID": "chapter_5.html",
    "href": "chapter_5.html",
    "title": "Chapter 5",
    "section": "",
    "text": "5.1 Dolphins-dl-left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.1 Dolphins-dl-right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.3 Dolphins-DT\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.4 Grow Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.5 Labelings\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.6 Pruned Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.7 DT Cost\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.8 Regtree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n5.9 Clustree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_7.html",
    "href": "chapter_7.html",
    "title": "Chapter 7",
    "section": "",
    "text": "7.1 SLR\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.12 Log Callin\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.14 Linear Kernel\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.2 SLR 1\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.3 Regression\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.4 SLR Class\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n7.6 Linclass\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nRoc Callin\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_6.html",
    "href": "chapter_6.html",
    "title": "Chapter 6",
    "section": "",
    "text": "6.1 Impurity Rule\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.10 Rules 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.11 ABC Set\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.12 ABC Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.13 ABC\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.14 XY\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.15 Subgroups Right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.15 subgroups\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.16 Weighted Covering\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.17 Dolphins-dl-left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.18 Items-cc\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.19 Items Dolphins\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.2 Rule List\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.20 Items-cc-dolphins\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.3 Rule List 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.4 Rule List 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.5 Rule List Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.6 ABBA\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.6 ABBA Right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.7 Rules 1\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.8 Rules 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n6.9 Rules 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLbook Figures",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "chapter_8.html",
    "href": "chapter_8.html",
    "title": "Chapter 8",
    "section": "",
    "text": "8.12 ML Methods\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.13 ML Kmeans 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.17 Nonmondendogram\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.18 Random Dendogram\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.5 Medoids\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.6 Roc Callin\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.7 1nex\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.8 Twonex\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n8.9 KNN Prob\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_2/racc_unbalanced_right.html",
    "href": "chapter_2/racc_unbalanced_right.html",
    "title": "2.8 Racc unbalanced right",
    "section": "",
    "text": "R figure\n\n\nCode\nh &lt;- 500 \nw &lt;- 500 \n\ngrid.step &lt;- 50\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"False positive rate\", ylab = \"True positive rate\")\n     \nx &lt;- c(0,  50,  100,  500)\ny &lt;- c(0, 200,  300,  500)\n\naxis(2,y,labels=c('0','tpr1','tpr2','1'))\naxis(1,x,labels=c('0','fpr1','fpr2','1'))\n\ngx &lt;- grid.step/2\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step/2\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nfor (i in 2:3) {\n  abline(v=x[i],lty='dashed')\n  abline(h=y[i],lty='dashed')\n}\n\nlines( x, y, lty=1, type='o')\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 500\nw = 500\ngrid_step = 50\n\nx = [0, 50, 100, 500]\ny = [0, 200, 300, 500]\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['0', 'fpr1', 'fpr2', '1'])\nax.set_yticks(y)\nax.set_yticklabels(['0', 'tpr1', 'tpr2', '1'])\n\ngx = grid_step / 2\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step / 2\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nfor i in [1, 2]:\n    ax.axvline(x=x[i], linestyle='dashed')\n    ax.axhline(y=y[i], linestyle='dashed')\n\nax.plot(x, y, marker='o', linestyle='solid')\n\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/covroc_right.html",
    "href": "chapter_2/covroc_right.html",
    "title": "2.5 Covroc right",
    "section": "",
    "text": "In a coverage plot, accuracy isometrics have a slope of 1, and average recall isometrics are parallel to the ascending diagonal. In the corresponding ROC plot, average recall isometrics have a slope of 1; the accuracy isometric here has a slope of 3, corresponding to the ratio of negatives to positives in the data set.\n\nR figure\n\n\nCode\nh &lt;- 75\nw &lt;- 75 \ngrid.step &lt;- 15\n\ntpr1 &lt;- 45\nfpr1 &lt;- 15\ntpr2 &lt;- 60\nfpr2 &lt;- 20\ntpr3 &lt;- 60\nfpr3 &lt;- 30\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\naxis(2,c(0,tpr1,tpr2,h),labels=c('0','tpr1','tpr2-3','Pos'))\naxis(1,c(0,fpr1,fpr2,fpr3,w),labels=c('0','fpr1','fpr2','fpr3','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(0,h/w),col=\"gray\")\n\nabline(c(30,1),lty=2) \nabline(c(0,3),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( fpr1, tpr1, col=col1, type=\"o\")\ntext( fpr1, tpr1, \"C1\", pos=3)\nabline(h=tpr1, v=fpr1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( fpr2, tpr2, col=col2, type=\"o\")\ntext( fpr2, tpr2, \"C2\", pos=3)\nabline(h=tpr2, v=fpr2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( fpr3, tpr3, col=col3, type=\"o\")\ntext( fpr3, tpr3, \"C3\", pos=3)\nabline(h=tpr3, v=fpr3, col=col3, lty=\"dotted\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 75\nw = 75\ngrid_step = 15\n\ntpr1 = 45\nfpr1 = 15\ntpr2 = 60\nfpr2 = 20\ntpr3 = 60\nfpr3 = 30\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 75.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 75.0)\n\n\nCode\nax.set_xticks([0, fpr1, fpr2, fpr3, w])\nax.set_xticklabels(['0', 'fpr1', 'fpr2', 'fpr3', 'Neg'])\nax.set_yticks([0, tpr1, tpr2, h])\nax.set_yticklabels(['0', 'tpr1', 'tpr2-3', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nx_diag = np.array([0, w])\ny_diag = (h / w) * x_diag\nax.plot(x_diag, y_diag, color='gray')\n\nx_diag2 = np.array([0, w])\ny_diag2 = 3 * x_diag2\ny_diag2_shifted = 3 * (x_diag2 - 30)\nax.plot(x_diag2, y_diag2_shifted, linestyle='dashed', color='black')\nax.plot(x_diag2, y_diag2, linestyle='dashed', color='black')\n\nax.plot(fpr1, tpr1, marker='o', color='blue')\nax.text(fpr1, tpr1, \"C1\", va='bottom', ha='center')\nax.axhline(y=tpr1, color='blue', linestyle='dotted')\nax.axvline(x=fpr1, color='blue', linestyle='dotted')\n\nax.plot(fpr2, tpr2, marker='o', color='red')\nax.text(fpr2, tpr2, \"C2\", va='bottom', ha='center')\nax.axhline(y=tpr2, color='red', linestyle='dotted')\nax.axvline(x=fpr2, color='red', linestyle='dotted')\n\nax.plot(fpr3, tpr3, marker='o', color='green')\nax.text(fpr3, tpr3, \"C3\", va='bottom', ha='center')\nax.axhline(y=tpr3, color='green', linestyle='dotted')\nax.axvline(x=fpr3, color='green', linestyle='dotted')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/racc_unbalanced_left.html",
    "href": "chapter_2/racc_unbalanced_left.html",
    "title": "2.8 Racc unbalanced left",
    "section": "",
    "text": "R figure\n\n\nCode\nh &lt;- 500 \nw &lt;- 1000 \ngrid.step &lt;- 50\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \nx &lt;- c(0, 100,  200, 1000)\ny &lt;- c(0, 200,  300,  500)\n\naxis(2,y,labels=c('0','TP1','TP2','Pos'))\naxis(1,x,labels=c('0','FP1','FP2','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nfor (i in 2:3) {\n  abline(v=x[i],lty='dashed')\n  abline(h=y[i],lty='dashed')\n}\n\nlines( x, y, lty=1, type='o')\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 500\nw = 1000\ngrid_step = 50\n\nx = [0, 100, 200, 1000]\ny = [0, 200, 300, 500]\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\nax.set_yticks(y)\nax.set_yticklabels(['0', 'TP1', 'TP2', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nfor i in [1, 2]:\n    ax.axvline(x=x[i], linestyle='dashed')\n    ax.axhline(y=y[i], linestyle='dashed')\n\nax.plot(x, y, marker='o', linestyle='solid')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/roc_right.html",
    "href": "chapter_2/roc_right.html",
    "title": "2.3 Roc right",
    "section": "",
    "text": "Code\nh &lt;- 50\nw &lt;- 50 \n\ngrid.step &lt;- 10\n\ntpr1 &lt;- 30\nfpr1 &lt;- 10\ntpr2 &lt;- 20\nfpr2 &lt;- 20\ntpr3 &lt;- 40\nfpr3 &lt;- 20\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"False positive rate\", ylab = \"True positive rate\")\n\n\naxis(2,c(0,tpr2,tpr1,tpr3,h),labels=c('0','tpr2','tpr1','tpr3','1'))\naxis(1,c(0,fpr1,fpr2,w),labels=c('0','fpr1','fpr2-3','1'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(tpr2,h/w),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( fpr1, tpr1, col=col1, type=\"o\")\ntext( fpr1, tpr1, \"C1\", pos=3)\nabline(h=tpr1, v=fpr1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( fpr2, tpr2, col=col2, type=\"o\")\ntext( fpr2, tpr2, \"C2\", pos=3)\nabline(h=tpr2, v=fpr2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( fpr3, tpr3, col=col3, type=\"o\")\ntext( fpr3, tpr3, \"C3\", pos=3)\nabline(h=tpr3, v=fpr3, col=col3, lty=\"dotted\")\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 50\nw = 50\n\ngrid_step = 10\n\ntpr1 = 30\nfpr1 = 10\ntpr2 = 20\nfpr2 = 20\ntpr3 = 40\nfpr3 = 20\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\n\nax.set_xticks([0, fpr1, fpr2, w])\nax.set_xticklabels([0, \"fpr1\", \"fpr2-3\", \"1\"])\nax.set_yticks([0, tpr2, tpr1, tpr3, h])\nax.set_yticklabels([0, \"tpr2\", \"tpr1\", \"tpr3\", \"1\"])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.axhline(y=tpr2, linestyle='dashed')\n\ncol1 = \"blue\"\nax.plot(fpr1, tpr1, marker='o', color=col1)\nax.text(fpr1, tpr1, \"C1\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr1, color=col1, linestyle='dotted')\nax.axvline(x=fpr1, color=col1, linestyle='dotted')\n\ncol2 = \"red\"\nax.plot(fpr2, tpr2, marker='o', color=col2)\nax.text(fpr2, tpr2, \"C2\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr2, color=col2, linestyle='dotted')\nax.axvline(x=fpr2, color=col2, linestyle='dotted')\n\ncol3 = \"green\"\nax.plot(fpr3, tpr3, marker='o', color=col3)\nax.text(fpr3, tpr3, \"C3\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr3, color=col3, linestyle='dotted')\nax.axvline(x=fpr3, color=col3, linestyle='dotted')\n\nplt.show()"
  },
  {
    "objectID": "chapter_2/roc_right.html#r-figure",
    "href": "chapter_2/roc_right.html#r-figure",
    "title": "2.3 Roc right",
    "section": "",
    "text": "Code\nh &lt;- 50\nw &lt;- 50 \n\ngrid.step &lt;- 10\n\ntpr1 &lt;- 30\nfpr1 &lt;- 10\ntpr2 &lt;- 20\nfpr2 &lt;- 20\ntpr3 &lt;- 40\nfpr3 &lt;- 20\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"False positive rate\", ylab = \"True positive rate\")\n\n\naxis(2,c(0,tpr2,tpr1,tpr3,h),labels=c('0','tpr2','tpr1','tpr3','1'))\naxis(1,c(0,fpr1,fpr2,w),labels=c('0','fpr1','fpr2-3','1'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(tpr2,h/w),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( fpr1, tpr1, col=col1, type=\"o\")\ntext( fpr1, tpr1, \"C1\", pos=3)\nabline(h=tpr1, v=fpr1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( fpr2, tpr2, col=col2, type=\"o\")\ntext( fpr2, tpr2, \"C2\", pos=3)\nabline(h=tpr2, v=fpr2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( fpr3, tpr3, col=col3, type=\"o\")\ntext( fpr3, tpr3, \"C3\", pos=3)\nabline(h=tpr3, v=fpr3, col=col3, lty=\"dotted\")\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 50\nw = 50\n\ngrid_step = 10\n\ntpr1 = 30\nfpr1 = 10\ntpr2 = 20\nfpr2 = 20\ntpr3 = 40\nfpr3 = 20\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\n\nax.set_xticks([0, fpr1, fpr2, w])\nax.set_xticklabels([0, \"fpr1\", \"fpr2-3\", \"1\"])\nax.set_yticks([0, tpr2, tpr1, tpr3, h])\nax.set_yticklabels([0, \"tpr2\", \"tpr1\", \"tpr3\", \"1\"])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.axhline(y=tpr2, linestyle='dashed')\n\ncol1 = \"blue\"\nax.plot(fpr1, tpr1, marker='o', color=col1)\nax.text(fpr1, tpr1, \"C1\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr1, color=col1, linestyle='dotted')\nax.axvline(x=fpr1, color=col1, linestyle='dotted')\n\ncol2 = \"red\"\nax.plot(fpr2, tpr2, marker='o', color=col2)\nax.text(fpr2, tpr2, \"C2\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr2, color=col2, linestyle='dotted')\nax.axvline(x=fpr2, color=col2, linestyle='dotted')\n\ncol3 = \"green\"\nax.plot(fpr3, tpr3, marker='o', color=col3)\nax.text(fpr3, tpr3, \"C3\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=tpr3, color=col3, linestyle='dotted')\nax.axvline(x=fpr3, color=col3, linestyle='dotted')\n\nplt.show()"
  },
  {
    "objectID": "chapter_2/covrank_right.html",
    "href": "chapter_2/covrank_right.html",
    "title": "2.7 Covrank right",
    "section": "",
    "text": "R figure\n\n\nCode\nh &lt;- 500 \nw &lt;- 500 \n\ngrid.step &lt;- 50\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \nx &lt;- c(0,  50,  100,  500)\ny &lt;- c(0, 200,  300,  500)\n\naxis(2,y,labels=c('0','TP1','TP2','Pos'))\naxis(1,x,labels=c('0','FP1','FP2','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ntext( x[1]+10, y[1]+10, \"A\")\ntext( x[2:3]+10, y[2:3], labels=c(\"B\",\"C\"))\ntext( x[4]-10, y[4]-15, \"D\")\n\nfor (i in 2:3) {\n  abline(v=x[i],lty='dashed')\n  abline(h=y[i],lty='dashed')\n}\n\nlines( x, y, lty=1, type='o')\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks([0, 50, 100, 500])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\nax.set_yticks([0, 200, 300, 500])\nax.set_yticklabels(['0', 'TP1', 'TP2', 'Pos'])\n\nx = [0, 50, 100, 500]\ny = [0, 200, 300, 500]\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nax.text(x[0]+10, y[0]+10, \"A\")\nax.text(x[1]+10, y[1], \"B\")\nax.text(x[2]+10, y[2], \"C\")\nax.text(x[3]-10, y[3]-15, \"D\")\n\nfor i in [1, 2]:\n    ax.axvline(x=x[i], linestyle='dashed', color='black')\n    ax.axhline(y=y[i], linestyle='dashed', color='black')\n\nax.plot(x, y, linestyle='solid', marker='o', color='black')\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/scoringtree.html",
    "href": "chapter_2/scoringtree.html",
    "title": "2.5 Scoring Tree",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"ŝ(x)=4\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"ŝ(x)=1/2\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"ŝ(x)=2\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;\n\n\n\n\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"ŝ(x)=4\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"ŝ(x)=1/2\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"ŝ(x)=2\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;"
  },
  {
    "objectID": "chapter_2/covroc_left.html",
    "href": "chapter_2/covroc_left.html",
    "title": "2.5 Covroc left",
    "section": "",
    "text": "In a coverage plot, accuracy isometrics have a slope of 1, and average recall isometrics are parallel to the ascending diagonal. In the corresponding ROC plot, average recall isometrics have a slope of 1; the accuracy isometric here has a slope of 3, corresponding to the ratio of negatives to positives in the data set.\n\nR figure\n\n\nCode\nh &lt;- 25 \nw &lt;- 75 \ngrid.step &lt;- 5\n\nTP1 &lt;- 15\nFP1 &lt;- 15\nTP2 &lt;- 20\nFP2 &lt;- 20\nTP3 &lt;- 20\nFP3 &lt;- 30\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\naxis(2,c(0,TP1,TP2,h),labels=c('0','TP1','TP2-3','Pos'))\naxis(1,c(0,FP1,FP2,FP3,w),labels=c('0','FP1','FP2','FP3','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(0,h/w),col=\"gray\")\n\nabline(c(10,h/w),lty=2)\nabline(c(0,1),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( FP1, TP1, col=col1, type=\"o\")\ntext( FP1, TP1, \"C1\", pos=3)\nabline(h=TP1, v=FP1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( FP2, TP2, col=col2, type=\"o\")\ntext( FP2, TP2, \"C2\", pos=3)\nabline(h=TP2, v=FP2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( FP3, TP3, col=col3, type=\"o\")\ntext( FP3, TP3, \"C3\", pos=3)\nabline(h=TP3, v=FP3, col=col3, lty=\"dotted\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 25\nw = 75\ngrid_step = 5\n\nTP1 = 15\nFP1 = 15\nTP2 = 20\nFP2 = 20\nTP3 = 20\nFP3 = 30\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 75.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 25.0)\n\n\nCode\nax.set_xticks([0, FP1, FP2, FP3, w])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'FP3', 'Neg'])\nax.set_yticks([0, TP1, TP2, h])\nax.set_yticklabels(['0', 'TP1', 'TP2-3', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nx_diag = np.array([0, w])\ny_diag = (h / w) * x_diag\nax.plot(x_diag, y_diag, color='gray')\n\nx_diag2 = np.array([0, w])\ny_diag2 = x_diag2\nax.plot(x_diag2, y_diag2, linestyle='dashed', color='black')\n\nx_diag3 = np.array([0, w])\ny_diag3 = (h / w) * (x_diag3 - 10)\nax.plot(x_diag3, y_diag3, linestyle='dashed', color='black')\n\nax.plot(FP1, TP1, marker='o', color='blue')\nax.text(FP1, TP1, \"C1\", va='bottom', ha='center')\nax.axhline(y=TP1, color='blue', linestyle='dotted')\nax.axvline(x=FP1, color='blue', linestyle='dotted')\n\nax.plot(FP2, TP2, marker='o', color='red')\nax.text(FP2, TP2, \"C2\", va='bottom', ha='center')\nax.axhline(y=TP2, color='red', linestyle='dotted')\nax.axvline(x=FP2, color='red', linestyle='dotted')\n\nax.plot(FP3, TP3, marker='o', color='green')\nax.text(FP3, TP3, \"C3\", va='bottom', ha='center')\nax.axhline(y=TP3, color='green', linestyle='dotted')\nax.axvline(x=FP3, color='green', linestyle='dotted')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/convexhull_left.html",
    "href": "chapter_2/convexhull_left.html",
    "title": "2.13 Convexhull right",
    "section": "",
    "text": "R figure\n\n\nCode\nranking &lt;- c(1, 1, 1, 0, 1, 0, 0, 1, 0, 0)\nx &lt;- c(0, 0, 0, 300, 300, 300, 600, 600, 600, 900, 1200)\ny &lt;- c(0, 200, 400, 400, 600, 800, 800, 1000, 1200, 1200, 1200)\n\nh &lt;- 1200 \nw &lt;- 1200 \ngrid.step &lt;- 120 \n\nplot(\n  c(0, w), c(0, h),\n  xaxs = \"i\", yaxs = \"i\", \n  xaxt = 'n', yaxt = 'n', \n  type = \"n\",             \n  xlab = \"False positive rate\",\n  ylab = \"True positive rate\"\n)\n\naxis(1, at = seq(0, w, length.out = length(x)), \n     labels = c('', '', '', '0.25', '', '', '0.50', '', '', '0.75', '1.00'))\naxis(2, at = seq(0, h, length.out = length(y)), \n     labels = c('', '0.17', '0.33', '', '0.50', '0.67', '', '0.83', '1.00', '', ''))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col = \"gray\", lty = \"dotted\")\n  gx &lt;- gx + grid.step\n}\n\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col = \"gray\", lty = \"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nlines(x, y, lty = 3, type = 'o') \n\nsegments(x[1], y[1], x[3], y[3], lty = 1, lwd = 4, col = \"red\")\nsegments(x[3], y[3], x[9], y[9], lty = 1, lwd = 2, col = \"red\")\nsegments(x[9], y[9], x[11], y[11], lty = 1, lwd = 4, col = \"red\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nranking = [1, 1, 1, 0, 1, 0, 0, 1, 0, 0]\nx = [0, 0, 0, 300, 300, 300, 600, 600, 600, 900, 1200]\ny = [0, 200, 400, 400, 600, 800, 800, 1000, 1200, 1200, 1200]\n\nh = 1200\nw = 1200\ngrid_step = 120\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1200.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 1200.0)\n\n\nCode\nax.set_xticks([0, 120, 240, 360, 480, 600, 720, 840, 960, 1080, 1200])\nax.set_xticklabels(['', '', '', '0.25', '', '', '0.50', '', '', '0.75', '1.00'])\n\nax.set_yticks([0, 120, 240, 360, 480, 600, 720, 840, 960, 1080, 1200])\nax.set_yticklabels(['', '0.17', '0.33', '', '0.50', '0.67', '', '0.83', '1.00', '', ''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nax.plot(x, y, linestyle='dashed', marker='o')\n\nax.plot([x[0], x[2]], [y[0], y[2]], color='red', linewidth=4)\nax.plot([x[2], x[8]], [y[2], y[8]], color='red', linewidth=2)\nax.plot([x[8], x[10]], [y[8], y[10]], color='red', linewidth=4)\n\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/covrank_left.html",
    "href": "chapter_2/covrank_left.html",
    "title": "2.7 Covrank left",
    "section": "",
    "text": "R figure\n\n\nCode\nh &lt;- 500 \nw &lt;- 500 \ngrid.step &lt;- 10\n\n\nplot(c(0, w), c(0, h),  \n     xaxs = \"i\", yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives sorted on decreasing score\", \n     ylab = \"Positives sorted on decreasing score\")\n\naxis(2, c(0, h), labels = c('0', 'Pos'))\naxis(1, c(0, w), labels = c('0', 'Neg'))\n\nx &lt;- seq(0, w, length.out = 4)  \ny &lt;- seq(0, h, length.out = 4)  \n\nfor (i in 1:3) {\n  for (j in 1:3) {\n    if (i &lt; j) { col &lt;- 'red' }\n    if (i == j) { col &lt;- 'orange' }\n    if (i &gt; j) { col &lt;- 'green' }\n    rect(x[i], y[j], x[i + 1], y[j + 1], col = col)\n  }\n}\n\nx_curve &lt;- c(0,  50,  100,  500)\ny_curve &lt;- c(0, 200,  300,  500)\nlines(x_curve, y_curve, lty = 2)\n\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, lty = \"dotted\")\n  gx &lt;- gx + grid.step\n}\n\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, lty = \"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 10\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks([0, w])\nax.set_xticklabels(['0', 'Neg'])\nax.set_yticks([0, h])\nax.set_yticklabels(['0', 'Pos'])\n\nx = [0, w/3, 2*w/3, w]\ny = [0, h/3, 2*h/3, h]\n\nfor i in range(3):\n    for j in range(3):\n        if i &lt; j:\n            color = 'red'\n        elif i == j:\n            color = 'orange'\n        else:\n            color = 'green'\n        ax.add_patch(plt.Rectangle((x[i], y[j]), x[i+1]-x[i], y[j+1]-y[j], color=color))\n\nx_curve = [0, 50, 100, 500]\ny_curve = [0, 200, 300, 500]\nax.plot(x_curve, y_curve, linestyle='dashed', color='black')\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nax.set_xlabel(\"Negatives sorted on decreasing score\")\nax.set_ylabel(\"Positives sorted on decreasing score\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/convexhull_right.html",
    "href": "chapter_2/convexhull_right.html",
    "title": "2.13 Convexhull right",
    "section": "",
    "text": "Code\nx &lt;- c(13, 24, 32, 42, 49, 63, 71, 74, 80, 89)\ny &lt;- c(0, 0, 67, 67, 67, 67, 67, 67, 100, 100)\ny1 &lt;- c(33, 33, 60, 60, 60, 60, 60, 60, 67, 67)\ny2 &lt;- c(25, 25, 63, 63, 63, 63, 63, 63, 75, 75)\n\nh &lt;- 100\nw &lt;- 100\ngrid.step &lt;- 10\n\nplot(\n  c(0, w), c(0, h),\n  xaxs = \"i\", yaxs = \"i\", \n  xaxt = 'n', yaxt = 'n', \n  type = \"n\",             \n  xlab = \"Original score\",\n  ylab = \"Calibrated probability\"\n)\n\naxis(1, at = x, labels = x / 100)\naxis(2, at = seq(0, h, grid.step), labels = seq(0, h, grid.step) / 100)\n\ncol &lt;- \"red\"\nlwd &lt;- 2\nlines(x, y, lty = 0, type = 'o', col = col)\nsegments(0, y[1], x[2], y[2], lwd = 4, col = col)\nsegments(x[2], y[2], x[3], y[3], lwd = lwd, col = col)\nsegments(x[3], y[3], x[8], y[8], lwd = lwd, col = col)\nsegments(x[8], y[8], x[9], y[9], lwd = lwd, col = col)\nsegments(x[9], y[9], 100, y[10], lwd = 4, col = col)\n\ncol &lt;- \"blue\"\nlty &lt;- \"dashed\"\nlines(x, y1, lty = 0, type = 'o', col = col)\nsegments(0, y1[1], x[2], y1[2], lty = lty, lwd = lwd, col = col)\nsegments(x[2], y1[2], x[3], y1[3], lty = lty, lwd = lwd, col = col)\nsegments(x[3], y1[3], x[8], y1[8], lty = lty, lwd = lwd, col = col)\nsegments(x[8], y1[8], x[9], y1[9], lty = lty, lwd = lwd, col = col)\nsegments(x[9], y1[9], 100, y1[10], lty = lty, lwd = lwd, col = col)\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nx = [13, 24, 32, 42, 49, 63, 71, 74, 80, 89]\ny = [0, 0, 67, 67, 67, 67, 67, 67, 100, 100]\ny1 = [33, 33, 60, 60, 60, 60, 60, 60, 67, 67]\n\nh = 100\nw = 100\ngrid_step = 10\nlwd = 2\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 100.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 100.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels([v / 100 for v in x])\nax.set_yticks(range(0, h + 1, grid_step))\nax.set_yticklabels([v / 100 for v in range(0, h + 1, grid_step)])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='None')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='None')\n\nax.plot(x, y, marker='o', linestyle='None', color='red')\nax.plot([0, x[1]], [y[0], y[1]], linewidth=4, color='red')\nax.plot([x[1], x[2]], [y[1], y[2]], linewidth=lwd, color='red')\nax.plot([x[2], x[7]], [y[2], y[7]], linewidth=lwd, color='red')\nax.plot([x[7], x[8]], [y[7], y[8]], linewidth=lwd, color='red')\nax.plot([x[8], 100], [y[8], y[9]], linewidth=4, color='red')\n\nax.plot(x, y1, marker='o', linestyle='None', color='blue')\nax.plot([0, x[1]], [y1[0], y1[1]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[1], x[2]], [y1[1], y1[2]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[2], x[7]], [y1[2], y1[7]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[7], x[8]], [y1[7], y1[8]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[8], 100], [y1[8], y1[9]], linestyle='dashed', linewidth=lwd, color='blue')\n\nax.set_xlabel(\"Original score\")\nax.set_ylabel(\"Calibrated probability\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/pet.html",
    "href": "chapter_2/pet.html",
    "title": "2.12 PET",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"p̂(x)=0.80\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"p̂(x)=0.33\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"p̂(x)=0.67\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;\n\n\n\n\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"p̂(x)=0.80\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"p̂(x)=0.33\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"p̂(x)=0.67\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;"
  },
  {
    "objectID": "chapter_2/threshold.html",
    "href": "chapter_2/threshold.html",
    "title": "2.11 Threshold",
    "section": "",
    "text": "R figure\n\n\nCode\nranking &lt;- c(1, 1, 1, 0, 1, 0, 0, 1, 0, 0)\nx &lt;- c(0, 0, 0, 300, 300, 300, 600, 600, 600, 900, 1200)\ny &lt;- c(0, 200, 400, 400, 600, 800, 800, 1000, 1200, 1200, 1200)\n\nh &lt;- 1200\nw &lt;- 1200 \ngrid.step &lt;- 120\n\nplot(\n  c(0, w), c(0, h),\n  xaxs = \"i\", yaxs = \"i\", \n  xaxt = 'n', yaxt = 'n', \n  type = \"n\",             \n  xlab = \"False positive rate\", \n  ylab = \"True positive rate\"\n)\n\naxis(1, at = x, labels = c('', '', '', '0.25', '', '', '0.50', '', '', '0.75', '1.00'))\naxis(2, at = y, labels = c('', '0.17', '0.33', '', '0.50', '0.67', '', '0.83', '1.00', '', ''))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col = \"gray\", lty = \"dotted\")\n  gx &lt;- gx + grid.step\n}\n\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col = \"gray\", lty = \"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nlines(x, y, lty = 1, type = 'o')\n\nsegments(x[3], y[3], x[9], y[9], lty = 3, col = \"red\")\nsegments(x[1], y[6], x[9], y[9], lty = 3, col = \"red\")\n\nabline(a = 1200, b = -h / w, lty = 3, col = \"blue\")\n\nsegments(0, 960, 240, 960, lty = 3, col = \"blue\")\nsegments(0, 12000 / 14, 4800 / 14, 12000 / 14, lty = 3, col = \"blue\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nranking = [1, 1, 1, 0, 1, 0, 0, 1, 0, 0]\nx = [0, 0, 0, 300, 300, 300, 600, 600, 600, 900, 1200]\ny = [0, 200, 400, 400, 600, 800, 800, 1000, 1200, 1200, 1200]\n\nh = 1200\nw = 1200\ngrid_step = 120\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1200.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 1200.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['', '', '', '0.25', '', '', '0.50', '', '', '0.75', '1.00'])\nax.set_yticks(y)\nax.set_yticklabels(['', '0.17', '0.33', '', '0.50', '0.67', '', '0.83', '1.00', '', ''])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.plot(x, y, linestyle='solid', marker='o')\n\nax.plot([x[2], x[8]], [y[2], y[8]], linestyle='dashed', color='red')\nax.plot([x[0], x[5]], [y[5], y[8]], linestyle='dashed', color='red')\n\nslope = -h / w\nintercept = 1200\nx_vals = np.array([0, w])\ny_vals = intercept + slope * x_vals\nax.plot(x_vals, y_vals, linestyle='dashed', color='blue')\n\nax.plot([0, 240], [960, 960], linestyle='dashed', color='blue')\nax.plot([0, 4800 / 14], [12000 / 14, 12000 / 14], linestyle='dashed', color='blue')\n\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/coverage_right.html",
    "href": "chapter_2/coverage_right.html",
    "title": "2.2 Coverage Right",
    "section": "",
    "text": "A coverage plot depicting the two contingency tables in Table 2.2. The plot is square because the class distribution is uniform (right). Coverage plot for Example 2.1, with a class ratio clr=3.\n\nR figure\n\n\nCode\nh &lt;- 750 \nw &lt;- 250 \ngrid.step &lt;- 50\n\nTP3 &lt;- 600\nFP3 &lt;- 100\n\n\nplot( c(0,w), c(0,h), \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\naxis(2,c(0,TP3,h),labels=c('0','TP3','Pos'))\naxis(1,c(0,FP3,w),labels=c('0','FP3','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ncol3 &lt;- \"green\"\npoints( FP3, TP3, col=col3, type=\"o\")\ntext( FP3, TP3, \"C3\", pos=3)\nabline(h=TP3, v=FP3, col=col3, lty=\"dotted\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 750\nw = 250\ngrid_step = 50\n\nTP3 = 600\nFP3 = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 250.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 750.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nax.set_xticks([0, FP3, w])\nax.set_xticklabels([0, \"FP3\", \"Neg\"])\nax.set_yticks([0, TP3, h])\nax.set_yticklabels([0, \"TP3\", \"Pos\"])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\ncol3 = \"green\"\nax.plot(FP3, TP3, marker='o', color=col3)\nax.text(FP3, TP3, \"C3\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=TP3, color=col3, linestyle='dotted')\nax.axvline(x=FP3, color=col3, linestyle='dotted')\n\nplt.show()"
  },
  {
    "objectID": "chapter_2/covgrad2.html",
    "href": "chapter_2/covgrad2.html",
    "title": "2.10 Covgrad 2",
    "section": "",
    "text": "R figure\n\n\nCode\nranking &lt;- c(1,1,1,0,1,0,0,1,0,0)\nx &lt;- c(0,0,0,0,100,100,200,300,300,400,500)\ny &lt;- c(0,100,200,300,300,400,400,400,500,500,500)\n\nh &lt;- 500 \nw &lt;- 500 \ngrid.step &lt;- 50\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1','p2','p3','','p4','','','p5','',''))\naxis(1,x,labels=c('','','','','n1','','n2','n3','','n4','n5'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\ntext( x[4]+10, y[4]-15, \"A\", col=\"red\")\ntext( x[6]+10, y[6]-15, \"B\", col=\"red\")\ntext( x[9]+10, y[9]-15, \"C\", col=\"red\")\n\n\nlines( x, y, lty=1, type='o')\n\nsegments(x[4],y[4],x[6],y[6],lty=3,col=\"red\")\nsegments(x[6],y[6],x[9],y[9],lty=3,col=\"red\")\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nranking = [1,1,1,0,1,0,0,1,0,0]\nx = [0,0,0,0,100,100,200,300,300,400,500]\ny = [0,100,200,300,300,400,400,400,500,500,500]\n\nh = 500\nw = 500\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['','','','','n1','','n2','n3','','n4','n5'])\nax.set_yticks(y)\nax.set_yticklabels(['','p1','p2','p3','','p4','','','p5','',''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nax.text(x[3]+10, y[3]-15, \"A\", color=\"red\")\nax.text(x[5]+10, y[5]-15, \"B\", color=\"red\")\nax.text(x[8]+10, y[8]-15, \"C\", color=\"red\")\n\nax.plot(x, y, linestyle='solid', marker='o')\nax.plot([x[3], x[5]], [y[3], y[5]], linestyle='dashed', color=\"red\")\nax.plot([x[5], x[8]], [y[5], y[8]], linestyle='dashed', color=\"red\")\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/decisiontree.html",
    "href": "chapter_2/decisiontree.html",
    "title": "2.1 Decision Tree",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"ĉ(x)=spam\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"ĉ(x)=ham\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"ĉ(x)=spam\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;\n\n\n\n\ngraph TD;\n    N0[\"‘Viagra’\"] --&gt;|\"=0\"| N11[\"‘lottery’\"];\n    N0 --&gt;|\"=1\"| L3[\"ĉ(x)=spam\"]:::filled;\n    N11 --&gt;|\"=0\"| L1[\"ĉ(x)=ham\"]:::filled;\n    N11 --&gt;|\"=1\"| L2[\"ĉ(x)=spam\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;"
  },
  {
    "objectID": "chapter_2/covgrad_right.html",
    "href": "chapter_2/covgrad_right.html",
    "title": "2.9 Covgrad right",
    "section": "",
    "text": "R figure\n\n\nCode\nranking &lt;- c(1,1,1,0,1,0,0,1,0,0)\nx &lt;- c(0,0,0,0,100,100,200,300,300,400,500)\ny &lt;- c(0,100,200,300,300,400,400,400,500,500,500)\n\nh &lt;- 500 \nw &lt;- 500 \n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1','p2','p3','','p4','','','p5','',''))\naxis(1,x,labels=c('','','','','n1','','n2','n3','','n4','n5'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nfor (i in 1:11) {\n    for (j in 1:11) {\n        if (i&lt;j) {col='red'}\n        if (i==j) {col='orange'}\n        if (i&gt;j) {col='green'}\n        rect(x[i],y[j],x[i+1],y[j+1],col=col)\n        }\n}\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nranking = [1,1,1,0,1,0,0,1,0,0]\nx = [0,0,0,0,100,100,200,300,300,400,500,500]\ny = [0,100,200,300,300,400,400,400,500,500,500,500]\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x[:-1])\nax.set_xticklabels(['','','','','n1','','n2','n3','','n4','n5'])\nax.set_yticks(y[:-1])\nax.set_yticklabels(['','p1','p2','p3','','p4','','','p5','',''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nfor i in range(11):\n    for j in range(11):\n        if i &lt; j:\n            color = 'red'\n        elif i == j:\n            color = 'orange'\n        else:\n            color = 'green'\n        rect = patches.Rectangle((x[i], y[j]), x[i+1]-x[i], y[j+1]-y[j], facecolor=color)\n        ax.add_patch(rect)\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()"
  },
  {
    "objectID": "chapter_2/roc_left.html",
    "href": "chapter_2/roc_left.html",
    "title": "2.3 Roc left",
    "section": "",
    "text": "Code\nh &lt;- 50 \nw &lt;- 50 \n\ngrid.step &lt;- 10\n\nTP1 &lt;- 30\nFP1 &lt;- 10\nTP2 &lt;- 20\nFP2 &lt;- 20\nTP3 &lt;- 40\nFP3 &lt;- 20\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\naxis(2,c(0,TP2,TP1,TP3,h),labels=c('0','TP2','TP1','TP3','Pos'))\naxis(1,c(0,FP1,FP2,w),labels=c('0','FP1','FP2-3','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(TP2,h/w),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( FP1, TP1, col=col1, type=\"o\")\ntext( FP1, TP1, \"C1\", pos=3)\nabline(h=TP1, v=FP1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( FP2, TP2, col=col2, type=\"o\")\ntext( FP2, TP2, \"C2\", pos=3)\nabline(h=TP2, v=FP2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( FP3, TP3, col=col3, type=\"o\")\ntext( FP3, TP3, \"C3\", pos=3)\nabline(h=TP3, v=FP3, col=col3, lty=\"dotted\")"
  },
  {
    "objectID": "chapter_2/roc_left.html#r-figure",
    "href": "chapter_2/roc_left.html#r-figure",
    "title": "2.3 Roc left",
    "section": "",
    "text": "Code\nh &lt;- 50 \nw &lt;- 50 \n\ngrid.step &lt;- 10\n\nTP1 &lt;- 30\nFP1 &lt;- 10\nTP2 &lt;- 20\nFP2 &lt;- 20\nTP3 &lt;- 40\nFP3 &lt;- 20\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\naxis(2,c(0,TP2,TP1,TP3,h),labels=c('0','TP2','TP1','TP3','Pos'))\naxis(1,c(0,FP1,FP2,w),labels=c('0','FP1','FP2-3','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nabline(c(TP2,h/w),lty=2)\n\ncol1 &lt;- \"blue\"\npoints( FP1, TP1, col=col1, type=\"o\")\ntext( FP1, TP1, \"C1\", pos=3)\nabline(h=TP1, v=FP1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( FP2, TP2, col=col2, type=\"o\")\ntext( FP2, TP2, \"C2\", pos=3)\nabline(h=TP2, v=FP2, col=col2, lty=\"dotted\")\n\ncol3 &lt;- \"green\"\npoints( FP3, TP3, col=col3, type=\"o\")\ntext( FP3, TP3, \"C3\", pos=3)\nabline(h=TP3, v=FP3, col=col3, lty=\"dotted\")"
  },
  {
    "objectID": "chapter_2/roc_left.html#python-figure",
    "href": "chapter_2/roc_left.html#python-figure",
    "title": "2.3 Roc left",
    "section": "Python figure",
    "text": "Python figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 50\nw = 50\n\ngrid_step = 10\n\nTP1 = 30\nFP1 = 10\nTP2 = 20\nFP2 = 20\nTP3 = 40\nFP3 = 20\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nax.set_xticks([0, FP1, FP2, w])\nax.set_xticklabels([0, \"FP1\", \"FP2-3\", \"Neg\"])\nax.set_yticks([0, TP2, TP1, TP3, h])\nax.set_yticklabels([0, \"TP2\", \"TP1\", \"TP3\", \"Pos\"])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.axhline(y=TP2, linestyle='dashed')\n\ncol1 = \"blue\"\nax.plot(FP1, TP1, marker='o', color=col1)\nax.text(FP1, TP1, \"C1\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=TP1, color=col1, linestyle='dotted')\nax.axvline(x=FP1, color=col1, linestyle='dotted')\n\ncol2 = \"red\"\nax.plot(FP2, TP2, marker='o', color=col2)\nax.text(FP2, TP2, \"C2\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=TP2, color=col2, linestyle='dotted')\nax.axvline(x=FP2, color=col2, linestyle='dotted')\n\ncol3 = \"green\"\nax.plot(FP3, TP3, marker='o', color=col3)\nax.text(FP3, TP3, \"C3\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=TP3, color=col3, linestyle='dotted')\nax.axvline(x=FP3, color=col3, linestyle='dotted')\n\nplt.show()"
  },
  {
    "objectID": "chapter_2/coverage_left.html",
    "href": "chapter_2/coverage_left.html",
    "title": "2.2 Coverage Left",
    "section": "",
    "text": "Code\nh &lt;- 50 \nw &lt;- 50 \ngrid.step &lt;- 10\n\nTP1 &lt;- 30\nFP1 &lt;- 10\nTP2 &lt;- 20\nFP2 &lt;- 20\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\n\naxis(2,c(0,TP2,TP1,h),labels=c('0','TP2','TP1','Pos'))\naxis(1,c(0,FP1,FP2,w),labels=c('0','FP1','FP2','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ncol1 &lt;- \"blue\"\npoints( FP1, TP1, col=col1, type=\"o\")\ntext( FP1, TP1, \"C1\", pos=3)\nabline(h=TP1, v=FP1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( FP2, TP2, col=col2, type=\"o\")\ntext( FP2, TP2, \"C2\", pos=3)\nabline(h=TP2, v=FP2, col=col2, lty=\"dotted\")"
  },
  {
    "objectID": "chapter_2/coverage_left.html#r-figure",
    "href": "chapter_2/coverage_left.html#r-figure",
    "title": "2.2 Coverage Left",
    "section": "",
    "text": "Code\nh &lt;- 50 \nw &lt;- 50 \ngrid.step &lt;- 10\n\nTP1 &lt;- 30\nFP1 &lt;- 10\nTP2 &lt;- 20\nFP2 &lt;- 20\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\n\naxis(2,c(0,TP2,TP1,h),labels=c('0','TP2','TP1','Pos'))\naxis(1,c(0,FP1,FP2,w),labels=c('0','FP1','FP2','Neg'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ncol1 &lt;- \"blue\"\npoints( FP1, TP1, col=col1, type=\"o\")\ntext( FP1, TP1, \"C1\", pos=3)\nabline(h=TP1, v=FP1, col=col1, lty=\"dotted\")\n\ncol2 &lt;- \"red\"\npoints( FP2, TP2, col=col2, type=\"o\")\ntext( FP2, TP2, \"C2\", pos=3)\nabline(h=TP2, v=FP2, col=col2, lty=\"dotted\")"
  },
  {
    "objectID": "chapter_2/coverage_left.html#python-figure",
    "href": "chapter_2/coverage_left.html#python-figure",
    "title": "2.2 Coverage Left",
    "section": "Python figure",
    "text": "Python figure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 50\nw = 50\ngrid_step = 10\n\nTP1 = 30\nFP1 = 10\nTP2 = 20\nFP2 = 20\n\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_xlim(0, w)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 50.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nax.set_yticks([0, TP2, TP1, h])\nax.set_yticklabels(['0', 'TP2', 'TP1', 'Pos'])\nax.set_xticks([0, FP1, FP2, w])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\n\nfor gx in range(grid_step, w, grid_step):\n    ax.axvline(x=gx, color=\"gray\", linestyle=\"--\")\n\nfor gy in range(grid_step, h, grid_step):\n    ax.axhline(y=gy, color=\"gray\", linestyle=\"--\")\n\n\ncol1 = \"blue\"\nax.plot(FP1, TP1, 'o', color=col1)\nax.text(FP1, TP1, \"C1\", color=col1, verticalalignment='bottom', horizontalalignment='center')\n\ncol2 = \"red\"\nax.plot(FP2, TP2, 'o', color=col2)\nax.text(FP2, TP2, \"C2\", color=col2, verticalalignment='bottom', horizontalalignment='center')\n\nax.axhline(y=TP1, color=col1, linestyle=\"--\")\nax.axvline(x=FP1, color=col1, linestyle=\"--\")\n\nax.axhline(y=TP2, color=col2, linestyle=\"--\")\nax.axvline(x=FP2, color=col2, linestyle=\"--\")\n\nplt.show()"
  },
  {
    "objectID": "chapter_8/mlmethods2-complete.html",
    "href": "chapter_8/mlmethods2-complete.html",
    "title": "8.12 ML Methods",
    "section": "",
    "text": "k = 2, Sum of squared distances (inertia): 560.625\nCluster 1:\n['naive Bayes' 'kNN' 'Linear Classifier' 'Linear Regression'\n 'Logistic Regression' 'SVM' 'Kmeans' 'GMM']\nCluster 2:\n['Trees' 'Rules' 'Associations']\nk = 3, Sum of squared distances (inertia): 293.5\nCluster 1:\n['naive Bayes' 'GMM']\nCluster 2:\n['Trees' 'Rules' 'Associations']\nCluster 3:\n['kNN' 'Linear Classifier' 'Linear Regression' 'Logistic Regression' 'SVM'\n 'Kmeans']\nk = 4, Sum of squared distances (inertia): 207.5\nCluster 1:\n['kNN' 'Linear Classifier' 'Linear Regression' 'Logistic Regression' 'SVM'\n 'Kmeans']\nCluster 2:\n['naive Bayes']\nCluster 3:\n['Trees' 'Rules' 'Associations']\nCluster 4:\n['GMM']\nk = 5, Sum of squared distances (inertia): 148.0\nCluster 1:\n['kNN' 'Linear Regression' 'Logistic Regression' 'SVM' 'Kmeans']\nCluster 2:\n['naive Bayes']\nCluster 3:\n['Trees' 'Rules' 'Associations']\nCluster 4:\n['GMM']\nCluster 5:\n['Linear Classifier']"
  },
  {
    "objectID": "chapter_8/twonex.html",
    "href": "chapter_8/twonex.html",
    "title": "8.8 Twonex",
    "section": "",
    "text": "/tmp/ipykernel_139648/4139506444.py:36: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))\n/tmp/ipykernel_139648/4139506444.py:36: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))\n/tmp/ipykernel_139648/4139506444.py:36: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))"
  },
  {
    "objectID": "chapter_8/randomdendrogram.html",
    "href": "chapter_8/randomdendrogram.html",
    "title": "8.18 Random Dendogram",
    "section": "",
    "text": "Spearman correlation for complete: 0.6138601034465807"
  },
  {
    "objectID": "chapter_2.html",
    "href": "chapter_2.html",
    "title": "Chapter 2",
    "section": "",
    "text": "2.1 Decision Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.10 Covgrad 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.11 Threshold\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.12 PET\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.13 Convexhull right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.13 Convexhull right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.2 Coverage Left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.2 Coverage Right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.3 Roc left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.3 Roc right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.5 Covroc left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.5 Covroc right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.5 Scoring Tree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.7 Covrank left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.7 Covrank right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.8 Racc unbalanced left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.8 Racc unbalanced right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.9 Covgrad left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n2.9 Covgrad right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_4/path.html",
    "href": "chapter_4/path.html",
    "title": "4.5 Path",
    "section": "",
    "text": "Code\nx &lt;- c(0,0,0,0,100)\ny &lt;- c(0,100,200,300,300)\n\nh &lt;- 300\nw &lt;- 100\n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1','p2','p3',''))\naxis(1,x,labels=c('','','','','n1'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ntext( x[2]+10, y[2], \"A\")\ntext( x[3]+10, y[3], \"B\")\ntext( x[4]+10, y[4]-10, \"C,D\")\ntext( x[5]-10, y[5]-10, \"E,F\")\n\nlines( x, y, lwd=5, type='o')"
  },
  {
    "objectID": "chapter_4/path.html#path-right",
    "href": "chapter_4/path.html#path-right",
    "title": "4.5 Path",
    "section": "",
    "text": "Code\nx &lt;- c(0,0,0,0,100)\ny &lt;- c(0,100,200,300,300)\n\nh &lt;- 300\nw &lt;- 100\n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1','p2','p3',''))\naxis(1,x,labels=c('','','','','n1'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ntext( x[2]+10, y[2], \"A\")\ntext( x[3]+10, y[3], \"B\")\ntext( x[4]+10, y[4]-10, \"C,D\")\ntext( x[5]-10, y[5]-10, \"E,F\")\n\nlines( x, y, lwd=5, type='o')"
  },
  {
    "objectID": "chapter_4/path.html#path-left",
    "href": "chapter_4/path.html#path-left",
    "title": "4.5 Path",
    "section": "Path left",
    "text": "Path left\n\n\nCode\ngraph TD;\n    1[\"A: Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::filled\n    2[\"B: Length=[3,4] & Gills=no & Beak=yes & Teeth=many\"]\n    10[\"C: Length=[3,4] & Gills=no & Beak=yes\"]\n    15[\"E: Beak=yes\"]\n    16[\"F: true\"]\n    19[\"D: Length=[3,4] & Beak=yes\"]\n\n    2 --&gt; 1\n    10 --&gt; 2\n    16 --&gt; 15\n    15 --&gt; 19\n    19 --&gt; 10\n\n    classDef filled fill:#f0f0f0,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    1[\"A: Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::filled\n    2[\"B: Length=[3,4] & Gills=no & Beak=yes & Teeth=many\"]\n    10[\"C: Length=[3,4] & Gills=no & Beak=yes\"]\n    15[\"E: Beak=yes\"]\n    16[\"F: true\"]\n    19[\"D: Length=[3,4] & Beak=yes\"]\n\n    2 --&gt; 1\n    10 --&gt; 2\n    16 --&gt; 15\n    15 --&gt; 19\n    19 --&gt; 10\n\n    classDef filled fill:#f0f0f0,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_4/dolphins3.html",
    "href": "chapter_4/dolphins3.html",
    "title": "4.4 Dolphins 3",
    "section": "",
    "text": "Code\ngraph TD;\n    bottom[\"Length=[3,4] & Gills=no & Beak=yes\"];\n    A[\"Length=[3,4] & Gills=no\"];\n    B[\"Length=[3,4] & Beak=yes\"];\n    C[\"Gills=no & Beak=yes\"];\n    AB[\"Length=[3,4]\"];\n    AC[\"Gills=no\"];\n    BC[\"Beak=yes\"];\n\n    A --&gt; bottom;\n    B --&gt; bottom;\n    C --&gt; bottom;\n    AB --&gt; A;\n    AB --&gt; B;\n    AC --&gt; A;\n    AC --&gt; C;\n    BC --&gt; B;\n    BC --&gt; C;\n\n\n\n\ngraph TD;\n    bottom[\"Length=[3,4] & Gills=no & Beak=yes\"];\n    A[\"Length=[3,4] & Gills=no\"];\n    B[\"Length=[3,4] & Beak=yes\"];\n    C[\"Gills=no & Beak=yes\"];\n    AB[\"Length=[3,4]\"];\n    AC[\"Gills=no\"];\n    BC[\"Beak=yes\"];\n\n    A --&gt; bottom;\n    B --&gt; bottom;\n    C --&gt; bottom;\n    AB --&gt; A;\n    AB --&gt; B;\n    AC --&gt; A;\n    AC --&gt; C;\n    BC --&gt; B;\n    BC --&gt; C;"
  },
  {
    "objectID": "chapter_4/dolphins.html",
    "href": "chapter_4/dolphins.html",
    "title": "4.2 Dolphins",
    "section": "",
    "text": "Code\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    4[\"Gills=no & Beak=yes & Teeth=many\"];\n    5[\"Length=3 & Beak=yes & Teeth=many\"];\n    6[\"Length=3 & Gills=no & Teeth=many\"];\n    7[\"Length=3 & Gills=no & Beak=yes\"];\n    8[\"Beak=yes & Teeth=many\"];\n    9[\"Gills=no & Teeth=many\"];\n    10[\"Gills=no & Beak=yes\"]:::green;\n    11[\"Teeth=many\"];\n    12[\"Beak=yes\"]:::green;\n    13[\"true\"]:::green;\n    14[\"Gills=no\"]:::green;\n    15[\"Length=3 & Teeth=many\"];\n    16[\"Length=3 & Beak=yes\"];\n    17[\"Length=3\"];\n    18[\"Length=3 & Gills=no\"];\n    19[\"Length=4 & Beak=yes & Teeth=many\"];\n    20[\"Length=4 & Gills=no & Teeth=many\"];\n    21[\"Length=4 & Gills=no & Beak=yes\"];\n    22[\"Length=4 & Teeth=many\"];\n    23[\"Length=4 & Beak=yes\"];\n    24[\"Length=4\"];\n    25[\"Length=4 & Gills=no\"];\n    26[\"Gills=no & Beak=yes & Teeth=few\"];\n    27[\"Length=3 & Beak=yes & Teeth=few\"];\n    28[\"Length=3 & Gills=no & Teeth=few\"];\n    29[\"Beak=yes & Teeth=few\"];\n    30[\"Gills=no & Teeth=few\"];\n    31[\"Teeth=few\"];\n    32[\"Length=3 & Teeth=few\"];\n    \n    4 --&gt; 1;\n    5 --&gt; 1;\n    6 --&gt; 1;\n    7 --&gt; 1;\n    8 --&gt; 4;\n    9 --&gt; 4;\n    10 --&gt; 4;\n    11 --&gt; 8;\n    12 --&gt; 8;\n    13 --&gt; 11;\n    13 --&gt; 12;\n    11 --&gt; 9;\n    14 --&gt; 9;\n    13 --&gt; 14;\n    12 --&gt; 10;\n    14 --&gt; 10;\n    8 --&gt; 5;\n    15 --&gt; 5;\n    16 --&gt; 5;\n    11 --&gt; 15;\n    17 --&gt; 15;\n    13 --&gt; 17;\n    12 --&gt; 16;\n    17 --&gt; 16;\n    9 --&gt; 6;\n    15 --&gt; 6;\n    18 --&gt; 6;\n    14 --&gt; 18;\n    17 --&gt; 18;\n    10 --&gt; 7;\n    16 --&gt; 7;\n    18 --&gt; 7;\n    4 --&gt; 2;\n    19 --&gt; 2;\n    20 --&gt; 2;\n    21 --&gt; 2;\n    8 --&gt; 19;\n    22 --&gt; 19;\n    23 --&gt; 19;\n    11 --&gt; 22;\n    24 --&gt; 22;\n    13 --&gt; 24;\n    12 --&gt; 23;\n    24 --&gt; 23;\n    9 --&gt; 20;\n    22 --&gt; 20;\n    25 --&gt; 20;\n    14 --&gt; 25;\n    24 --&gt; 25;\n    10 --&gt; 21;\n    23 --&gt; 21;\n    25 --&gt; 21;\n    26 --&gt; 3;\n    27 --&gt; 3;\n    28 --&gt; 3;\n    7 --&gt; 3;\n    29 --&gt; 26;\n    30 --&gt; 26;\n    10 --&gt; 26;\n    31 --&gt; 29;\n    12 --&gt; 29;\n    13 --&gt; 31;\n    31 --&gt; 30;\n    14 --&gt; 30;\n    29 --&gt; 27;\n    32 --&gt; 27;\n    16 --&gt; 27;\n    31 --&gt; 32;\n    17 --&gt; 32;\n    30 --&gt; 28;\n    32 --&gt; 28;\n    18 --&gt; 28;\n    \n    classDef green fill:#90EE90,stroke:#008000;\n\n\n\n\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    4[\"Gills=no & Beak=yes & Teeth=many\"];\n    5[\"Length=3 & Beak=yes & Teeth=many\"];\n    6[\"Length=3 & Gills=no & Teeth=many\"];\n    7[\"Length=3 & Gills=no & Beak=yes\"];\n    8[\"Beak=yes & Teeth=many\"];\n    9[\"Gills=no & Teeth=many\"];\n    10[\"Gills=no & Beak=yes\"]:::green;\n    11[\"Teeth=many\"];\n    12[\"Beak=yes\"]:::green;\n    13[\"true\"]:::green;\n    14[\"Gills=no\"]:::green;\n    15[\"Length=3 & Teeth=many\"];\n    16[\"Length=3 & Beak=yes\"];\n    17[\"Length=3\"];\n    18[\"Length=3 & Gills=no\"];\n    19[\"Length=4 & Beak=yes & Teeth=many\"];\n    20[\"Length=4 & Gills=no & Teeth=many\"];\n    21[\"Length=4 & Gills=no & Beak=yes\"];\n    22[\"Length=4 & Teeth=many\"];\n    23[\"Length=4 & Beak=yes\"];\n    24[\"Length=4\"];\n    25[\"Length=4 & Gills=no\"];\n    26[\"Gills=no & Beak=yes & Teeth=few\"];\n    27[\"Length=3 & Beak=yes & Teeth=few\"];\n    28[\"Length=3 & Gills=no & Teeth=few\"];\n    29[\"Beak=yes & Teeth=few\"];\n    30[\"Gills=no & Teeth=few\"];\n    31[\"Teeth=few\"];\n    32[\"Length=3 & Teeth=few\"];\n    \n    4 --&gt; 1;\n    5 --&gt; 1;\n    6 --&gt; 1;\n    7 --&gt; 1;\n    8 --&gt; 4;\n    9 --&gt; 4;\n    10 --&gt; 4;\n    11 --&gt; 8;\n    12 --&gt; 8;\n    13 --&gt; 11;\n    13 --&gt; 12;\n    11 --&gt; 9;\n    14 --&gt; 9;\n    13 --&gt; 14;\n    12 --&gt; 10;\n    14 --&gt; 10;\n    8 --&gt; 5;\n    15 --&gt; 5;\n    16 --&gt; 5;\n    11 --&gt; 15;\n    17 --&gt; 15;\n    13 --&gt; 17;\n    12 --&gt; 16;\n    17 --&gt; 16;\n    9 --&gt; 6;\n    15 --&gt; 6;\n    18 --&gt; 6;\n    14 --&gt; 18;\n    17 --&gt; 18;\n    10 --&gt; 7;\n    16 --&gt; 7;\n    18 --&gt; 7;\n    4 --&gt; 2;\n    19 --&gt; 2;\n    20 --&gt; 2;\n    21 --&gt; 2;\n    8 --&gt; 19;\n    22 --&gt; 19;\n    23 --&gt; 19;\n    11 --&gt; 22;\n    24 --&gt; 22;\n    13 --&gt; 24;\n    12 --&gt; 23;\n    24 --&gt; 23;\n    9 --&gt; 20;\n    22 --&gt; 20;\n    25 --&gt; 20;\n    14 --&gt; 25;\n    24 --&gt; 25;\n    10 --&gt; 21;\n    23 --&gt; 21;\n    25 --&gt; 21;\n    26 --&gt; 3;\n    27 --&gt; 3;\n    28 --&gt; 3;\n    7 --&gt; 3;\n    29 --&gt; 26;\n    30 --&gt; 26;\n    10 --&gt; 26;\n    31 --&gt; 29;\n    12 --&gt; 29;\n    13 --&gt; 31;\n    31 --&gt; 30;\n    14 --&gt; 30;\n    29 --&gt; 27;\n    32 --&gt; 27;\n    16 --&gt; 27;\n    31 --&gt; 32;\n    17 --&gt; 32;\n    30 --&gt; 28;\n    32 --&gt; 28;\n    18 --&gt; 28;\n    \n    classDef green fill:#90EE90,stroke:#008000;"
  },
  {
    "objectID": "chapter_4/concepts-closed.html",
    "href": "chapter_4/concepts-closed.html",
    "title": "4.7 Concepts closed",
    "section": "",
    "text": "Code\ngraph TD;\n    25[\"true\"]:::green;\n    25 --&gt;|\" \"| 23;\n    23[\"Teeth=many\"];\n    23 --&gt;|\" \"| 20;\n    20[\"Beak=yes & Teeth=many\"];\n    20 --&gt; 16;\n    16[\"Gills=no & Beak=yes & Teeth=many\"]:::orange;\n    16 --&gt; 11;\n    11[\"Length=[3,4] & Gills=no & Beak=yes & Teeth=many\"];\n    11 --&gt; 1;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    11 --&gt; 2;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    16 --&gt; 12;\n    12[\"Length=[3,5] & Gills=no & Beak=yes & Teeth=many\"];\n    12 --&gt; 1;\n    12 --&gt; 4;\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    16 --&gt; 42;\n    42[\"Length=[4,5] & Gills=no & Beak=yes & Teeth=many\"];\n    42 --&gt; 2;\n    42 --&gt; 4;\n    20 --&gt;|\" \"| 17;\n    17[\"Length=[3,4] & Beak=yes & Teeth=many\"];\n    17 --&gt; 11;\n    17 --&gt;|\" \"| 43;\n    43[\"Length=4 & Beak=yes & Teeth=many\"];\n    43 --&gt; 2;\n    43 --&gt;|\" \"| 7;\n    7[\"Length=4 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    20 --&gt;|\" \"| 31;\n    31[\"Length=[3,5] & Beak=yes & Teeth=many\"];\n    31 --&gt; 12;\n    31 --&gt;|\" \"| 72;\n    72[\"Length=5 & Beak=yes & Teeth=many\"];\n    72 --&gt; 4;\n    72 --&gt;|\" \"| 6;\n    6[\"Length=5 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    20 --&gt;|\" \"| 46;\n    46[\"Length=[4,5] & Beak=yes & Teeth=many\"];\n    46 --&gt; 42;\n    46 --&gt;|\" \"| 43;\n    46 --&gt;|\" \"| 72;\n    46 --&gt;|\" \"| 87;\n    87[\"Length=[4,5] & Gills=yes & Beak=yes & Teeth=many\"];\n    87 --&gt;|\" \"| 6;\n    87 --&gt;|\" \"| 7;\n    25 --&gt;|\" \"| 24;\n    24[\"Beak=yes\"]:::green;\n    24 --&gt;|\" \"| 20;\n    24 --&gt;|\" \"| 22;\n    22[\"Gills=no & Beak=yes\"]:::green;\n    22 --&gt; 16;\n    22 --&gt;|\" \"| 19;\n    19[\"Length=[3,4] & Gills=no & Beak=yes\"];\n    19 --&gt; 11;\n    19 --&gt; 15;\n    15[\"Length=3 & Gills=no & Beak=yes\"];\n    15 --&gt; 1;\n    15 --&gt; 3;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    19 --&gt;|\" \"| 45;\n    45[\"Length=4 & Gills=no & Beak=yes\"];\n    45 --&gt; 2;\n    45 --&gt;|\" \"| 10;\n    10[\"Length=4 & Gills=no & Beak=yes & Teeth=few\"]:::red;\n    22 --&gt; 33;\n    33[\"Length=[3,5] & Gills=no & Beak=yes\"]:::orange;\n    33 --&gt; 12;\n    33 --&gt; 15;\n    33 --&gt; 58;\n    58[\"Length=[3,5] & Gills=no & Beak=yes & Teeth=few\"];\n    58 --&gt; 3;\n    58 --&gt; 5;\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    22 --&gt;|\" \"| 48;\n    48[\"Length=[4,5] & Gills=no & Beak=yes\"];\n    48 --&gt; 42;\n    48 --&gt;|\" \"| 45;\n    48 --&gt; 74;\n    74[\"Length=5 & Gills=no & Beak=yes\"];\n    74 --&gt; 4;\n    74 --&gt; 5;\n    25 --&gt;|\" \"| 29;\n    29[\"Length=[3,4]\"];\n    29 --&gt;|\" \"| 27;\n    27[\"Length=[3,4] & Teeth=many\"];\n    27 --&gt;|\" \"| 17;\n    29 --&gt;|\" \"| 28;\n    28[\"Length=[3,4] & Beak=yes\"];\n    28 --&gt;|\" \"| 17;\n    28 --&gt;|\" \"| 19;\n    25 --&gt;|\" \"| 36;\n    36[\"Length=[3,5]\"];\n    36 --&gt;|\" \"| 34;\n    34[\"Length=[3,5] & Teeth=many\"];\n    34 --&gt;|\" \"| 31;\n    34 --&gt;|\" \"| 75;\n    75[\"Length=5 & Teeth=many\"];\n    75 --&gt;|\" \"| 72;\n    75 --&gt;|\" \"| 88;\n    88[\"Length=5 & Gills=yes & Teeth=many\"];\n    88 --&gt;|\" \"| 6;\n    88 --&gt;|\" \"| 8;\n    8[\"Length=5 & Gills=yes & Beak=no & Teeth=many\"]:::red;\n    classDef green fill:#90EE90,stroke:#008000;\n    classDef red fill:#FF6347,stroke:#8B0000;\n    classDef orange fill:#FFA500,stroke:#FF8C00;\n\n\n\n\ngraph TD;\n    25[\"true\"]:::green;\n    25 --&gt;|\" \"| 23;\n    23[\"Teeth=many\"];\n    23 --&gt;|\" \"| 20;\n    20[\"Beak=yes & Teeth=many\"];\n    20 --&gt; 16;\n    16[\"Gills=no & Beak=yes & Teeth=many\"]:::orange;\n    16 --&gt; 11;\n    11[\"Length=[3,4] & Gills=no & Beak=yes & Teeth=many\"];\n    11 --&gt; 1;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    11 --&gt; 2;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    16 --&gt; 12;\n    12[\"Length=[3,5] & Gills=no & Beak=yes & Teeth=many\"];\n    12 --&gt; 1;\n    12 --&gt; 4;\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    16 --&gt; 42;\n    42[\"Length=[4,5] & Gills=no & Beak=yes & Teeth=many\"];\n    42 --&gt; 2;\n    42 --&gt; 4;\n    20 --&gt;|\" \"| 17;\n    17[\"Length=[3,4] & Beak=yes & Teeth=many\"];\n    17 --&gt; 11;\n    17 --&gt;|\" \"| 43;\n    43[\"Length=4 & Beak=yes & Teeth=many\"];\n    43 --&gt; 2;\n    43 --&gt;|\" \"| 7;\n    7[\"Length=4 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    20 --&gt;|\" \"| 31;\n    31[\"Length=[3,5] & Beak=yes & Teeth=many\"];\n    31 --&gt; 12;\n    31 --&gt;|\" \"| 72;\n    72[\"Length=5 & Beak=yes & Teeth=many\"];\n    72 --&gt; 4;\n    72 --&gt;|\" \"| 6;\n    6[\"Length=5 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    20 --&gt;|\" \"| 46;\n    46[\"Length=[4,5] & Beak=yes & Teeth=many\"];\n    46 --&gt; 42;\n    46 --&gt;|\" \"| 43;\n    46 --&gt;|\" \"| 72;\n    46 --&gt;|\" \"| 87;\n    87[\"Length=[4,5] & Gills=yes & Beak=yes & Teeth=many\"];\n    87 --&gt;|\" \"| 6;\n    87 --&gt;|\" \"| 7;\n    25 --&gt;|\" \"| 24;\n    24[\"Beak=yes\"]:::green;\n    24 --&gt;|\" \"| 20;\n    24 --&gt;|\" \"| 22;\n    22[\"Gills=no & Beak=yes\"]:::green;\n    22 --&gt; 16;\n    22 --&gt;|\" \"| 19;\n    19[\"Length=[3,4] & Gills=no & Beak=yes\"];\n    19 --&gt; 11;\n    19 --&gt; 15;\n    15[\"Length=3 & Gills=no & Beak=yes\"];\n    15 --&gt; 1;\n    15 --&gt; 3;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    19 --&gt;|\" \"| 45;\n    45[\"Length=4 & Gills=no & Beak=yes\"];\n    45 --&gt; 2;\n    45 --&gt;|\" \"| 10;\n    10[\"Length=4 & Gills=no & Beak=yes & Teeth=few\"]:::red;\n    22 --&gt; 33;\n    33[\"Length=[3,5] & Gills=no & Beak=yes\"]:::orange;\n    33 --&gt; 12;\n    33 --&gt; 15;\n    33 --&gt; 58;\n    58[\"Length=[3,5] & Gills=no & Beak=yes & Teeth=few\"];\n    58 --&gt; 3;\n    58 --&gt; 5;\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    22 --&gt;|\" \"| 48;\n    48[\"Length=[4,5] & Gills=no & Beak=yes\"];\n    48 --&gt; 42;\n    48 --&gt;|\" \"| 45;\n    48 --&gt; 74;\n    74[\"Length=5 & Gills=no & Beak=yes\"];\n    74 --&gt; 4;\n    74 --&gt; 5;\n    25 --&gt;|\" \"| 29;\n    29[\"Length=[3,4]\"];\n    29 --&gt;|\" \"| 27;\n    27[\"Length=[3,4] & Teeth=many\"];\n    27 --&gt;|\" \"| 17;\n    29 --&gt;|\" \"| 28;\n    28[\"Length=[3,4] & Beak=yes\"];\n    28 --&gt;|\" \"| 17;\n    28 --&gt;|\" \"| 19;\n    25 --&gt;|\" \"| 36;\n    36[\"Length=[3,5]\"];\n    36 --&gt;|\" \"| 34;\n    34[\"Length=[3,5] & Teeth=many\"];\n    34 --&gt;|\" \"| 31;\n    34 --&gt;|\" \"| 75;\n    75[\"Length=5 & Teeth=many\"];\n    75 --&gt;|\" \"| 72;\n    75 --&gt;|\" \"| 88;\n    88[\"Length=5 & Gills=yes & Teeth=many\"];\n    88 --&gt;|\" \"| 6;\n    88 --&gt;|\" \"| 8;\n    8[\"Length=5 & Gills=yes & Beak=no & Teeth=many\"]:::red;\n    classDef green fill:#90EE90,stroke:#008000;\n    classDef red fill:#FF6347,stroke:#8B0000;\n    classDef orange fill:#FFA500,stroke:#FF8C00;"
  },
  {
    "objectID": "chapter_4/dolphins4.html",
    "href": "chapter_4/dolphins4.html",
    "title": "4.6 Dolphins 4",
    "section": "",
    "text": "(0.0, 500.0)\n\n\n(0.0, 500.0)"
  },
  {
    "objectID": "chapter_4/dolphins4.html#dolphins-4-right",
    "href": "chapter_4/dolphins4.html#dolphins-4-right",
    "title": "4.6 Dolphins 4",
    "section": "",
    "text": "(0.0, 500.0)\n\n\n(0.0, 500.0)"
  },
  {
    "objectID": "chapter_4/dolphins4.html#path-left",
    "href": "chapter_4/dolphins4.html#path-left",
    "title": "4.6 Dolphins 4",
    "section": "Path left",
    "text": "Path left\n\n\n\n\ngraph TD;\n    1[\"A: Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::filled\n    2[\"B: Length=[3,5] & Gills=no & Beak=yes & Teeth=few\"]\n    10[\"C: Length=[3,5] & Gills=no & Beak=yes\"]\n    13[\"D: Gills=no & Beak=yes\"]\n    15[\"E: Gills=no\"]\n    16[\"F: true\"]\n\n    2 --&gt; 1\n    10 --&gt; 2\n    13 --&gt; 10\n    15 --&gt; 13\n    16 --&gt; 15\n\n    classDef filled fill:#f0f0f0,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_4/concepts-full.html",
    "href": "chapter_4/concepts-full.html",
    "title": "4.1 Concepts Full",
    "section": "",
    "text": "Code\ngraph TD;\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n\n    subgraph Length=3\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L3_GY_BY_TM[\"Teeth=many\"]:::filled\n                L3_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L3_GY_BN_TM[\"Teeth=many\"]:::filled\n                L3_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L3_GN_BY_TM[\"Teeth=many\"]:::filled\n                L3_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L3_GN_BN_TM[\"Teeth=many\"]:::filled\n                L3_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end\n\n    subgraph Length=4\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L4_GY_BY_TM[\"Teeth=many\"]:::filled\n                L4_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L4_GY_BN_TM[\"Teeth=many\"]:::filled\n                L4_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L4_GN_BY_TM[\"Teeth=many\"]:::filled\n                L4_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L4_GN_BN_TM[\"Teeth=many\"]:::filled\n                L4_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end\n\n    subgraph Length=5\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L5_GY_BY_TM[\"Teeth=many\"]:::filled\n                L5_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L5_GY_BN_TM[\"Teeth=many\"]:::filled\n                L5_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L5_GN_BY_TM[\"Teeth=many\"]:::filled\n                L5_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L5_GN_BN_TM[\"Teeth=many\"]:::filled\n                L5_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end\n\n\n\n\ngraph TD;\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n\n    subgraph Length=3\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L3_GY_BY_TM[\"Teeth=many\"]:::filled\n                L3_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L3_GY_BN_TM[\"Teeth=many\"]:::filled\n                L3_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L3_GN_BY_TM[\"Teeth=many\"]:::filled\n                L3_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L3_GN_BN_TM[\"Teeth=many\"]:::filled\n                L3_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end\n\n    subgraph Length=4\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L4_GY_BY_TM[\"Teeth=many\"]:::filled\n                L4_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L4_GY_BN_TM[\"Teeth=many\"]:::filled\n                L4_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L4_GN_BY_TM[\"Teeth=many\"]:::filled\n                L4_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L4_GN_BN_TM[\"Teeth=many\"]:::filled\n                L4_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end\n\n    subgraph Length=5\n        subgraph Gills=yes\n            subgraph Beak=yes\n                L5_GY_BY_TM[\"Teeth=many\"]:::filled\n                L5_GY_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L5_GY_BN_TM[\"Teeth=many\"]:::filled\n                L5_GY_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n        subgraph Gills=no\n            subgraph Beak=yes\n                L5_GN_BY_TM[\"Teeth=many\"]:::filled\n                L5_GN_BY_TF[\"Teeth=few\"]:::filled\n            end\n            subgraph Beak=no\n                L5_GN_BN_TM[\"Teeth=many\"]:::filled\n                L5_GN_BN_TF[\"Teeth=few\"]:::filled\n            end\n        end\n    end"
  },
  {
    "objectID": "chapter_4/dolphins2.html",
    "href": "chapter_4/dolphins2.html",
    "title": "4.3 Dolphins 2",
    "section": "",
    "text": "Code\ngraph TD;\n    classDef green fill:#90EE90,stroke:#008000;\n    classDef red fill:#FF6347,stroke:#8B0000;\n    \n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    4[\"Length=5 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    5[\"Gills=no & Beak=yes & Teeth=many\"];\n    6[\"Length=3 & Beak=yes & Teeth=many\"];\n    7[\"Length=3 & Gills=no & Teeth=many\"];\n    8[\"Length=3 & Gills=no & Beak=yes\"];\n    9[\"Beak=yes & Teeth=many\"];\n    10[\"Gills=no & Teeth=many\"];\n    11[\"Gills=no & Beak=yes\"]:::green;\n    12[\"Teeth=many\"];\n    13[\"Beak=yes\"]:::green;\n    14[\"true\"]:::green;\n    15[\"Gills=no\"]:::green;\n    16[\"Length=3 & Teeth=many\"];\n    17[\"Length=3 & Beak=yes\"];\n    18[\"Length=3\"];\n    19[\"Length=3 & Gills=no\"];\n    20[\"Length=4 & Beak=yes & Teeth=many\"];\n    21[\"Length=4 & Gills=no & Teeth=many\"];\n    22[\"Length=4 & Gills=no & Beak=yes\"];\n    23[\"Length=4 & Teeth=many\"];\n    24[\"Length=4 & Beak=yes\"];\n    25[\"Length=4\"];\n    26[\"Length=4 & Gills=no\"];\n    27[\"Gills=no & Beak=yes & Teeth=few\"];\n    28[\"Length=3 & Beak=yes & Teeth=few\"];\n    29[\"Length=3 & Gills=no & Teeth=few\"];\n    30[\"Beak=yes & Teeth=few\"];\n    31[\"Gills=no & Teeth=few\"];\n    32[\"Teeth=few\"];\n    33[\"Length=3 & Teeth=few\"];\n    34[\"Gills=yes & Beak=yes & Teeth=many\"];\n    35[\"Length=5 & Beak=yes & Teeth=many\"];\n    36[\"Length=5 & Gills=yes & Teeth=many\"];\n    37[\"Length=5 & Gills=yes & Beak=yes\"];\n    38[\"Gills=yes & Teeth=many\"];\n    39[\"Gills=yes & Beak=yes\"];\n    40[\"Gills=yes\"];\n    41[\"Length=5 & Teeth=many\"];\n    42[\"Length=5 & Beak=yes\"];\n    43[\"Length=5\"];\n    44[\"Length=5 & Gills=yes\"];\n    \n    5 --&gt; 1;\n    6 --&gt; 1;\n    7 --&gt; 1;\n    8 --&gt; 1;\n    9 --&gt; 5;\n    10 --&gt; 5;\n    11 --&gt; 5;\n    12 --&gt; 9;\n    13 --&gt; 9;\n    14 --&gt; 12;\n    14 --&gt; 13;\n    12 --&gt; 10;\n    15 --&gt; 10;\n    14 --&gt; 15;\n    13 --&gt; 11;\n    15 --&gt; 11;\n    9 --&gt; 6;\n    16 --&gt; 6;\n    17 --&gt; 6;\n    12 --&gt; 16;\n    18 --&gt; 16;\n    14 --&gt; 18;\n    13 --&gt; 17;\n    18 --&gt; 17;\n    10 --&gt; 7;\n    16 --&gt; 7;\n    19 --&gt; 7;\n    15 --&gt; 19;\n    18 --&gt; 19;\n    11 --&gt; 8;\n    17 --&gt; 8;\n    19 --&gt; 8;\n    5 --&gt; 2;\n    20 --&gt; 2;\n    21 --&gt; 2;\n    22 --&gt; 2;\n    9 --&gt; 20;\n    23 --&gt; 20;\n    24 --&gt; 20;\n    12 --&gt; 23;\n    25 --&gt; 23;\n    14 --&gt; 25;\n    13 --&gt; 24;\n    25 --&gt; 24;\n    10 --&gt; 21;\n    23 --&gt; 21;\n    26 --&gt; 21;\n    15 --&gt; 26;\n    25 --&gt; 26;\n    11 --&gt; 22;\n    24 --&gt; 22;\n    26 --&gt; 22;\n    27 --&gt; 3;\n    28 --&gt; 3;\n    29 --&gt; 3;\n    8 --&gt; 3;\n    30 --&gt; 27;\n    31 --&gt; 27;\n    11 --&gt; 27;\n    32 --&gt; 30;\n    13 --&gt; 30;\n    14 --&gt; 32;\n    32 --&gt; 31;\n    15 --&gt; 31;\n    30 --&gt; 28;\n    33 --&gt; 28;\n    17 --&gt; 28;\n    32 --&gt; 33;\n    18 --&gt; 33;\n    31 --&gt; 29;\n    33 --&gt; 29;\n    19 --&gt; 29;\n    34 --&gt; 4;\n    35 --&gt; 4;\n    36 --&gt; 4;\n    37 --&gt; 4;\n    9 --&gt; 34;\n    38 --&gt; 34;\n    39 --&gt; 34;\n    12 --&gt; 38;\n    40 --&gt; 38;\n    14 --&gt; 40;\n    13 --&gt; 39;\n    40 --&gt; 39;\n    9 --&gt; 35;\n    41 --&gt; 35;\n    42 --&gt; 35;\n    12 --&gt; 41;\n    43 --&gt; 41;\n    14 --&gt; 43;\n    13 --&gt; 42;\n    43 --&gt; 42;\n    38 --&gt; 36;\n    41 --&gt; 36;\n    44 --&gt; 36;\n    40 --&gt; 44;\n    43 --&gt; 44;\n    39 --&gt; 37;\n    42 --&gt; 37;\n    44 --&gt; 37;\n\n\n\n\ngraph TD;\n    classDef green fill:#90EE90,stroke:#008000;\n    classDef red fill:#FF6347,stroke:#8B0000;\n    \n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::green;\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::green;\n    4[\"Length=5 & Gills=yes & Beak=yes & Teeth=many\"]:::red;\n    5[\"Gills=no & Beak=yes & Teeth=many\"];\n    6[\"Length=3 & Beak=yes & Teeth=many\"];\n    7[\"Length=3 & Gills=no & Teeth=many\"];\n    8[\"Length=3 & Gills=no & Beak=yes\"];\n    9[\"Beak=yes & Teeth=many\"];\n    10[\"Gills=no & Teeth=many\"];\n    11[\"Gills=no & Beak=yes\"]:::green;\n    12[\"Teeth=many\"];\n    13[\"Beak=yes\"]:::green;\n    14[\"true\"]:::green;\n    15[\"Gills=no\"]:::green;\n    16[\"Length=3 & Teeth=many\"];\n    17[\"Length=3 & Beak=yes\"];\n    18[\"Length=3\"];\n    19[\"Length=3 & Gills=no\"];\n    20[\"Length=4 & Beak=yes & Teeth=many\"];\n    21[\"Length=4 & Gills=no & Teeth=many\"];\n    22[\"Length=4 & Gills=no & Beak=yes\"];\n    23[\"Length=4 & Teeth=many\"];\n    24[\"Length=4 & Beak=yes\"];\n    25[\"Length=4\"];\n    26[\"Length=4 & Gills=no\"];\n    27[\"Gills=no & Beak=yes & Teeth=few\"];\n    28[\"Length=3 & Beak=yes & Teeth=few\"];\n    29[\"Length=3 & Gills=no & Teeth=few\"];\n    30[\"Beak=yes & Teeth=few\"];\n    31[\"Gills=no & Teeth=few\"];\n    32[\"Teeth=few\"];\n    33[\"Length=3 & Teeth=few\"];\n    34[\"Gills=yes & Beak=yes & Teeth=many\"];\n    35[\"Length=5 & Beak=yes & Teeth=many\"];\n    36[\"Length=5 & Gills=yes & Teeth=many\"];\n    37[\"Length=5 & Gills=yes & Beak=yes\"];\n    38[\"Gills=yes & Teeth=many\"];\n    39[\"Gills=yes & Beak=yes\"];\n    40[\"Gills=yes\"];\n    41[\"Length=5 & Teeth=many\"];\n    42[\"Length=5 & Beak=yes\"];\n    43[\"Length=5\"];\n    44[\"Length=5 & Gills=yes\"];\n    \n    5 --&gt; 1;\n    6 --&gt; 1;\n    7 --&gt; 1;\n    8 --&gt; 1;\n    9 --&gt; 5;\n    10 --&gt; 5;\n    11 --&gt; 5;\n    12 --&gt; 9;\n    13 --&gt; 9;\n    14 --&gt; 12;\n    14 --&gt; 13;\n    12 --&gt; 10;\n    15 --&gt; 10;\n    14 --&gt; 15;\n    13 --&gt; 11;\n    15 --&gt; 11;\n    9 --&gt; 6;\n    16 --&gt; 6;\n    17 --&gt; 6;\n    12 --&gt; 16;\n    18 --&gt; 16;\n    14 --&gt; 18;\n    13 --&gt; 17;\n    18 --&gt; 17;\n    10 --&gt; 7;\n    16 --&gt; 7;\n    19 --&gt; 7;\n    15 --&gt; 19;\n    18 --&gt; 19;\n    11 --&gt; 8;\n    17 --&gt; 8;\n    19 --&gt; 8;\n    5 --&gt; 2;\n    20 --&gt; 2;\n    21 --&gt; 2;\n    22 --&gt; 2;\n    9 --&gt; 20;\n    23 --&gt; 20;\n    24 --&gt; 20;\n    12 --&gt; 23;\n    25 --&gt; 23;\n    14 --&gt; 25;\n    13 --&gt; 24;\n    25 --&gt; 24;\n    10 --&gt; 21;\n    23 --&gt; 21;\n    26 --&gt; 21;\n    15 --&gt; 26;\n    25 --&gt; 26;\n    11 --&gt; 22;\n    24 --&gt; 22;\n    26 --&gt; 22;\n    27 --&gt; 3;\n    28 --&gt; 3;\n    29 --&gt; 3;\n    8 --&gt; 3;\n    30 --&gt; 27;\n    31 --&gt; 27;\n    11 --&gt; 27;\n    32 --&gt; 30;\n    13 --&gt; 30;\n    14 --&gt; 32;\n    32 --&gt; 31;\n    15 --&gt; 31;\n    30 --&gt; 28;\n    33 --&gt; 28;\n    17 --&gt; 28;\n    32 --&gt; 33;\n    18 --&gt; 33;\n    31 --&gt; 29;\n    33 --&gt; 29;\n    19 --&gt; 29;\n    34 --&gt; 4;\n    35 --&gt; 4;\n    36 --&gt; 4;\n    37 --&gt; 4;\n    9 --&gt; 34;\n    38 --&gt; 34;\n    39 --&gt; 34;\n    12 --&gt; 38;\n    40 --&gt; 38;\n    14 --&gt; 40;\n    13 --&gt; 39;\n    40 --&gt; 39;\n    9 --&gt; 35;\n    41 --&gt; 35;\n    42 --&gt; 35;\n    12 --&gt; 41;\n    43 --&gt; 41;\n    14 --&gt; 43;\n    13 --&gt; 42;\n    43 --&gt; 42;\n    38 --&gt; 36;\n    41 --&gt; 36;\n    44 --&gt; 36;\n    40 --&gt; 44;\n    43 --&gt; 44;\n    39 --&gt; 37;\n    42 --&gt; 37;\n    44 --&gt; 37;\n\n\n\n\n\n```"
  },
  {
    "objectID": "chapter_11.html",
    "href": "chapter_11.html",
    "title": "Chapter 11",
    "section": "",
    "text": "11.1 Bagging\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n11.2 Boosting\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "chapter_5/dolphins-dl-left.html",
    "href": "chapter_5/dolphins-dl-left.html",
    "title": "5.1 Dolphins-dl-left",
    "section": "",
    "text": "Code\ngraph TD;\n    N1[\"Gills\"];\n    N2[\"Beak\"];\n    N3[\"Length\"];\n    N4[\"Teeth\"];\n    N5[\"Length\"];\n\n    N1 -- \"=yes\" --&gt; L1[\"+ve: 0\\n -ve: 4\"];\n    N1 -- \"=no\" --&gt; N2;\n    N2 -- \"=no\" --&gt; L2[\"+ve: 0\\n -ve: 0\"];\n    N2 -- \"=yes\" --&gt; N3;\n    N3 -- \"≠[3,5]\" --&gt; L3[\"+ve: 1\\n -ve: 1\"];\n    N3 -- \"=[3,5]\" --&gt; N4;\n    N4 -- \"=many\" --&gt; L4[\"+ve: 2\\n -ve: 0\"];\n    N4 -- \"=few\" --&gt; N5;\n    N5 -- \"=3\" --&gt; L6[\"+ve: 1\\n -ve: 0\"];\n    N5 -- \"=5\" --&gt; L5[\"+ve: 1\\n -ve: 0\"];\n\n\n\n\ngraph TD;\n    N1[\"Gills\"];\n    N2[\"Beak\"];\n    N3[\"Length\"];\n    N4[\"Teeth\"];\n    N5[\"Length\"];\n\n    N1 -- \"=yes\" --&gt; L1[\"+ve: 0\\n -ve: 4\"];\n    N1 -- \"=no\" --&gt; N2;\n    N2 -- \"=no\" --&gt; L2[\"+ve: 0\\n -ve: 0\"];\n    N2 -- \"=yes\" --&gt; N3;\n    N3 -- \"≠[3,5]\" --&gt; L3[\"+ve: 1\\n -ve: 1\"];\n    N3 -- \"=[3,5]\" --&gt; N4;\n    N4 -- \"=many\" --&gt; L4[\"+ve: 2\\n -ve: 0\"];\n    N4 -- \"=few\" --&gt; N5;\n    N5 -- \"=3\" --&gt; L6[\"+ve: 1\\n -ve: 0\"];\n    N5 -- \"=5\" --&gt; L5[\"+ve: 1\\n -ve: 0\"];"
  },
  {
    "objectID": "chapter_5/regtree.html",
    "href": "chapter_5/regtree.html",
    "title": "5.8 Regtree",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"Model\"];\n    N11[\"Leslie\"];\n    N12[\"Leslie\"];\n\n    L1[\"f̂(x)=4513\"];\n    L2[\"f̂(x)=77\"];\n    L3[\"f̂(x)=870\"];\n    L4[\"f̂(x)=1900\"];\n    L5[\"f̂(x)=1411\"];\n    L6[\"f̂(x)=625\"];\n    L7[\"f̂(x)=185\"];\n\n    N0 -- \"=A100\" --&gt; N11;\n    N0 -- \"=B3\" --&gt; L1;\n    N0 -- \"=E122\" --&gt; L2;\n    N0 -- \"=M102\" --&gt; L3;\n    N0 -- \"=T202\" --&gt; N12;\n\n    N11 -- \"=yes\" --&gt; L4;\n    N11 -- \"=no\" --&gt; L5;\n    \n    N12 -- \"=yes\" --&gt; L6;\n    N12 -- \"=no\" --&gt; L7;\n\n\n\n\ngraph TD;\n    N0[\"Model\"];\n    N11[\"Leslie\"];\n    N12[\"Leslie\"];\n\n    L1[\"f̂(x)=4513\"];\n    L2[\"f̂(x)=77\"];\n    L3[\"f̂(x)=870\"];\n    L4[\"f̂(x)=1900\"];\n    L5[\"f̂(x)=1411\"];\n    L6[\"f̂(x)=625\"];\n    L7[\"f̂(x)=185\"];\n\n    N0 -- \"=A100\" --&gt; N11;\n    N0 -- \"=B3\" --&gt; L1;\n    N0 -- \"=E122\" --&gt; L2;\n    N0 -- \"=M102\" --&gt; L3;\n    N0 -- \"=T202\" --&gt; N12;\n\n    N11 -- \"=yes\" --&gt; L4;\n    N11 -- \"=no\" --&gt; L5;\n    \n    N12 -- \"=yes\" --&gt; L6;\n    N12 -- \"=no\" --&gt; L7;"
  },
  {
    "objectID": "chapter_5/labelings.html",
    "href": "chapter_5/labelings.html",
    "title": "5.5 Labelings",
    "section": "",
    "text": "R figure\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 1000\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nx = [100, 250, 30, 620]\ny = [290, 10, 150, 50]\n\nax.set_xticks(range(0, w + 1, grid_step))\nax.set_yticks(range(0, h + 1, grid_step))\nax.set_xticklabels(range(0, w + 1, grid_step))\nax.set_yticklabels(range(0, h + 1, grid_step))\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(gy, color='gray', linestyle='dotted')\n\nax.plot([0, w], [0, h], linestyle=(0, (3, 5)), color='black')  # linha tracejada tipo lty=3\n\ndef sum_coords(arr, indices):\n    return sum(arr[i] for i in indices)\n\nax.plot([x[2], sum_coords(x, [0,1,3])], [y[2], sum_coords(y, [0,1,3])], linestyle=(0, (3,5)), color='black')\nax.plot([sum_coords(x, [0,2]), sum_coords(x, [1,3])], [sum_coords(y, [0,2]), sum_coords(y, [1,3])], linestyle=(0, (3,5)), color='black')\nax.plot([sum_coords(x, [0,2,3]), x[1]], [sum_coords(y, [0,2,3]), y[1]], linestyle=(0, (3,5)), color='black')\n\nfor i in range(4):\n    ax.plot([0, x[i]], [0, y[i]], linestyle='dashed', color='blue')\n    for j in range(4):\n        if j != i:\n            ax.plot([x[i], x[i] + x[j]], [y[i], y[i] + y[j]], linestyle='dashed', color='violet')\n            for k in range(4):\n                if k != i and k != j:\n                    ax.plot([x[i] + x[j], x[i] + x[j] + x[k]], [y[i] + y[j], y[i] + y[j] + y[k]], linestyle='dashed', color='red')\n                    for l in range(4):\n                        if l != i and l != j and l != k:\n                            ax.plot([x[i] + x[j] + x[k], w], [y[i] + y[j] + y[k], h], linestyle='dashed', color='orange')\n\npoints_labels = [\n    (0, 0, \"−−−−\"),\n    (x[0], y[0], \"+−−−\"),\n    (x[1], y[1], \"−+−−\"),\n    (x[2], y[2], \"−−+−\"),\n    (x[3], y[3], \"−−−+\"),\n    (x[0] + x[1], y[0] + y[1], \"++−−\"),\n    (x[0] + x[2], y[0] + y[2], \"+−+−\"),\n    (x[0] + x[3], y[0] + y[3], \"+−−+\"),\n    (x[1] + x[2], y[1] + y[2], \"−++−\"),\n    (x[1] + x[3], y[1] + y[3], \"−+−+\"),\n    (x[2] + x[3], y[2] + y[3], \"−−++\"),\n    (x[0] + x[1] + x[2], y[0] + y[1] + y[2], \"+++−\"),\n    (x[0] + x[1] + x[3], y[0] + y[1] + y[3], \"++−+\"),\n    (x[0] + x[2] + x[3], y[0] + y[2] + y[3], \"+−++\"),\n    (x[1] + x[2] + x[3], y[1] + y[2] + y[3], \"−+++\"),\n    (w, h, \"++++\")\n]\n\nfor (px, py, label) in points_labels:\n    ax.plot(px, py, marker='o', color='black')\n    if label == \"++++\":\n        ax.text(px - 30, py - 10, label)\n    elif label in [\"+++−\", \"++−+\", \"+−++\", \"−+++\"]:\n        ax.text(px, py - 10, label)\n    else:\n        ax.text(px + 10, py + 10, label)\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/growtree.html",
    "href": "chapter_5/growtree.html",
    "title": "5.4 Grow Tree",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 1000 \n\ngrid.step &lt;- 50\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\np0 &lt;- 500\nn0 &lt;- 1000\np1 &lt;- 300\nn1 &lt;- 350\np\n\n\nError: object 'p' not found\n\n\nCode\ny0 &lt;- c(0,  p0)\nx0 &lt;- c(0,  n0)\ny1 &lt;- c(0,  p1,  p0)\nx1 &lt;- c(0,  n1,  n0)\ny3 &lt;- c(0,  290,  p1,  450,  p0)\nx3 &lt;- c(0,  100,  n1,  380,  n0)\ny4 &lt;- c(0,  150,  440,  490,  p0)\nx4 &lt;- c(0,   30,  130,  750,  n0)\n\naxis(2,y0,labels=c('0','50'))\naxis(1,x0,labels=c('0','100'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\nlines( x0, y0, lty=1, type='o', col=rgb(240,32, 16,maxColorValue=255))\nlines( x1, y1, lty=1, type='o', col=rgb(144,32,144,maxColorValue=255))\nlines( x3, y3, lty=2, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( x4, y4, lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 1000\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nax.set_xticks([])\n\n\n[]\n\n\nCode\nax.set_yticks([])\n\n\n[]\n\n\nCode\np0 = 500\nn0 = 1000\np1 = 300\nn1 = 350\n\ny0 = [0, p0]\nx0 = [0, n0]\ny1 = [0, p1, p0]\nx1 = [0, n1, n0]\ny3 = [0, 290, p1, 450, p0]\nx3 = [0, 100, n1, 380, n0]\ny4 = [0, 150, 440, 490, p0]\nx4 = [0, 30, 130, 750, n0]\n\nax.set_yticks(y0)\nax.set_yticklabels(['0', '50'])\nax.set_xticks(x0)\nax.set_xticklabels(['0', '100'])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\ndef rgb(r, g, b):\n    return (r/255, g/255, b/255)\n\nax.plot(x0, y0, linestyle='-', marker='o', color=rgb(240, 32, 16))\nax.plot(x1, y1, linestyle='-', marker='o', color=rgb(144, 32, 144))\nax.plot(x3, y3, linestyle='--', marker='o', color=rgb(16, 32, 240))\nax.plot(x4, y4, linestyle='-', marker='o', color=rgb(16, 32, 240))\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/growtree.html#grow-tree-right",
    "href": "chapter_5/growtree.html#grow-tree-right",
    "title": "5.4 Grow Tree",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 1000 \n\ngrid.step &lt;- 50\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\np0 &lt;- 500\nn0 &lt;- 1000\np1 &lt;- 300\nn1 &lt;- 350\np\n\n\nError: object 'p' not found\n\n\nCode\ny0 &lt;- c(0,  p0)\nx0 &lt;- c(0,  n0)\ny1 &lt;- c(0,  p1,  p0)\nx1 &lt;- c(0,  n1,  n0)\ny3 &lt;- c(0,  290,  p1,  450,  p0)\nx3 &lt;- c(0,  100,  n1,  380,  n0)\ny4 &lt;- c(0,  150,  440,  490,  p0)\nx4 &lt;- c(0,   30,  130,  750,  n0)\n\naxis(2,y0,labels=c('0','50'))\naxis(1,x0,labels=c('0','100'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\nlines( x0, y0, lty=1, type='o', col=rgb(240,32, 16,maxColorValue=255))\nlines( x1, y1, lty=1, type='o', col=rgb(144,32,144,maxColorValue=255))\nlines( x3, y3, lty=2, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( x4, y4, lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 1000\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nax.set_xticks([])\n\n\n[]\n\n\nCode\nax.set_yticks([])\n\n\n[]\n\n\nCode\np0 = 500\nn0 = 1000\np1 = 300\nn1 = 350\n\ny0 = [0, p0]\nx0 = [0, n0]\ny1 = [0, p1, p0]\nx1 = [0, n1, n0]\ny3 = [0, 290, p1, 450, p0]\nx3 = [0, 100, n1, 380, n0]\ny4 = [0, 150, 440, 490, p0]\nx4 = [0, 30, 130, 750, n0]\n\nax.set_yticks(y0)\nax.set_yticklabels(['0', '50'])\nax.set_xticks(x0)\nax.set_xticklabels(['0', '100'])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\ndef rgb(r, g, b):\n    return (r/255, g/255, b/255)\n\nax.plot(x0, y0, linestyle='-', marker='o', color=rgb(240, 32, 16))\nax.plot(x1, y1, linestyle='-', marker='o', color=rgb(144, 32, 144))\nax.plot(x3, y3, linestyle='--', marker='o', color=rgb(16, 32, 240))\nax.plot(x4, y4, linestyle='-', marker='o', color=rgb(16, 32, 240))\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/growtree.html#grow-tree-left",
    "href": "chapter_5/growtree.html#grow-tree-left",
    "title": "5.4 Grow Tree",
    "section": "Grow Tree left",
    "text": "Grow Tree left\n\n\nCode\ngraph TD;\n    N0[\"[50+, 100−]\"]:::red\n    N11[\"[30+, 35−]\"]:::purple\n    N12[\"[20+, 65−]\"]:::purple\n    N21[\"[29+, 10−]\"]:::blue\n    N22[\"[1+, 25−]\"]:::blue\n    N31[\"[15+, 3−]\"]:::blue\n    N32[\"[5+, 62−]\"]:::blue\n\n    N0 -- \"(1)\" --&gt; N11\n    N0 --&gt; N12\n    N11 -- \"(2)\" --&gt; N21\n    N11 --&gt; N22\n    N12 -- \"(3)\" --&gt; N31\n    N12 --&gt; N32\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef purple fill:#804080,stroke:#000,stroke-width:1px;\n    classDef blue fill:#1040f0,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    N0[\"[50+, 100−]\"]:::red\n    N11[\"[30+, 35−]\"]:::purple\n    N12[\"[20+, 65−]\"]:::purple\n    N21[\"[29+, 10−]\"]:::blue\n    N22[\"[1+, 25−]\"]:::blue\n    N31[\"[15+, 3−]\"]:::blue\n    N32[\"[5+, 62−]\"]:::blue\n\n    N0 -- \"(1)\" --&gt; N11\n    N0 --&gt; N12\n    N11 -- \"(2)\" --&gt; N21\n    N11 --&gt; N22\n    N12 -- \"(3)\" --&gt; N31\n    N12 --&gt; N32\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef purple fill:#804080,stroke:#000,stroke-width:1px;\n    classDef blue fill:#1040f0,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_5/prunedtree.html",
    "href": "chapter_5/prunedtree.html",
    "title": "5.6 Pruned Tree",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 1000 \n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\np0 &lt;- 500\nn0 &lt;- 1000\np1 &lt;- 300\nn1 &lt;- 350\np\n\n\nError: object 'p' not found\n\n\nCode\ny0 &lt;- c(0,  p0)\nx0 &lt;- c(0,  n0)\ny1 &lt;- c(0,  p1,  p0)\nx1 &lt;- c(0,  n1,  n0)\ny3 &lt;- c(0,  290,  p1,  450,  p0)\nx3 &lt;- c(0,  100,  n1,  380,  n0)\ny4 &lt;- c(0,  150,  440,  490,  p0)\nx4 &lt;- c(0,   30,  130,  750,  n0)\n\naxis(2,y0,labels=c('0','50'))\naxis(1,x0,labels=c('0','100'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nlines( c(0,100), c(0,290), lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( c(100,750), c(290,490), lty=1, type='o', col=rgb(144,32,144,maxColorValue=255))\nlines( c(750,1000), c(490,500), lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\n\nlines( c(0,30), c(0,150), lty=3, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( c(30,130), c(150,440), lty=1, type='o', col=rgb(16,32,240,maxColorValue=255))\nlines( c(130,750), c(440,490), lty=3, type='o', col=rgb(16,32,240,maxColorValue=255))\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 1000\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\np0 = 500\nn0 = 1000\np1 = 300\nn1 = 350\n\ny0 = [0, p0]\nx0 = [0, n0]\ny1 = [0, p1, p0]\nx1 = [0, n1, n0]\ny3 = [0, 290, p1, 450, p0]\nx3 = [0, 100, n1, 380, n0]\ny4 = [0, 150, 440, 490, p0]\nx4 = [0, 30, 130, 750, n0]\n\nax.set_yticks(y0)\nax.set_yticklabels(['0', '50'])\nax.set_xticks(x0)\nax.set_xticklabels(['0', '100'])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color=\"gray\", linestyle=\"dotted\")\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color=\"gray\", linestyle=\"dotted\")\n    gy += grid_step\n\nax.plot([0, 100], [0, 290], linestyle='-', marker='o', color=(16/255,32/255,240/255))\nax.plot([100, 750], [290, 490], linestyle='-', marker='o', color=(144/255,32/255,144/255))\nax.plot([750, 1000], [490, 500], linestyle='-', marker='o', color=(16/255,32/255,240/255))\n\nax.plot([0, 30], [0, 150], linestyle=':', marker='o', color=(16/255,32/255,240/255))\nax.plot([30, 130], [150, 440], linestyle='-', marker='o', color=(16/255,32/255,240/255))\nax.plot([130, 750], [440, 490], linestyle=':', marker='o', color=(16/255,32/255,240/255))\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/prunedtree.html#pruned-tree-right",
    "href": "chapter_5/prunedtree.html#pruned-tree-right",
    "title": "5.6 Pruned Tree",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 1000 \n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n\np0 &lt;- 500\nn0 &lt;- 1000\np1 &lt;- 300\nn1 &lt;- 350\np\n\n\nError: object 'p' not found\n\n\nCode\ny0 &lt;- c(0,  p0)\nx0 &lt;- c(0,  n0)\ny1 &lt;- c(0,  p1,  p0)\nx1 &lt;- c(0,  n1,  n0)\ny3 &lt;- c(0,  290,  p1,  450,  p0)\nx3 &lt;- c(0,  100,  n1,  380,  n0)\ny4 &lt;- c(0,  150,  440,  490,  p0)\nx4 &lt;- c(0,   30,  130,  750,  n0)\n\naxis(2,y0,labels=c('0','50'))\naxis(1,x0,labels=c('0','100'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nlines( c(0,100), c(0,290), lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( c(100,750), c(290,490), lty=1, type='o', col=rgb(144,32,144,maxColorValue=255))\nlines( c(750,1000), c(490,500), lty=1, type='o', col=rgb( 16,32,240,maxColorValue=255))\n\nlines( c(0,30), c(0,150), lty=3, type='o', col=rgb( 16,32,240,maxColorValue=255))\nlines( c(30,130), c(150,440), lty=1, type='o', col=rgb(16,32,240,maxColorValue=255))\nlines( c(130,750), c(440,490), lty=3, type='o', col=rgb(16,32,240,maxColorValue=255))\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 1000\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 1000.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\np0 = 500\nn0 = 1000\np1 = 300\nn1 = 350\n\ny0 = [0, p0]\nx0 = [0, n0]\ny1 = [0, p1, p0]\nx1 = [0, n1, n0]\ny3 = [0, 290, p1, 450, p0]\nx3 = [0, 100, n1, 380, n0]\ny4 = [0, 150, 440, 490, p0]\nx4 = [0, 30, 130, 750, n0]\n\nax.set_yticks(y0)\nax.set_yticklabels(['0', '50'])\nax.set_xticks(x0)\nax.set_xticklabels(['0', '100'])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color=\"gray\", linestyle=\"dotted\")\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color=\"gray\", linestyle=\"dotted\")\n    gy += grid_step\n\nax.plot([0, 100], [0, 290], linestyle='-', marker='o', color=(16/255,32/255,240/255))\nax.plot([100, 750], [290, 490], linestyle='-', marker='o', color=(144/255,32/255,144/255))\nax.plot([750, 1000], [490, 500], linestyle='-', marker='o', color=(16/255,32/255,240/255))\n\nax.plot([0, 30], [0, 150], linestyle=':', marker='o', color=(16/255,32/255,240/255))\nax.plot([30, 130], [150, 440], linestyle='-', marker='o', color=(16/255,32/255,240/255))\nax.plot([130, 750], [440, 490], linestyle=':', marker='o', color=(16/255,32/255,240/255))\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/prunedtree.html#pruned-tree-left",
    "href": "chapter_5/prunedtree.html#pruned-tree-left",
    "title": "5.6 Pruned Tree",
    "section": "Pruned Tree left",
    "text": "Pruned Tree left\n\n\nCode\ngraph TD;\n    N0[\"[50+, 100−]\"]:::red\n    N11[\"[30+, 35−]\"]:::purple\n    N12[\"[20+, 65−]\"]:::purple\n    N21[\"[29+, 10−]\"]:::blue\n    N22[\"[1+, 25−]\"]:::blue\n    N31[\"[15+, 3−]\"]:::dottedBlue\n    N32[\"[5+, 62−]\"]:::dottedBlue\n\n    N0 --&gt; N11\n    N0 --&gt; N12\n    N11 --&gt; N21\n    N11 --&gt; N22\n    N12 -.-&gt; N31\n    N12 -.-&gt; N32\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef purple fill:#804080,stroke:#000,stroke-width:1px;\n    classDef blue fill:#1040f0,stroke:#000,stroke-width:1px;\n    classDef dottedBlue fill:#1040f0,stroke:#000,stroke-dasharray:3,stroke-width:1px;\n\n\n\n\ngraph TD;\n    N0[\"[50+, 100−]\"]:::red\n    N11[\"[30+, 35−]\"]:::purple\n    N12[\"[20+, 65−]\"]:::purple\n    N21[\"[29+, 10−]\"]:::blue\n    N22[\"[1+, 25−]\"]:::blue\n    N31[\"[15+, 3−]\"]:::dottedBlue\n    N32[\"[5+, 62−]\"]:::dottedBlue\n\n    N0 --&gt; N11\n    N0 --&gt; N12\n    N11 --&gt; N21\n    N11 --&gt; N22\n    N12 -.-&gt; N31\n    N12 -.-&gt; N32\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef purple fill:#804080,stroke:#000,stroke-width:1px;\n    classDef blue fill:#1040f0,stroke:#000,stroke-width:1px;\n    classDef dottedBlue fill:#1040f0,stroke:#000,stroke-dasharray:3,stroke-width:1px;"
  },
  {
    "objectID": "chapter_5/clustree2.html",
    "href": "chapter_5/clustree2.html",
    "title": "5.9 Clustree",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"Model\"];\n\n    L1[\"(16, 14, 9.7)\"];\n    L2[\"(45, 30, 22)\"];\n    L3[\"(1, 0, 5)\"];\n    L4[\"(9, 5, 2)\"];\n    L5[\"(3.3, 0, 4.3)\"];\n\n    N0 -- \"=A100\" --&gt; L1;\n    N0 -- \"=B3\" --&gt; L2;\n    N0 -- \"=E122\" --&gt; L3;\n    N0 -- \"=M102\" --&gt; L4;\n    N0 -- \"=T202\" --&gt; L5;\n\n\n\n\ngraph TD;\n    N0[\"Model\"];\n\n    L1[\"(16, 14, 9.7)\"];\n    L2[\"(45, 30, 22)\"];\n    L3[\"(1, 0, 5)\"];\n    L4[\"(9, 5, 2)\"];\n    L5[\"(3.3, 0, 4.3)\"];\n\n    N0 -- \"=A100\" --&gt; L1;\n    N0 -- \"=B3\" --&gt; L2;\n    N0 -- \"=E122\" --&gt; L3;\n    N0 -- \"=M102\" --&gt; L4;\n    N0 -- \"=T202\" --&gt; L5;"
  },
  {
    "objectID": "chapter_5/dolphins-dl-right.html",
    "href": "chapter_5/dolphins-dl-right.html",
    "title": "5.1 Dolphins-dl-right",
    "section": "",
    "text": "Code\ngraph TD;\n    N1[\"Gills\"];\n    N2[\"Length\"];\n    N3[\"Teeth\"];\n\n    N1 -- \"=yes\" --&gt; L1[\"ĉ(x) = -ve\"];\n    N1 -- \"=no\" --&gt; N2;\n    N2 -- \"=5\" --&gt; L3[\"ĉ(x) = +ve\"];\n    N2 -- \"=3\" --&gt; L2[\"ĉ(x) = +ve\"];\n    N2 -- \"=4\" --&gt; N3;\n    N3 -- \"=few\" --&gt; L4[\"ĉ(x) = -ve\"];\n    N3 -- \"=many\" --&gt; L5[\"ĉ(x) = +ve\"];\n\n\n\n\ngraph TD;\n    N1[\"Gills\"];\n    N2[\"Length\"];\n    N3[\"Teeth\"];\n\n    N1 -- \"=yes\" --&gt; L1[\"ĉ(x) = -ve\"];\n    N1 -- \"=no\" --&gt; N2;\n    N2 -- \"=5\" --&gt; L3[\"ĉ(x) = +ve\"];\n    N2 -- \"=3\" --&gt; L2[\"ĉ(x) = +ve\"];\n    N2 -- \"=4\" --&gt; N3;\n    N3 -- \"=few\" --&gt; L4[\"ĉ(x) = -ve\"];\n    N3 -- \"=many\" --&gt; L5[\"ĉ(x) = +ve\"];"
  },
  {
    "objectID": "chapter_5/dolphins-dt.html",
    "href": "chapter_5/dolphins-dt.html",
    "title": "5.3 Dolphins-DT",
    "section": "",
    "text": "Code\nx &lt;- c(0,0,0,0,100,500)\ny &lt;- c(0,200,400,500,500,500)\n\nh &lt;- 500\nw &lt;- 500\n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1,p3','p4-5','p1','',''))\naxis(1,x,labels=c('','','','','n5','n1-4'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ntext( (x[1]+x[6])/2+10, (y[1]+y[6])/2-10, \"A\")\ntext( (x[1]+x[5])/2+10, (y[1]+y[5])/2-10, \"B\")\ntext( (x[5]+x[6])/2, y[6]-15, \"C\")\ntext( x[2]+10, (y[1]+y[2])/2, \"D\")\ntext( (x[3]+x[5])/2+10, (y[3]+y[5])/2-10, \"E\")\ntext( x[3]+10, (y[2]+y[3])/2, \"F\")\ntext( (x[4]+x[5])/2, y[5]-15, \"G\")\ntext( x[4]+10, (y[3]+y[4])/2, \"H\")\n\narrows( (x[1]+x[6])/2-10, (y[1]+y[6])/2+10, x[5]+10, y[5]-10, code=2, length=0.1, label=\"`Gills'\" )\n\n\nWarning in arrows((x[1] + x[6])/2 - 10, (y[1] + y[6])/2 + 10, x[5] + 10, :\n\"label\" is not a graphical parameter\n\n\nCode\narrows( (x[1]+x[5])/2-10, (y[1]+y[5])/2+10, x[3]+10, y[3]-10, code=2, length=0.1 )\narrows( (x[3]+x[5])/2-10, (y[3]+y[5])/2+10, x[4]+10, y[4]-10, code=2, length=0.1 )\n\nlines( x, y, lwd=5, type='o',col='red')\n\nsegments(x[1],y[1],x[6],y[6],lty=3,col=\"red\")\nsegments(x[1],y[1],x[5],y[5],lty=3,col=\"red\")\nsegments(x[3],y[3],x[5],y[5],lty=3,col=\"red\")\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nx = [0, 0, 0, 0, 100, 500]\ny = [0, 200, 400, 500, 500, 500]\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['', '', '', '', 'n5', 'n1-4'])\nax.set_yticks(y)\nax.set_yticklabels(['', 'p1,p3', 'p4-5', 'p1', '', ''])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.text((x[0] + x[5]) / 2 + 10, (y[0] + y[5]) / 2 - 10, \"A\")\nax.text((x[0] + x[4]) / 2 + 10, (y[0] + y[4]) / 2 - 10, \"B\")\nax.text((x[4] + x[5]) / 2, y[5] - 15, \"C\")\nax.text(x[1] + 10, (y[0] + y[1]) / 2, \"D\")\nax.text((x[2] + x[4]) / 2 + 10, (y[2] + y[4]) / 2 - 10, \"E\")\nax.text(x[2] + 10, (y[1] + y[2]) / 2, \"F\")\nax.text((x[3] + x[4]) / 2, y[4] - 15, \"G\")\nax.text(x[3] + 10, (y[2] + y[3]) / 2, \"H\")\n\nax.annotate('', xy=(x[4] + 10, y[4] - 10), xytext=((x[0] + x[5]) / 2 - 10, (y[0] + y[5]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\nax.annotate('', xy=(x[2] + 10, y[2] - 10), xytext=((x[0] + x[4]) / 2 - 10, (y[0] + y[4]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\nax.annotate('', xy=(x[3] + 10, y[3] - 10), xytext=((x[2] + x[4]) / 2 - 10, (y[2] + y[4]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\n\nax.plot(x, y, linewidth=5, color='red', marker='o')\n\nax.plot([x[0], x[5]], [y[0], y[5]], linestyle='dashed', color='red')\nax.plot([x[0], x[4]], [y[0], y[4]], linestyle='dashed', color='red')\nax.plot([x[2], x[4]], [y[2], y[4]], linestyle='dashed', color='red')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/dolphins-dt.html#dolphins-dt-right",
    "href": "chapter_5/dolphins-dt.html#dolphins-dt-right",
    "title": "5.3 Dolphins-DT",
    "section": "",
    "text": "Code\nx &lt;- c(0,0,0,0,100,500)\ny &lt;- c(0,200,400,500,500,500)\n\nh &lt;- 500\nw &lt;- 500\n\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \naxis(2,y,labels=c('','p1,p3','p4-5','p1','',''))\naxis(1,x,labels=c('','','','','n5','n1-4'))\n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\ntext( (x[1]+x[6])/2+10, (y[1]+y[6])/2-10, \"A\")\ntext( (x[1]+x[5])/2+10, (y[1]+y[5])/2-10, \"B\")\ntext( (x[5]+x[6])/2, y[6]-15, \"C\")\ntext( x[2]+10, (y[1]+y[2])/2, \"D\")\ntext( (x[3]+x[5])/2+10, (y[3]+y[5])/2-10, \"E\")\ntext( x[3]+10, (y[2]+y[3])/2, \"F\")\ntext( (x[4]+x[5])/2, y[5]-15, \"G\")\ntext( x[4]+10, (y[3]+y[4])/2, \"H\")\n\narrows( (x[1]+x[6])/2-10, (y[1]+y[6])/2+10, x[5]+10, y[5]-10, code=2, length=0.1, label=\"`Gills'\" )\n\n\nWarning in arrows((x[1] + x[6])/2 - 10, (y[1] + y[6])/2 + 10, x[5] + 10, :\n\"label\" is not a graphical parameter\n\n\nCode\narrows( (x[1]+x[5])/2-10, (y[1]+y[5])/2+10, x[3]+10, y[3]-10, code=2, length=0.1 )\narrows( (x[3]+x[5])/2-10, (y[3]+y[5])/2+10, x[4]+10, y[4]-10, code=2, length=0.1 )\n\nlines( x, y, lwd=5, type='o',col='red')\n\nsegments(x[1],y[1],x[6],y[6],lty=3,col=\"red\")\nsegments(x[1],y[1],x[5],y[5],lty=3,col=\"red\")\nsegments(x[3],y[3],x[5],y[5],lty=3,col=\"red\")\n\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nx = [0, 0, 0, 0, 100, 500]\ny = [0, 200, 400, 500, 500, 500]\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xticks(x)\nax.set_xticklabels(['', '', '', '', 'n5', 'n1-4'])\nax.set_yticks(y)\nax.set_yticklabels(['', 'p1,p3', 'p4-5', 'p1', '', ''])\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\nax.text((x[0] + x[5]) / 2 + 10, (y[0] + y[5]) / 2 - 10, \"A\")\nax.text((x[0] + x[4]) / 2 + 10, (y[0] + y[4]) / 2 - 10, \"B\")\nax.text((x[4] + x[5]) / 2, y[5] - 15, \"C\")\nax.text(x[1] + 10, (y[0] + y[1]) / 2, \"D\")\nax.text((x[2] + x[4]) / 2 + 10, (y[2] + y[4]) / 2 - 10, \"E\")\nax.text(x[2] + 10, (y[1] + y[2]) / 2, \"F\")\nax.text((x[3] + x[4]) / 2, y[4] - 15, \"G\")\nax.text(x[3] + 10, (y[2] + y[3]) / 2, \"H\")\n\nax.annotate('', xy=(x[4] + 10, y[4] - 10), xytext=((x[0] + x[5]) / 2 - 10, (y[0] + y[5]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\nax.annotate('', xy=(x[2] + 10, y[2] - 10), xytext=((x[0] + x[4]) / 2 - 10, (y[0] + y[4]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\nax.annotate('', xy=(x[3] + 10, y[3] - 10), xytext=((x[2] + x[4]) / 2 - 10, (y[2] + y[4]) / 2 + 10),\n            arrowprops=dict(arrowstyle='-&gt;'))\n\nax.plot(x, y, linewidth=5, color='red', marker='o')\n\nax.plot([x[0], x[5]], [y[0], y[5]], linestyle='dashed', color='red')\nax.plot([x[0], x[4]], [y[0], y[4]], linestyle='dashed', color='red')\nax.plot([x[2], x[4]], [y[2], y[4]], linestyle='dashed', color='red')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nplt.show()"
  },
  {
    "objectID": "chapter_5/dolphins-dt.html#dolphins-dt-left",
    "href": "chapter_5/dolphins-dt.html#dolphins-dt-left",
    "title": "5.3 Dolphins-DT",
    "section": "Dolphins DT left",
    "text": "Dolphins DT left\n\n\nCode\ngraph TD;\n    L2[\"D: [2+, 0−]\"]:::filled\n    N1[\"A: Gills\"]\n    N2[\"B: Length\"]\n    N3[\"E: Teeth\"]\n    L1[\"C: [0+, 4−]\"]:::filled\n    L3[\"F: [2+, 0−]\"]:::filled\n    L4[\"G: [0+, 1−]\"]:::filled\n    L5[\"H: [1+, 0−]\"]:::filled\n\n    N1 -- \"=no\" --&gt; N2\n    N1 -- \"=yes\" --&gt; L1\n    N2 -- \"=5\" --&gt; L3\n    N2 -- \"=3\" --&gt; L2\n    N2 -- \"=4\" --&gt; N3\n    N3 -- \"=few\" --&gt; L4\n    N3 -- \"=many\" --&gt; L5\n\n    classDef filled fill:#f0f0f0,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    L2[\"D: [2+, 0−]\"]:::filled\n    N1[\"A: Gills\"]\n    N2[\"B: Length\"]\n    N3[\"E: Teeth\"]\n    L1[\"C: [0+, 4−]\"]:::filled\n    L3[\"F: [2+, 0−]\"]:::filled\n    L4[\"G: [0+, 1−]\"]:::filled\n    L5[\"H: [1+, 0−]\"]:::filled\n\n    N1 -- \"=no\" --&gt; N2\n    N1 -- \"=yes\" --&gt; L1\n    N2 -- \"=5\" --&gt; L3\n    N2 -- \"=3\" --&gt; L2\n    N2 -- \"=4\" --&gt; N3\n    N3 -- \"=few\" --&gt; L4\n    N3 -- \"=many\" --&gt; L5\n\n    classDef filled fill:#f0f0f0,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_5/dt_cost.html",
    "href": "chapter_5/dt_cost.html",
    "title": "5.7 DT Cost",
    "section": "",
    "text": "R figure\n\n\n\n\n\n\n\nPython figure"
  },
  {
    "objectID": "chapter_4.html",
    "href": "chapter_4.html",
    "title": "Chapter 4",
    "section": "",
    "text": "4.1 Concepts Full\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.2 Dolphins\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.3 Dolphins 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.4 Dolphins 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.5 Path\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.6 Dolphins 4\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n4.7 Concepts closed\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_3.html",
    "href": "chapter_3.html",
    "title": "Chapter 3",
    "section": "",
    "text": "3.5 Clustering\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_6/rulelist3.html",
    "href": "chapter_6/rulelist3.html",
    "title": "6.4 Rule List 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50 \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=20; neg=10;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\n\np = 0; n = 10\narrows(neg-d,pos-d,n-d,p+d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'red','solid', p, n, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,'green','solid',10,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20, 10, pos, neg)"
  },
  {
    "objectID": "chapter_6/rulelist3.html#rule-list-3-right",
    "href": "chapter_6/rulelist3.html#rule-list-3-right",
    "title": "6.4 Rule List 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50 \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=20; neg=10;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\n\np = 0; n = 10\narrows(neg-d,pos-d,n-d,p+d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'red','solid', p, n, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,'green','solid',10,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20, 10, pos, neg)"
  },
  {
    "objectID": "chapter_6/rulelist3.html#rule-list-3-left",
    "href": "chapter_6/rulelist3.html#rule-list-3-left",
    "title": "6.4 Rule List 3",
    "section": "Rule List 3 left",
    "text": "Rule List 3 left\n\n\nCode\ngraph TD;\n    34[\"true&lt;br&gt;[2+, 1-]\"]\n    38[\"Length=3&lt;br&gt;[1+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[0+, 1-]\"]:::red\n    95[\"Length=5&lt;br&gt;[1+, 0-]\"]:::green\n    62[\"Gills=no&lt;br&gt;[2+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[2+, 1-]\"]\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 33\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    34[\"true&lt;br&gt;[2+, 1-]\"]\n    38[\"Length=3&lt;br&gt;[1+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[0+, 1-]\"]:::red\n    95[\"Length=5&lt;br&gt;[1+, 0-]\"]:::green\n    62[\"Gills=no&lt;br&gt;[2+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[2+, 1-]\"]\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 33\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_6/items-dolphins.html",
    "href": "chapter_6/items-dolphins.html",
    "title": "6.19 Items Dolphins",
    "section": "",
    "text": "Code\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    6[\"Gills=no & Beak=yes & Teeth=many\"]:::triangle\n    7[\"Length=3 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    8[\"Length=3 & Gills=no & Teeth=many\"]:::dottedEllipse\n    9[\"Length=3 & Gills=no & Beak=yes\"]:::dashedEllipse\n    10[\"Beak=yes & Teeth=many\"]:::triangle\n    11[\"Gills=no & Teeth=many\"]:::triangle\n    12[\"Gills=no & Beak=yes\"]:::pentagon\n    13[\"Teeth=many\"]:::triangle\n    14[\"Beak=yes\"]:::pentagon\n    15[\"true\"]:::pentagon\n    16[\"Gills=no\"]:::pentagon\n    17[\"Length=3 & Teeth=many\"]:::dottedEllipse\n    18[\"Length=3 & Beak=yes\"]:::dashedEllipse\n    19[\"Length=3\"]:::dashedEllipse\n    20[\"Length=3 & Gills=no\"]:::dashedEllipse\n    21[\"Length=4 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    22[\"Length=4 & Gills=no & Teeth=many\"]:::dottedEllipse\n    23[\"Length=4 & Gills=no & Beak=yes\"]:::dottedEllipse\n    24[\"Length=4 & Teeth=many\"]:::dottedEllipse\n    25[\"Length=4 & Beak=yes\"]:::dottedEllipse\n    26[\"Length=4\"]:::dottedEllipse\n    27[\"Length=4 & Gills=no\"]:::dottedEllipse\n    28[\"Gills=no & Beak=yes & Teeth=few\"]:::dashedEllipse\n    29[\"Length=3 & Beak=yes & Teeth=few\"]:::dottedEllipse\n    30[\"Length=3 & Gills=no & Teeth=few\"]:::dottedEllipse\n    31[\"Beak=yes & Teeth=few\"]:::dashedEllipse\n    32[\"Gills=no & Teeth=few\"]:::dashedEllipse\n    33[\"Teeth=few\"]:::dashedEllipse\n    34[\"Length=3 & Teeth=few\"]:::dottedEllipse\n    35[\"Length=5 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    36[\"Length=5 & Gills=no & Teeth=many\"]:::dottedEllipse\n    37[\"Length=5 & Gills=no & Beak=yes\"]:::dashedEllipse\n    38[\"Length=5 & Teeth=many\"]:::dottedEllipse\n    39[\"Length=5 & Beak=yes\"]:::dashedEllipse\n    40[\"Length=5\"]:::dashedEllipse\n    41[\"Length=5 & Gills=no\"]:::dashedEllipse\n    42[\"Length=5 & Beak=yes & Teeth=few\"]:::dottedEllipse\n    43[\"Length=5 & Gills=no & Teeth=few\"]:::dottedEllipse\n    44[\"Length=5 & Teeth=few\"]:::dottedEllipse\n\n    6 --&gt; 1\n    7 --&gt; 1\n    8 --&gt; 1\n    9 --&gt; 1\n    10 --&gt; 6\n    11 --&gt; 6\n    12 --&gt; 6\n    13 --&gt; 10\n    14 --&gt; 10\n    15 --&gt; 13\n    15 --&gt; 14\n    13 --&gt; 11\n    16 --&gt; 11\n    15 --&gt; 16\n    14 --&gt; 12\n    16 --&gt; 12\n    10 --&gt; 7\n    17 --&gt; 7\n    18 --&gt; 7\n    13 --&gt; 17\n    19 --&gt; 17\n    15 --&gt; 19\n    14 --&gt; 18\n    19 --&gt; 18\n    11 --&gt; 8\n    17 --&gt; 8\n    20 --&gt; 8\n    16 --&gt; 20\n    19 --&gt; 20\n    12 --&gt; 9\n    18 --&gt; 9\n    20 --&gt; 9\n    6 --&gt; 2\n    21 --&gt; 2\n    22 --&gt; 2\n    23 --&gt; 2\n    10 --&gt; 21\n    24 --&gt; 21\n    25 --&gt; 21\n    13 --&gt; 24\n    26 --&gt; 24\n    15 --&gt; 26\n    14 --&gt; 25\n    26 --&gt; 25\n    11 --&gt; 22\n    24 --&gt; 22\n    27 --&gt; 22\n    16 --&gt; 27\n    26 --&gt; 27\n    12 --&gt; 23\n    25 --&gt; 23\n    27 --&gt; 23\n    28 --&gt; 3\n    29 --&gt; 3\n    30 --&gt; 3\n    9 --&gt; 3\n    31 --&gt; 28\n    32 --&gt; 28\n    12 --&gt; 28\n    33 --&gt; 31\n    14 --&gt; 31\n    15 --&gt; 33\n    33 --&gt; 32\n    16 --&gt; 32\n    31 --&gt; 29\n    34 --&gt; 29\n    18 --&gt; 29\n    33 --&gt; 34\n    19 --&gt; 34\n    32 --&gt; 30\n    34 --&gt; 30\n    20 --&gt; 30\n    6 --&gt; 4\n    35 --&gt; 4\n    36 --&gt; 4\n    37 --&gt; 4\n    10 --&gt; 35\n    38 --&gt; 35\n    39 --&gt; 35\n    13 --&gt; 38\n    40 --&gt; 38\n    15 --&gt; 40\n    14 --&gt; 39\n    40 --&gt; 39\n    11 --&gt; 36\n    38 --&gt; 36\n    41 --&gt; 36\n    16 --&gt; 41\n    40 --&gt; 41\n    12 --&gt; 37\n    39 --&gt; 37\n    41 --&gt; 37\n    28 --&gt; 5\n    42 --&gt; 5\n    43 --&gt; 5\n    37 --&gt; 5\n    31 --&gt; 42\n    44 --&gt; 42\n    39 --&gt; 42\n    33 --&gt; 44\n    40 --&gt; 44\n    32 --&gt; 43\n    44 --&gt; 43\n    41 --&gt; 43\n\n    classDef triangle fill:white,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;\n\n\n\n\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    6[\"Gills=no & Beak=yes & Teeth=many\"]:::triangle\n    7[\"Length=3 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    8[\"Length=3 & Gills=no & Teeth=many\"]:::dottedEllipse\n    9[\"Length=3 & Gills=no & Beak=yes\"]:::dashedEllipse\n    10[\"Beak=yes & Teeth=many\"]:::triangle\n    11[\"Gills=no & Teeth=many\"]:::triangle\n    12[\"Gills=no & Beak=yes\"]:::pentagon\n    13[\"Teeth=many\"]:::triangle\n    14[\"Beak=yes\"]:::pentagon\n    15[\"true\"]:::pentagon\n    16[\"Gills=no\"]:::pentagon\n    17[\"Length=3 & Teeth=many\"]:::dottedEllipse\n    18[\"Length=3 & Beak=yes\"]:::dashedEllipse\n    19[\"Length=3\"]:::dashedEllipse\n    20[\"Length=3 & Gills=no\"]:::dashedEllipse\n    21[\"Length=4 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    22[\"Length=4 & Gills=no & Teeth=many\"]:::dottedEllipse\n    23[\"Length=4 & Gills=no & Beak=yes\"]:::dottedEllipse\n    24[\"Length=4 & Teeth=many\"]:::dottedEllipse\n    25[\"Length=4 & Beak=yes\"]:::dottedEllipse\n    26[\"Length=4\"]:::dottedEllipse\n    27[\"Length=4 & Gills=no\"]:::dottedEllipse\n    28[\"Gills=no & Beak=yes & Teeth=few\"]:::dashedEllipse\n    29[\"Length=3 & Beak=yes & Teeth=few\"]:::dottedEllipse\n    30[\"Length=3 & Gills=no & Teeth=few\"]:::dottedEllipse\n    31[\"Beak=yes & Teeth=few\"]:::dashedEllipse\n    32[\"Gills=no & Teeth=few\"]:::dashedEllipse\n    33[\"Teeth=few\"]:::dashedEllipse\n    34[\"Length=3 & Teeth=few\"]:::dottedEllipse\n    35[\"Length=5 & Beak=yes & Teeth=many\"]:::dottedEllipse\n    36[\"Length=5 & Gills=no & Teeth=many\"]:::dottedEllipse\n    37[\"Length=5 & Gills=no & Beak=yes\"]:::dashedEllipse\n    38[\"Length=5 & Teeth=many\"]:::dottedEllipse\n    39[\"Length=5 & Beak=yes\"]:::dashedEllipse\n    40[\"Length=5\"]:::dashedEllipse\n    41[\"Length=5 & Gills=no\"]:::dashedEllipse\n    42[\"Length=5 & Beak=yes & Teeth=few\"]:::dottedEllipse\n    43[\"Length=5 & Gills=no & Teeth=few\"]:::dottedEllipse\n    44[\"Length=5 & Teeth=few\"]:::dottedEllipse\n\n    6 --&gt; 1\n    7 --&gt; 1\n    8 --&gt; 1\n    9 --&gt; 1\n    10 --&gt; 6\n    11 --&gt; 6\n    12 --&gt; 6\n    13 --&gt; 10\n    14 --&gt; 10\n    15 --&gt; 13\n    15 --&gt; 14\n    13 --&gt; 11\n    16 --&gt; 11\n    15 --&gt; 16\n    14 --&gt; 12\n    16 --&gt; 12\n    10 --&gt; 7\n    17 --&gt; 7\n    18 --&gt; 7\n    13 --&gt; 17\n    19 --&gt; 17\n    15 --&gt; 19\n    14 --&gt; 18\n    19 --&gt; 18\n    11 --&gt; 8\n    17 --&gt; 8\n    20 --&gt; 8\n    16 --&gt; 20\n    19 --&gt; 20\n    12 --&gt; 9\n    18 --&gt; 9\n    20 --&gt; 9\n    6 --&gt; 2\n    21 --&gt; 2\n    22 --&gt; 2\n    23 --&gt; 2\n    10 --&gt; 21\n    24 --&gt; 21\n    25 --&gt; 21\n    13 --&gt; 24\n    26 --&gt; 24\n    15 --&gt; 26\n    14 --&gt; 25\n    26 --&gt; 25\n    11 --&gt; 22\n    24 --&gt; 22\n    27 --&gt; 22\n    16 --&gt; 27\n    26 --&gt; 27\n    12 --&gt; 23\n    25 --&gt; 23\n    27 --&gt; 23\n    28 --&gt; 3\n    29 --&gt; 3\n    30 --&gt; 3\n    9 --&gt; 3\n    31 --&gt; 28\n    32 --&gt; 28\n    12 --&gt; 28\n    33 --&gt; 31\n    14 --&gt; 31\n    15 --&gt; 33\n    33 --&gt; 32\n    16 --&gt; 32\n    31 --&gt; 29\n    34 --&gt; 29\n    18 --&gt; 29\n    33 --&gt; 34\n    19 --&gt; 34\n    32 --&gt; 30\n    34 --&gt; 30\n    20 --&gt; 30\n    6 --&gt; 4\n    35 --&gt; 4\n    36 --&gt; 4\n    37 --&gt; 4\n    10 --&gt; 35\n    38 --&gt; 35\n    39 --&gt; 35\n    13 --&gt; 38\n    40 --&gt; 38\n    15 --&gt; 40\n    14 --&gt; 39\n    40 --&gt; 39\n    11 --&gt; 36\n    38 --&gt; 36\n    41 --&gt; 36\n    16 --&gt; 41\n    40 --&gt; 41\n    12 --&gt; 37\n    39 --&gt; 37\n    41 --&gt; 37\n    28 --&gt; 5\n    42 --&gt; 5\n    43 --&gt; 5\n    37 --&gt; 5\n    31 --&gt; 42\n    44 --&gt; 42\n    39 --&gt; 42\n    33 --&gt; 44\n    40 --&gt; 44\n    32 --&gt; 43\n    44 --&gt; 43\n    41 --&gt; 43\n\n    classDef triangle fill:white,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;"
  },
  {
    "objectID": "chapter_6/rules1a.html",
    "href": "chapter_6/rules1a.html",
    "title": "6.10 Rules 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\nrocgrid()\nd = 1\nmethod = 'laplace-precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour)\np = 50; n = 10\narrows(neg-d,pos-d,n+d,p-d, col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,'orange','solid',20,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted',20, 20, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40, pos, neg)\ncontour1(method,colour,'dotted',20, 10, pos, neg)\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 30; n1 = 00\narrows(n-d,p-d,n1+d,p1+d, col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20,  0, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, p, n)\n\ncontour1(method,colour,'dotted',20, 10, p, n)"
  },
  {
    "objectID": "chapter_6/rules1a.html#rules-1a-right",
    "href": "chapter_6/rules1a.html#rules-1a-right",
    "title": "6.10 Rules 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\nrocgrid()\nd = 1\nmethod = 'laplace-precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour)\np = 50; n = 10\narrows(neg-d,pos-d,n+d,p-d, col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,'orange','solid',20,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted',20, 20, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40, pos, neg)\ncontour1(method,colour,'dotted',20, 10, pos, neg)\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 30; n1 = 00\narrows(n-d,p-d,n1+d,p1+d, col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20,  0, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, p, n)\n\ncontour1(method,colour,'dotted',20, 10, p, n)"
  },
  {
    "objectID": "chapter_6/rules1a.html#rules-1a-left",
    "href": "chapter_6/rules1a.html#rules-1a-left",
    "title": "6.10 Rules 3",
    "section": "Rules 1a left",
    "text": "Rules 1a left\n\n\nCode\ngraph TD;\n    34[\"true\\n[5+, 5-]\"];\n    38[\"Length=3\\n[2+, 0-]\" style=filled fill=orange];\n    76[\"Length=4\\n[1+, 3-]\"];\n    95[\"Length=5\\n[2+, 2-]\"];\n    35[\"Gills=yes\\n[0+, 4-]\"];\n    62[\"Gills=no\\n[5+, 1-]\" style=filled fill=orange];\n    33[\"Beak=yes\\n[5+, 3-]\"];\n    52[\"Beak=no\\n[0+, 2-]\"];\n    32[\"Teeth=many\\n[3+, 4-]\"];\n    45[\"Teeth=few\\n[2+, 1-]\"];\n    63[\"Gills=no & Length=3\\n[2+, 0-]\"];\n    87[\"Gills=no & Length=4\\n[1+, 1-]\"];\n    106[\"Gills=no & Length=5\\n[2+, 0-]\"];\n    61[\"Gills=no & Beak=yes\\n[5+, 1-]\"];\n    60[\"Gills=no & Teeth=many\\n[3+, 0-]\" style=filled fill=green];\n    66[\"Gills=no & Teeth=few\\n[2+, 1-]\"];\n    \n    34 --&gt; 32;\n    34 --&gt; 33;\n    34 --&gt; 35;\n    34 --&gt; 38;\n    34 --&gt; 45;\n    34 --&gt; 52;\n    34 --&gt; 62;\n    34 --&gt; 76;\n    34 --&gt; 95;\n    62 --&gt; 60;\n    62 --&gt; 61;\n    62 --&gt; 63;\n    62 --&gt; 66;\n    62 --&gt; 87;\n    62 --&gt; 106;\n\n\n\n\ngraph TD;\n    34[\"true\\n[5+, 5-]\"];\n    38[\"Length=3\\n[2+, 0-]\" style=filled fill=orange];\n    76[\"Length=4\\n[1+, 3-]\"];\n    95[\"Length=5\\n[2+, 2-]\"];\n    35[\"Gills=yes\\n[0+, 4-]\"];\n    62[\"Gills=no\\n[5+, 1-]\" style=filled fill=orange];\n    33[\"Beak=yes\\n[5+, 3-]\"];\n    52[\"Beak=no\\n[0+, 2-]\"];\n    32[\"Teeth=many\\n[3+, 4-]\"];\n    45[\"Teeth=few\\n[2+, 1-]\"];\n    63[\"Gills=no & Length=3\\n[2+, 0-]\"];\n    87[\"Gills=no & Length=4\\n[1+, 1-]\"];\n    106[\"Gills=no & Length=5\\n[2+, 0-]\"];\n    61[\"Gills=no & Beak=yes\\n[5+, 1-]\"];\n    60[\"Gills=no & Teeth=many\\n[3+, 0-]\" style=filled fill=green];\n    66[\"Gills=no & Teeth=few\\n[2+, 1-]\"];\n    \n    34 --&gt; 32;\n    34 --&gt; 33;\n    34 --&gt; 35;\n    34 --&gt; 38;\n    34 --&gt; 45;\n    34 --&gt; 52;\n    34 --&gt; 62;\n    34 --&gt; 76;\n    34 --&gt; 95;\n    62 --&gt; 60;\n    62 --&gt; 61;\n    62 --&gt; 63;\n    62 --&gt; 66;\n    62 --&gt; 87;\n    62 --&gt; 106;"
  },
  {
    "objectID": "chapter_6/rules3.html",
    "href": "chapter_6/rules3.html",
    "title": "6.9 Rules 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    #Pos = pos\n    #Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    #v &lt;- metric(tp,fp*(Pos/Neg),Pos,Neg,m)\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=10; neg=50;\nrocgrid()\nd = 0.5\nmethod = 'precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour)\np = 10; n = 10\narrows(neg-d,pos-d,n+d,p-d,col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 40, pos, neg)\ncontour1(method,colour,'dotted', 0, 10, pos, neg)\n\n\nNULL\n\n\nCode\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 10; n1 = 00\narrows(n-d,p-d,n1+d,p1-d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted', 0, 10, p, n)\n\n\n\n\n\nNULL"
  },
  {
    "objectID": "chapter_6/rules3.html#rules-3-right",
    "href": "chapter_6/rules3.html#rules-3-right",
    "title": "6.9 Rules 3",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    #Pos = pos\n    #Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    #v &lt;- metric(tp,fp*(Pos/Neg),Pos,Neg,m)\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=10; neg=50;\nrocgrid()\nd = 0.5\nmethod = 'precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour)\np = 10; n = 10\narrows(neg-d,pos-d,n+d,p-d,col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 40, pos, neg)\ncontour1(method,colour,'dotted', 0, 10, pos, neg)\n\n\nNULL\n\n\nCode\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 10; n1 = 00\narrows(n-d,p-d,n1+d,p1-d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted', 0, 10, p, n)\n\n\n\n\n\nNULL"
  },
  {
    "objectID": "chapter_6/rules3.html#rules-3-left",
    "href": "chapter_6/rules3.html#rules-3-left",
    "title": "6.9 Rules 3",
    "section": "Rules 3 left",
    "text": "Rules 3 left\n\n\nCode\ngraph TD;\n  classDef orange fill:#FFA500,stroke:#333,stroke-width:2px;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[1+, 5-]\"];\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[0+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[1+, 1-]\"]:::orange;\n  33[\"Beak=yes&lt;br&gt;[1+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[1+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[0+, 1-]\"];\n  87[\"Length=4 & Gills=no&lt;br&gt;[1+, 1-]\"];\n  61[\"Gills=no & Beak=yes&lt;br&gt;[1+, 1-]\"];\n  60[\"Gills=no & Teeth=many&lt;br&gt;[1+, 0-]\"]:::green;\n  66[\"Gills=no & Teeth=few&lt;br&gt;[0+, 1-]\"];\n\n  34 --&gt; 32;\n  34 --&gt; 33;\n  34 --&gt; 35;\n  34 --&gt; 45;\n  34 --&gt; 52;\n  34 --&gt; 62;\n  34 --&gt; 76;\n  34 --&gt; 95;\n\n  62 --&gt; 60;\n  62 --&gt; 61;\n  62 --&gt; 66;\n  62 --&gt; 87;\n\n\n\n\ngraph TD;\n  classDef orange fill:#FFA500,stroke:#333,stroke-width:2px;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[1+, 5-]\"];\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[0+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[1+, 1-]\"]:::orange;\n  33[\"Beak=yes&lt;br&gt;[1+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[1+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[0+, 1-]\"];\n  87[\"Length=4 & Gills=no&lt;br&gt;[1+, 1-]\"];\n  61[\"Gills=no & Beak=yes&lt;br&gt;[1+, 1-]\"];\n  60[\"Gills=no & Teeth=many&lt;br&gt;[1+, 0-]\"]:::green;\n  66[\"Gills=no & Teeth=few&lt;br&gt;[0+, 1-]\"];\n\n  34 --&gt; 32;\n  34 --&gt; 33;\n  34 --&gt; 35;\n  34 --&gt; 45;\n  34 --&gt; 52;\n  34 --&gt; 62;\n  34 --&gt; 76;\n  34 --&gt; 95;\n\n  62 --&gt; 60;\n  62 --&gt; 61;\n  62 --&gt; 66;\n  62 --&gt; 87;"
  },
  {
    "objectID": "chapter_6/items-cc.html",
    "href": "chapter_6/items-cc.html",
    "title": "6.18 Items-cc",
    "section": "",
    "text": "Code\ngraph TD;\n    13[\"{}\"]:::octagon\n    8[\"{Apples}\"]:::square\n    7[\"{Nappies}\"]:::square\n    6[\"{Crisps}\"]:::pentagon\n    3[\"{Nappies, Apples}\"]:::dashedEllipse\n    5[\"{Crisps, Apples}\"]:::dashedEllipse\n    4[\"{Nappies, Beer, Crisps}\"]:::dashedEllipse\n    1[\"{Nappies, Beer, Crisps, Apples}\"]:::dottedEllipse\n    2[\"{Beer, Crisps}\"]:::triangle\n\n    4 --&gt; 1\n    8 --&gt; 5\n    6 --&gt; 5\n    13 --&gt; 8\n    13 --&gt; 6\n    6 --&gt; 2\n    8 --&gt; 3\n    7 --&gt; 3\n    13 --&gt; 7\n    2 --&gt; 4\n    5 --&gt; 1\n    3 --&gt; 1\n    7 --&gt; 4\n\n    classDef octagon stroke-width:2px,stroke:#000;\n    classDef square fill:lightgreen,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef triangle fill:lightgreen,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;\n\n\n\n\ngraph TD;\n    13[\"{}\"]:::octagon\n    8[\"{Apples}\"]:::square\n    7[\"{Nappies}\"]:::square\n    6[\"{Crisps}\"]:::pentagon\n    3[\"{Nappies, Apples}\"]:::dashedEllipse\n    5[\"{Crisps, Apples}\"]:::dashedEllipse\n    4[\"{Nappies, Beer, Crisps}\"]:::dashedEllipse\n    1[\"{Nappies, Beer, Crisps, Apples}\"]:::dottedEllipse\n    2[\"{Beer, Crisps}\"]:::triangle\n\n    4 --&gt; 1\n    8 --&gt; 5\n    6 --&gt; 5\n    13 --&gt; 8\n    13 --&gt; 6\n    6 --&gt; 2\n    8 --&gt; 3\n    7 --&gt; 3\n    13 --&gt; 7\n    2 --&gt; 4\n    5 --&gt; 1\n    3 --&gt; 1\n    7 --&gt; 4\n\n    classDef octagon stroke-width:2px,stroke:#000;\n    classDef square fill:lightgreen,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef triangle fill:lightgreen,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;"
  },
  {
    "objectID": "chapter_6/ABBA_right.html",
    "href": "chapter_6/ABBA_right.html",
    "title": "6.6 ABBA Right",
    "section": "",
    "text": "R figure\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color=\"gray\", linestyle=\"dotted\")\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color=\"gray\", linestyle=\"dotted\")\n    gy += grid_step\n\nx = [0, 100, 300, 500]\ny = [0, 400, 500, 500]\ncol = \"red\"\nax.plot(x, y, linewidth=5, marker='o', color=col)\n\nax.text((x[0] + x[1])/2 + 20, (y[0] + y[1])/2, \"-B\", color=col)\nax.text((x[1] + x[2])/2 + 70, (y[1] + y[2])/2 + 20, \"AB\", color=col)\nax.text((x[2] + x[3])/2, (y[2] + y[3])/2 - 20, \"--, A-\", color=col)\n\na = [0, 100, 400, 500]\nb = [0, 400, 500, 500]\ncol = \"blue\"\nax.plot(a, b, linewidth=3, marker='o', color=col)\n\nax.text((a[0] + a[1])/2 + 20, (b[0] + b[1])/2 - 20, \"B\", color=col)\nax.text((a[1] + a[2])/2, (b[1] + b[2])/2 - 20, \"A\", color=col)\nax.text((a[2] + a[3])/2, (b[2] + b[3])/2 - 20, \"-\", color=col)\n\nplt.show()"
  },
  {
    "objectID": "chapter_6/rules2.html",
    "href": "chapter_6/rules2.html",
    "title": "6.8 Rules 2",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50 \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=30; neg=50;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour,lwd=2)\n\n\nError in box(0, 0, neg, pos, colour, lwd = 2): unused argument (lwd = 2)\n\n\nCode\np = 30; n = 10\narrows(neg-d,pos-d,n+d,p-d, col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted',20, 20, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20, 40, pos, neg)\ncontour1(method,colour,'dotted',10, 10, pos, neg)\ncontour1(method,colour,'dotted', 0,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 20; n1 = 00\narrows(n-d,p-d,n1+d,p1+d, col='violet',length=0.1,lwd=3)\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, p, n)\ncontour1(method,colour,'dotted',30, 10, p, n)\ncontour1(method,colour,'dotted', 0,  0, p, n)\n\n\n\n\n\nNULL"
  },
  {
    "objectID": "chapter_6/rules2.html#rules-2-right",
    "href": "chapter_6/rules2.html#rules-2-right",
    "title": "6.8 Rules 2",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50 \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n    \n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1,lwd=2)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=30; neg=50;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\nbox(0,0,neg,pos,colour,lwd=2)\n\n\nError in box(0, 0, neg, pos, colour, lwd = 2): unused argument (lwd = 2)\n\n\nCode\np = 30; n = 10\narrows(neg-d,pos-d,n+d,p-d, col='violet',length=0.1,lwd=3)\ncontour1(method,'orange','solid',  p,  n, pos, neg)\ncontour1(method,colour,'dotted',10, 30, pos, neg)\ncontour1(method,colour,'dotted',20, 20, pos, neg)\ncontour1(method,colour,'dotted', 0, 40, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 30, pos, neg)\ncontour1(method,colour,'dotted', 0, 20, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',20, 40, pos, neg)\ncontour1(method,colour,'dotted',10, 10, pos, neg)\ncontour1(method,colour,'dotted', 0,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncolour = 'blue'\nbox(0,0,n,p,colour)\np1 = 20; n1 = 00\narrows(n-d,p-d,n1+d,p1+d, col='violet',length=0.1,lwd=3)\ncontour1(method,'green','solid',  p1,  n1, p, n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, p, n)\ncontour1(method,colour,'dotted',30, 10, p, n)\ncontour1(method,colour,'dotted', 0,  0, p, n)\n\n\n\n\n\nNULL"
  },
  {
    "objectID": "chapter_6/rules2.html#rules-2-left",
    "href": "chapter_6/rules2.html#rules-2-left",
    "title": "6.8 Rules 2",
    "section": "Rules 2 left",
    "text": "Rules 2 left\n\n\nCode\ngraph TD;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[5+, 5-]\"];\n  38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green;\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[2+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[5+, 1-]\"];\n  33[\"Beak=yes&lt;br&gt;[5+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[3+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[2+, 1-]\"];\n\n  34 --&gt; 32;\n  34 --&gt; 33;\n  34 --&gt; 35;\n  34 --&gt; 38;\n  34 --&gt; 45;\n  34 --&gt; 52;\n  34 --&gt; 62;\n  34 --&gt; 76;\n  34 --&gt; 95;\n\n\n\n\ngraph TD;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[5+, 5-]\"];\n  38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green;\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[2+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[5+, 1-]\"];\n  33[\"Beak=yes&lt;br&gt;[5+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[3+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[2+, 1-]\"];\n\n  34 --&gt; 32;\n  34 --&gt; 33;\n  34 --&gt; 35;\n  34 --&gt; 38;\n  34 --&gt; 45;\n  34 --&gt; 52;\n  34 --&gt; 62;\n  34 --&gt; 76;\n  34 --&gt; 95;"
  },
  {
    "objectID": "chapter_6/items.html",
    "href": "chapter_6/items.html",
    "title": "6.17 Dolphins-dl-left",
    "section": "",
    "text": "Code\ngraph TD\n    classDef dotted stroke:#000,stroke-width:2px,stroke-dasharray:5,5;\n    classDef dashed stroke:#000,stroke-width:2px,stroke-dasharray:3,3;\n    classDef solid stroke:#000,stroke-width:2px;\n    classDef green fill:#008000,stroke:#fff;\n    \n    1[\"{Nappies, Beer, Crisps, Apples}\"]:::dotted\n    2[\"{Beer, Crisps}\"]:::green\n    3[\"{Nappies, Apples}\"]:::dashed\n    4[\"{Nappies, Beer, Crisps}\"]:::dashed\n    5[\"{Crisps, Apples}\"]:::dashed\n    7[\"{Nappies}\"]:::green\n    8[\"{Apples}\"]:::green\n    9[\"{Beer, Crisps, Apples}\"]:::dotted\n    10[\"{Nappies, Crisps, Apples}\"]:::dotted\n    11[\"{Nappies, Beer, Apples}\"]:::dotted\n    12[\"{Beer, Apples}\"]:::dotted\n    13[\"{}\"]:::solid\n    14[\"{Beer}\"]:::green\n    15[\"{Nappies, Crisps}\"]:::dashed\n    16[\"{Nappies, Beer}\"]:::dashed\n    6[\"{Crisps}\"]:::green\n\n    9 --&gt; 1\n    10 --&gt; 1\n    11 --&gt; 1\n    4 --&gt; 1\n    5 --&gt; 9\n    12 --&gt; 9\n    2 --&gt; 9\n    8 --&gt; 5\n    6 --&gt; 5\n    13 --&gt; 8\n    13 --&gt; 6\n    8 --&gt; 12\n    14 --&gt; 12\n    13 --&gt; 14\n    6 --&gt; 2\n    14 --&gt; 2\n    5 --&gt; 10\n    3 --&gt; 10\n    15 --&gt; 10\n    8 --&gt; 3\n    7 --&gt; 3\n    13 --&gt; 7\n    6 --&gt; 15\n    7 --&gt; 15\n    12 --&gt; 11\n    3 --&gt; 11\n    16 --&gt; 11\n    14 --&gt; 16\n    7 --&gt; 16\n    2 --&gt; 4\n    15 --&gt; 4\n    16 --&gt; 4\n\n\n\n\ngraph TD\n    classDef dotted stroke:#000,stroke-width:2px,stroke-dasharray:5,5;\n    classDef dashed stroke:#000,stroke-width:2px,stroke-dasharray:3,3;\n    classDef solid stroke:#000,stroke-width:2px;\n    classDef green fill:#008000,stroke:#fff;\n    \n    1[\"{Nappies, Beer, Crisps, Apples}\"]:::dotted\n    2[\"{Beer, Crisps}\"]:::green\n    3[\"{Nappies, Apples}\"]:::dashed\n    4[\"{Nappies, Beer, Crisps}\"]:::dashed\n    5[\"{Crisps, Apples}\"]:::dashed\n    7[\"{Nappies}\"]:::green\n    8[\"{Apples}\"]:::green\n    9[\"{Beer, Crisps, Apples}\"]:::dotted\n    10[\"{Nappies, Crisps, Apples}\"]:::dotted\n    11[\"{Nappies, Beer, Apples}\"]:::dotted\n    12[\"{Beer, Apples}\"]:::dotted\n    13[\"{}\"]:::solid\n    14[\"{Beer}\"]:::green\n    15[\"{Nappies, Crisps}\"]:::dashed\n    16[\"{Nappies, Beer}\"]:::dashed\n    6[\"{Crisps}\"]:::green\n\n    9 --&gt; 1\n    10 --&gt; 1\n    11 --&gt; 1\n    4 --&gt; 1\n    5 --&gt; 9\n    12 --&gt; 9\n    2 --&gt; 9\n    8 --&gt; 5\n    6 --&gt; 5\n    13 --&gt; 8\n    13 --&gt; 6\n    8 --&gt; 12\n    14 --&gt; 12\n    13 --&gt; 14\n    6 --&gt; 2\n    14 --&gt; 2\n    5 --&gt; 10\n    3 --&gt; 10\n    15 --&gt; 10\n    8 --&gt; 3\n    7 --&gt; 3\n    13 --&gt; 7\n    6 --&gt; 15\n    7 --&gt; 15\n    12 --&gt; 11\n    3 --&gt; 11\n    16 --&gt; 11\n    14 --&gt; 16\n    7 --&gt; 16\n    2 --&gt; 4\n    15 --&gt; 4\n    16 --&gt; 4"
  },
  {
    "objectID": "chapter_6/abctree.html",
    "href": "chapter_6/abctree.html",
    "title": "6.12 ABC Tree",
    "section": "",
    "text": "Code\ngraph TD\n    classDef dotted stroke:#000,stroke-width:2px,stroke-dasharray:5,5;\n    classDef solid stroke:#000,stroke-width:2px;\n    classDef blue fill:#00f,stroke:#fff;\n    \n    3[\"[0+, 0-]\"]:::dotted\n    4[\"[1+, 2-]\"]:::solid\n    2[\"[1+, 2-]\"]\n    6[\"[0+, 0-]\"]:::dotted\n    7[\"[0+, 1-]\"]:::solid\n    5[\"[0+, 1-]\"]\n    1[\"[1+, 3-]\"]:::blue\n    10[\"[2+, 1-]\"]:::solid\n    11[\"[2+, 0-]\"]:::solid\n    9[\"[4+, 1-]\"]:::blue\n    13[\"[0+, 1-]\"]:::blue\n    14[\"[0+, 0-]\"]:::blue:::dotted\n    12[\"[0+, 1-]\"]\n    8[\"[4+, 2-]\"]\n    0[\"[5+, 5-]\"]\n\n    2 --&gt;|ABC| 3\n    2 --&gt;|AB-| 4\n    5 --&gt;|A-C| 6\n    5 --&gt;|A--| 7\n    1 --&gt;|AB| 2\n    1 --&gt;|A-| 5\n    9 --&gt;| -BC| 10\n    9 --&gt;| -B-| 11\n    12 --&gt;|--C| 13\n    12 --&gt;|---| 14\n    8 --&gt;| -B| 9\n    8 --&gt;| --| 12\n    0 --&gt;|A| 1\n    0 --&gt;|-| 8\n\n\n\n\ngraph TD\n    classDef dotted stroke:#000,stroke-width:2px,stroke-dasharray:5,5;\n    classDef solid stroke:#000,stroke-width:2px;\n    classDef blue fill:#00f,stroke:#fff;\n    \n    3[\"[0+, 0-]\"]:::dotted\n    4[\"[1+, 2-]\"]:::solid\n    2[\"[1+, 2-]\"]\n    6[\"[0+, 0-]\"]:::dotted\n    7[\"[0+, 1-]\"]:::solid\n    5[\"[0+, 1-]\"]\n    1[\"[1+, 3-]\"]:::blue\n    10[\"[2+, 1-]\"]:::solid\n    11[\"[2+, 0-]\"]:::solid\n    9[\"[4+, 1-]\"]:::blue\n    13[\"[0+, 1-]\"]:::blue\n    14[\"[0+, 0-]\"]:::blue:::dotted\n    12[\"[0+, 1-]\"]\n    8[\"[4+, 2-]\"]\n    0[\"[5+, 5-]\"]\n\n    2 --&gt;|ABC| 3\n    2 --&gt;|AB-| 4\n    5 --&gt;|A-C| 6\n    5 --&gt;|A--| 7\n    1 --&gt;|AB| 2\n    1 --&gt;|A-| 5\n    9 --&gt;| -BC| 10\n    9 --&gt;| -B-| 11\n    12 --&gt;|--C| 13\n    12 --&gt;|---| 14\n    8 --&gt;| -B| 9\n    8 --&gt;| --| 12\n    0 --&gt;|A| 1\n    0 --&gt;|-| 8"
  },
  {
    "objectID": "chapter_6/xy.html",
    "href": "chapter_6/xy.html",
    "title": "6.14 XY",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 500 \ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = \"n\", yaxt = \"n\",\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\nx &lt;- c(0,0,100,300,500,500)\ny &lt;- c(0,200,400,500,500,500)\ncol &lt;- \"red\"\nlines( x, y, lwd=5, type=\"o\",col=col)\n\ntext( (x[1]+x[2])/2+10, (y[1]+y[2])/2-10, \"XY\",col=col)\n\ntext( (x[2]+x[3])/2-20, (y[2]+y[3])/2-0, \"X-\",col=col)\n\ntext( (x[3]+x[4])/2-10, (y[3]+y[4])/2+10, \"-Y\",col=col)\n\ntext( (x[4]+x[5])/2+10, (y[4]+y[5])/2-10, \"--\",col=col)\n\n\na &lt;- c(0,100,300,500,500)\nb &lt;- c(0,400,500,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+10, (b[1]+b[2])/2-10, \"X\",col=col)\n\ntext( (a[2]+a[3])/2+10, (b[2]+b[3])/2-10, \"Y\\\\X\",col=col)\n\na &lt;- c(0,100,300,500,500)\nb &lt;- c(0,200,500,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+10, (b[1]+b[2])/2-10, \"X\\\\Y\",col=col)\n\ntext( (a[2]+a[3])/2+10, (b[2]+b[3])/2-10, \"Y\",col=col)"
  },
  {
    "objectID": "chapter_6/xy.html#xy-right",
    "href": "chapter_6/xy.html#xy-right",
    "title": "6.14 XY",
    "section": "",
    "text": "Code\nh &lt;- 500 \nw &lt;- 500 \ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = \"n\", yaxt = \"n\",\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n\nx &lt;- c(0,0,100,300,500,500)\ny &lt;- c(0,200,400,500,500,500)\ncol &lt;- \"red\"\nlines( x, y, lwd=5, type=\"o\",col=col)\n\ntext( (x[1]+x[2])/2+10, (y[1]+y[2])/2-10, \"XY\",col=col)\n\ntext( (x[2]+x[3])/2-20, (y[2]+y[3])/2-0, \"X-\",col=col)\n\ntext( (x[3]+x[4])/2-10, (y[3]+y[4])/2+10, \"-Y\",col=col)\n\ntext( (x[4]+x[5])/2+10, (y[4]+y[5])/2-10, \"--\",col=col)\n\n\na &lt;- c(0,100,300,500,500)\nb &lt;- c(0,400,500,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+10, (b[1]+b[2])/2-10, \"X\",col=col)\n\ntext( (a[2]+a[3])/2+10, (b[2]+b[3])/2-10, \"Y\\\\X\",col=col)\n\na &lt;- c(0,100,300,500,500)\nb &lt;- c(0,200,500,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+10, (b[1]+b[2])/2-10, \"X\\\\Y\",col=col)\n\ntext( (a[2]+a[3])/2+10, (b[2]+b[3])/2-10, \"Y\",col=col)"
  },
  {
    "objectID": "chapter_6/xy.html#xy-left",
    "href": "chapter_6/xy.html#xy-left",
    "title": "6.14 XY",
    "section": "XY left",
    "text": "XY left\n\n\nCode\ngraph TD;\n    2[\"[2+, 0-]\"];\n    3[\"[2+, 1-]\"];\n    1[\"[4+, 1-]\"];\n    5[\"[1+, 2-]\"];\n    6[\"[0+, 2-]\"];\n    4[\"[1+, 4-]\"];\n    0[\"[5+, 5-]\"];\n    \n    1 --&gt;|\"XY\"| 2;\n    1 --&gt;|\"X-\"| 3;\n    4 --&gt;|\"-Y\"| 5;\n    4 --&gt;|\"--\"| 6;\n    0 --&gt;|\"X\"| 1;\n    0 --&gt;|\"-\"| 4;\n\n\n\n\ngraph TD;\n    2[\"[2+, 0-]\"];\n    3[\"[2+, 1-]\"];\n    1[\"[4+, 1-]\"];\n    5[\"[1+, 2-]\"];\n    6[\"[0+, 2-]\"];\n    4[\"[1+, 4-]\"];\n    0[\"[5+, 5-]\"];\n    \n    1 --&gt;|\"XY\"| 2;\n    1 --&gt;|\"X-\"| 3;\n    4 --&gt;|\"-Y\"| 5;\n    4 --&gt;|\"--\"| 6;\n    0 --&gt;|\"X\"| 1;\n    0 --&gt;|\"-\"| 4;"
  },
  {
    "objectID": "chapter_6/ABBA.html",
    "href": "chapter_6/ABBA.html",
    "title": "6.6 ABBA",
    "section": "",
    "text": "R figure\n\n\nCode\nh &lt;- 500 \nw &lt;- 500\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = \"n\", yaxt = \"n\",\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\na &lt;- c(0,100,400,500)\nb &lt;- c(0,400,500,500)\ncol &lt;- \"blue\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+20, (b[1]+b[2])/2, \"B\\\\A\",col=col)\n\ntext( (a[2]+a[3])/2-20, (b[2]+b[3])/2-30, \"A\",col=col)\n\ntext( (a[3]+a[4])/2+20, (b[3]+b[4])/2-20, \"-\",col=col)\n\na &lt;- c(0,300,500)\nb &lt;- c(0,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n\ntext( (a[1]+a[2])/2+20, (b[1]+b[2])/2, \"B\",col=col)\n\ntext( (a[2]+a[3])/2+20, (b[2]+b[3])/2-20, \"A\\\\B, -\",col=col)\n\nx &lt;- c(0,100,300,500)\ny &lt;- c(0,400,500,500)\ncol &lt;- \"red\"\nlines( x[2:3], y[2:3], lty=\"dotted\",col=col)\ntext( (x[2]+x[3])/2-15, (y[2]+y[3])/2+15, \"\",col=col)\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color=\"gray\", linestyle=\"dotted\")\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color=\"gray\", linestyle=\"dotted\")\n    gy += grid_step\n\na = [0, 100, 400, 500]\nb = [0, 400, 500, 500]\ncol = \"blue\"\nax.plot(a, b, linewidth=3, marker='o', color=col)\n\nax.text((a[1] + a[2])/2 + 20, (b[1] + b[2])/2, \"B\\\\A\", color=col)\nax.text((a[2] + a[3])/2 - 20, (b[2] + b[3])/2 - 30, \"A\", color=col)\nax.text((a[3] + 500)/2 + 20, (b[3] + 500)/2 - 20, \"-\", color=col)\n\na = [0, 300, 500]\nb = [0, 500, 500]\ncol = \"violet\"\nax.plot(a, b, linewidth=3, marker='o', color=col)\n\nax.text((a[1] + a[2])/2 + 20, (b[1] + b[2])/2, \"B\", color=col)\nax.text((a[2] + 500)/2 + 20, (b[2] + 500)/2 - 20, \"A\\\\B, -\", color=col)\n\nx = [0, 100, 300, 500]\ny = [0, 400, 500, 500]\ncol = \"red\"\nax.plot(x[1:3], y[1:3], linestyle=\"dotted\", color=col)\nax.text((x[1] + x[2])/2 - 15, (y[1] + y[2])/2 + 15, \"\", color=col)\n\nplt.show()"
  },
  {
    "objectID": "chapter_6/rulelist-tree.html",
    "href": "chapter_6/rulelist-tree.html",
    "title": "6.5 Rule List Tree",
    "section": "",
    "text": "Code\nx &lt;- c(0,400,400,500,500)\ny &lt;- c(0,  0,300,300,500)\n\nh &lt;- 500 \nw &lt;- 500 \n\ngrid.step &lt;- 100\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nplotsplit &lt;- function(l,r,m,labels,oo,pp,qq) {\n    segments(x[l],y[l],x[r],y[r],lty=3,col=\"black\")\n    text( (x[l]+x[r])/2+oo[1], (y[l]+y[r])/2+oo[2], labels[1])\n    text( (x[l]+x[m])/2+pp[1], (y[l]+y[m])/2+pp[2], labels[2])\n    text( (x[m]+x[r])/2+qq[1], (y[m]+y[r])/2+qq[2], labels[3])\n    arrows( (x[l]+x[r])/2, (y[l]+y[r])/2, x[m]+oo[1], y[m]+pp[2], code=2, length=0.1 )\n}\n\nplotsplit(1,5,2,c(\"A\",\"B\",\"C\"),c(-10,10),c(0,10),c(10,-10))\nplotsplit(2,5,3,c(\"\",\"D\",\"E\"),c(10,-10),c(-10,-10),c(-10,10))\nplotsplit(3,5,4,c(\"\",\"F\",\"G\"),c(-10,-10),c(0,10),c(-10,-40))\n\nlines( x[1:2], y[1:2], lwd=5, col='red')\nlines( x[2:3], y[2:3], lwd=3, col='green')\nlines( x[3:4], y[3:4], lwd=3, col='red')\nlines( x[4:5], y[4:5], lwd=5, col='green')\npoints(x,y,pch=19,col='black')\n\nlines( c(0,  0,  0,100,500), c(0,300,500,500,500), lwd=5, type='o',col='blue')\n\ntext(  15, 150, col=\"blue\", \"D\")\ntext(  15, 400, col=\"blue\", \"G\")\ntext(  50, 485, col=\"blue\", \"F\")\ntext( 300, 485, col=\"blue\", \"B\")"
  },
  {
    "objectID": "chapter_6/rulelist-tree.html#rule-list-tree-right",
    "href": "chapter_6/rulelist-tree.html#rule-list-tree-right",
    "title": "6.5 Rule List Tree",
    "section": "",
    "text": "Code\nx &lt;- c(0,400,400,500,500)\ny &lt;- c(0,  0,300,300,500)\n\nh &lt;- 500 \nw &lt;- 500 \n\ngrid.step &lt;- 100\n\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = 'n', yaxt = 'n',\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \n\ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\nplotsplit &lt;- function(l,r,m,labels,oo,pp,qq) {\n    segments(x[l],y[l],x[r],y[r],lty=3,col=\"black\")\n    text( (x[l]+x[r])/2+oo[1], (y[l]+y[r])/2+oo[2], labels[1])\n    text( (x[l]+x[m])/2+pp[1], (y[l]+y[m])/2+pp[2], labels[2])\n    text( (x[m]+x[r])/2+qq[1], (y[m]+y[r])/2+qq[2], labels[3])\n    arrows( (x[l]+x[r])/2, (y[l]+y[r])/2, x[m]+oo[1], y[m]+pp[2], code=2, length=0.1 )\n}\n\nplotsplit(1,5,2,c(\"A\",\"B\",\"C\"),c(-10,10),c(0,10),c(10,-10))\nplotsplit(2,5,3,c(\"\",\"D\",\"E\"),c(10,-10),c(-10,-10),c(-10,10))\nplotsplit(3,5,4,c(\"\",\"F\",\"G\"),c(-10,-10),c(0,10),c(-10,-40))\n\nlines( x[1:2], y[1:2], lwd=5, col='red')\nlines( x[2:3], y[2:3], lwd=3, col='green')\nlines( x[3:4], y[3:4], lwd=3, col='red')\nlines( x[4:5], y[4:5], lwd=5, col='green')\npoints(x,y,pch=19,col='black')\n\nlines( c(0,  0,  0,100,500), c(0,300,500,500,500), lwd=5, type='o',col='blue')\n\ntext(  15, 150, col=\"blue\", \"D\")\ntext(  15, 400, col=\"blue\", \"G\")\ntext(  50, 485, col=\"blue\", \"F\")\ntext( 300, 485, col=\"blue\", \"B\")"
  },
  {
    "objectID": "chapter_6/rulelist-tree.html#rule-list-tree-left",
    "href": "chapter_6/rulelist-tree.html#rule-list-tree-left",
    "title": "6.5 Rule List Tree",
    "section": "Rule List Tree left",
    "text": "Rule List Tree left\n\n\nCode\ngraph TD;\n    L1[\"B: [0+, 4-]\"]:::red\n    L2[\"D: [3+, 0-]\"]:::green\n    L3[\"F: [0+, 1-]\"]:::red\n    N1[\"A: Gills\"]\n    N2[\"C: Teeth\"]\n    N3[\"E: Length\"]\n    L4[\"G: [2+, 0-]\"]:::green\n\n    N1 -- \"≠yes\" --&gt; N2\n    N1 --&gt; L1\n    N2 -- \"≠many\" --&gt; N3\n    N2 --&gt; L2\n    N3 -- \"≠4\" --&gt; L4\n    N3 --&gt; L3\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    L1[\"B: [0+, 4-]\"]:::red\n    L2[\"D: [3+, 0-]\"]:::green\n    L3[\"F: [0+, 1-]\"]:::red\n    N1[\"A: Gills\"]\n    N2[\"C: Teeth\"]\n    N3[\"E: Length\"]\n    L4[\"G: [2+, 0-]\"]:::green\n\n    N1 -- \"≠yes\" --&gt; N2\n    N1 --&gt; L1\n    N2 -- \"≠many\" --&gt; N3\n    N2 --&gt; L2\n    N3 -- \"≠4\" --&gt; L4\n    N3 --&gt; L3\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_6/rulelist2.html",
    "href": "chapter_6/rulelist2.html",
    "title": "6.3 Rule List 2",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50 \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         #asp = pos/neg,\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n\n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=50; neg=10;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\n\np = 30; n =  0\narrows(neg-d,pos-d,n+d,p+d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p,  n, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,'green','solid',20,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, pos, neg)\ncontour1(method,colour,'dotted',50, 10, pos, neg)\ncontour1(method,colour,'dotted',20, 10, pos, neg)"
  },
  {
    "objectID": "chapter_6/rulelist2.html#rule-list-2-right",
    "href": "chapter_6/rulelist2.html#rule-list-2-right",
    "title": "6.3 Rule List 2",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50 \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         #asp = pos/neg,\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n\n}\n\nbox &lt;- function(x0,y0,x1,y1,col) {\n    lines(c(x0,x0,x1,x1,x0),c(y0,y1,y1,y0,y0),col=col,lty=1)}\n\nmetric &lt;- function(tp,fp,Pos,Neg,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontours &lt;- function(m,label) {\n    x &lt;- seq(0,neg)\n    y &lt;- seq(0,pos)\n    z &lt;- matrix(nrow=neg+1,ncol=pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,pos,neg,m)\n      }\n    }\n    contour(x,y,z,nlevels=10,add=TRUE,col=colour1,lty=\"solid\",method=label)\n}\n\ncontour1 &lt;- function(m,col,lty,tp,fp,Pos,Neg) {\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    Pos &lt;- tp\n    Neg &lt;- fp\n    x &lt;- seq(0,Neg)\n    y &lt;- seq(0,Pos)\n    z &lt;- matrix(nrow=Neg+1,ncol=Pos+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,Pos,Neg,m)\n      }\n    }\n    v &lt;- metric(tp,fp,Pos,Neg,m)\n    contour(x,y,z,level=v,add=TRUE,col=col,lty=lty,labels=\"\",lwd=2)\n}\n\npos=50; neg=10;\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\n\np = 30; n =  0\narrows(neg-d,pos-d,n+d,p+d,col='violet',length=0.1,lwd=3)\n\ncontour1(method,'green','solid',  p,  n, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,'green','solid',20,  0, pos, neg)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 10, pos, neg)\ncontour1(method,colour,'dotted',50, 10, pos, neg)\ncontour1(method,colour,'dotted',20, 10, pos, neg)"
  },
  {
    "objectID": "chapter_6/rulelist2.html#rule-list-2-left",
    "href": "chapter_6/rulelist2.html#rule-list-2-left",
    "title": "6.3 Rule List 2",
    "section": "Rule List 2 left",
    "text": "Rule List 2 left\n\n\nCode\ngraph TD;\n    34[\"true&lt;br&gt;[5+, 1-]\"]\n    38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[1+, 1-]\"]\n    95[\"Length=5&lt;br&gt;[2+, 0-]\"]:::green\n    62[\"Gills=no&lt;br&gt;[5+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[5+, 1-]\"]\n    32[\"Teeth=many&lt;br&gt;[3+, 0-]\"]:::green\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 32\n    34 --&gt; 33\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    34[\"true&lt;br&gt;[5+, 1-]\"]\n    38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[1+, 1-]\"]\n    95[\"Length=5&lt;br&gt;[2+, 0-]\"]:::green\n    62[\"Gills=no&lt;br&gt;[5+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[5+, 1-]\"]\n    32[\"Teeth=many&lt;br&gt;[3+, 0-]\"]:::green\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 32\n    34 --&gt; 33\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_6/items-cc-dolphins.html",
    "href": "chapter_6/items-cc-dolphins.html",
    "title": "6.20 Items-cc-dolphins",
    "section": "",
    "text": "Code\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    6[\"Gills=no & Beak=yes & Teeth=many\"]:::triangle\n    9[\"Length=3 & Gills=no & Beak=yes\"]:::dashedEllipse\n    12[\"Gills=no & Beak=yes\"]:::pentagon\n    28[\"Gills=no & Beak=yes & Teeth=few\"]:::dashedEllipse\n    37[\"Length=5 & Gills=no & Beak=yes\"]:::dashedEllipse\n\n    6 --&gt; 1\n    9 --&gt; 1\n    12 --&gt; 6\n    12 --&gt; 9\n    6 --&gt; 2\n    28 --&gt; 3\n    9 --&gt; 3\n    12 --&gt; 28\n    6 --&gt; 4\n    37 --&gt; 4\n    12 --&gt; 37\n    28 --&gt; 5\n    37 --&gt; 5\n\n    classDef triangle fill:white,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;\n\n\n\n\ngraph TD;\n    1[\"Length=3 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    2[\"Length=4 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    3[\"Length=3 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    4[\"Length=5 & Gills=no & Beak=yes & Teeth=many\"]:::dottedEllipse\n    5[\"Length=5 & Gills=no & Beak=yes & Teeth=few\"]:::dottedEllipse\n    6[\"Gills=no & Beak=yes & Teeth=many\"]:::triangle\n    9[\"Length=3 & Gills=no & Beak=yes\"]:::dashedEllipse\n    12[\"Gills=no & Beak=yes\"]:::pentagon\n    28[\"Gills=no & Beak=yes & Teeth=few\"]:::dashedEllipse\n    37[\"Length=5 & Gills=no & Beak=yes\"]:::dashedEllipse\n\n    6 --&gt; 1\n    9 --&gt; 1\n    12 --&gt; 6\n    12 --&gt; 9\n    6 --&gt; 2\n    28 --&gt; 3\n    9 --&gt; 3\n    12 --&gt; 28\n    6 --&gt; 4\n    37 --&gt; 4\n    12 --&gt; 37\n    28 --&gt; 5\n    37 --&gt; 5\n\n    classDef triangle fill:white,stroke:#000;\n    classDef pentagon fill:white,stroke:#000;\n    classDef dashedEllipse fill:none,stroke:#000,stroke-dasharray:5,5;\n    classDef dottedEllipse fill:none,stroke:#000,stroke-dasharray:2,2;"
  },
  {
    "objectID": "chapter_6/ABC_set.html",
    "href": "chapter_6/ABC_set.html",
    "title": "6.11 ABC Set",
    "section": "",
    "text": "R figure\n\n\n\n\n\n\n\nPython figure\n\n\nCode\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_ylim(0, h)\n\n\n(0.0, 500.0)\n\n\nCode\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\ngx = grid_step\nwhile gx &lt;= w:\n    ax.axvline(gx, color=\"gray\", linestyle=\"dotted\")\n    gx += grid_step\n\ngy = grid_step\nwhile gy &lt;= h:\n    ax.axhline(gy, color=\"gray\", linestyle=\"dotted\")\n    gy += grid_step\n\na = [0, 100, 400, 500, 500]\nb = [0, 400, 500, 500, 500]\ncol = \"blue\"\nax.plot(a, b, linewidth=3, marker='o', color=col)\n\nax.text((a[0]+a[1])/2 + 20, (b[0]+b[1])/2, \"B\\\\A\", color=col)\nax.text((a[1]+a[2])/2, (b[1]+b[2])/2 - 20, \"A\", color=col)\nax.text((a[2]+a[3])/2, (b[2]+b[3])/2 - 30, \"C\\\\B\\\\A\", color=col)\n\nc = [0, 0, 100, 100, 400, 500, 500]\nd = [0, 200, 400, 400, 500, 500, 500]\ncol = \"orange\"\nax.plot(c, d, linewidth=3, marker='o', color=col)\n\nax.text((c[0]+c[1])/2 + 10, (d[0]+d[1])/2, \"B\", color=col)\nax.text((c[1]+c[2])/2 - 10, (d[1]+d[2])/2 + 10, \"BC\", color=col)\nax.text((c[3]+c[4])/2 - 10, (d[2]+d[4])/2 + 15, \"AB, C\", color=col)\nax.text((c[5]+c[6])/2, (d[5]+d[6])/2 - 10, \"A\", color=col)\n\nplt.show()"
  },
  {
    "objectID": "chapter_6/rules1.html",
    "href": "chapter_6/rules1.html",
    "title": "6.7 Rules 1",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         \n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nmetric &lt;- function(tp,fp,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    Pos = pos\n    Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontour1 &lt;- function(m,col,lty,tp,fp) {\n    v &lt;- metric(tp,fp,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    x &lt;- seq(0,fp)\n    y &lt;- seq(0,tp)\n    z &lt;- matrix(nrow=fp+1,ncol=tp+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,m)\n      }\n    }\n    contour(x,y,z,level=v,lwd=2,add=TRUE,col=col,lty=lty,labels=\"\")\n}\n\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\np = 20; n = 0\narrows(50-d,50-d,n+d,p+d,col='violet',length=0.1,lwd=3)\ncontour1(method,'green','solid',  p,  n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30)\ncontour1(method,colour,'dotted',20, 20)\ncontour1(method,colour,'dotted', 0, 40)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 10)\ncontour1(method,colour,'dotted',50, 30)\ncontour1(method,colour,'dotted', 0, 20)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40)\ncontour1(method,colour,'dotted',20, 10)"
  },
  {
    "objectID": "chapter_6/rules1.html#rules-1-right",
    "href": "chapter_6/rules1.html#rules-1-right",
    "title": "6.7 Rules 1",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         \n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n\n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nmetric &lt;- function(tp,fp,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    Pos = pos\n    Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontour1 &lt;- function(m,col,lty,tp,fp) {\n    v &lt;- metric(tp,fp,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    x &lt;- seq(0,fp)\n    y &lt;- seq(0,tp)\n    z &lt;- matrix(nrow=fp+1,ncol=tp+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,m)\n      }\n    }\n    contour(x,y,z,level=v,lwd=2,add=TRUE,col=col,lty=lty,labels=\"\")\n}\n\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\np = 20; n = 0\narrows(50-d,50-d,n+d,p+d,col='violet',length=0.1,lwd=3)\ncontour1(method,'green','solid',  p,  n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30)\ncontour1(method,colour,'dotted',20, 20)\ncontour1(method,colour,'dotted', 0, 40)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 10)\ncontour1(method,colour,'dotted',50, 30)\ncontour1(method,colour,'dotted', 0, 20)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40)\ncontour1(method,colour,'dotted',20, 10)"
  },
  {
    "objectID": "chapter_6/rules1.html#rules-1-left",
    "href": "chapter_6/rules1.html#rules-1-left",
    "title": "6.7 Rules 1",
    "section": "Rules 1 left",
    "text": "Rules 1 left\n\n\nCode\ngraph TD;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[5+, 5-]\"];\n  38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green;\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[2+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[5+, 1-]\"];\n  33[\"Beak=yes&lt;br&gt;[5+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[3+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[2+, 1-]\"];\n\n  34 --&gt;|Teeth=many| 32;\n  34 --&gt;|Beak=yes| 33;\n  34 --&gt;|Gills=yes| 35;\n  34 --&gt;|Length=3| 38;\n  34 --&gt;|Teeth=few| 45;\n  34 --&gt;|Beak=no| 52;\n  34 --&gt;|Gills=no| 62;\n  34 --&gt;|Length=4| 76;\n  34 --&gt;|Length=5| 95;\n\n\n\n\ngraph TD;\n  classDef green fill:#32CD32,stroke:#333,stroke-width:2px;\n\n  34[\"true&lt;br&gt;[5+, 5-]\"];\n  38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green;\n  76[\"Length=4&lt;br&gt;[1+, 3-]\"];\n  95[\"Length=5&lt;br&gt;[2+, 2-]\"];\n  35[\"Gills=yes&lt;br&gt;[0+, 4-]\"];\n  62[\"Gills=no&lt;br&gt;[5+, 1-]\"];\n  33[\"Beak=yes&lt;br&gt;[5+, 3-]\"];\n  52[\"Beak=no&lt;br&gt;[0+, 2-]\"];\n  32[\"Teeth=many&lt;br&gt;[3+, 4-]\"];\n  45[\"Teeth=few&lt;br&gt;[2+, 1-]\"];\n\n  34 --&gt;|Teeth=many| 32;\n  34 --&gt;|Beak=yes| 33;\n  34 --&gt;|Gills=yes| 35;\n  34 --&gt;|Length=3| 38;\n  34 --&gt;|Teeth=few| 45;\n  34 --&gt;|Beak=no| 52;\n  34 --&gt;|Gills=no| 62;\n  34 --&gt;|Length=4| 76;\n  34 --&gt;|Length=5| 95;"
  },
  {
    "objectID": "chapter_6/rulelist1.html",
    "href": "chapter_6/rulelist1.html",
    "title": "6.2 Rule List",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         #asp = pos/neg,\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nmetric &lt;- function(tp,fp,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    Pos = pos\n    Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontour1 &lt;- function(m,col,lty,tp,fp) {\n    v &lt;- metric(tp,fp,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    x &lt;- seq(0,fp)\n    y &lt;- seq(0,tp)\n    z &lt;- matrix(nrow=fp+1,ncol=tp+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,m)\n      }\n    }\n    contour(x,y,z,level=v,lwd=2,add=TRUE,col=col,lty=lty,labels=\"\")\n}\n\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\np =  0; n = 40\narrows(50-d,50-d,n+d,p+d,col='violet',length=0.1,lwd=3)\ncontour1(method,'red','solid',  p,  n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30)\ncontour1(method,colour,'dotted',20, 20)\ncontour1(method,'green','solid',20,  0)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 10)\ncontour1(method,colour,'dotted',50, 30)\ncontour1(method,'red','solid', 0, 20)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40)\ncontour1(method,colour,'dotted',20, 10)"
  },
  {
    "objectID": "chapter_6/rulelist1.html#rule-list-right",
    "href": "chapter_6/rulelist1.html#rule-list-right",
    "title": "6.2 Rule List",
    "section": "",
    "text": "Code\nc &lt;- 1 \npos &lt;- c*50  \nneg &lt;- 50  \n\nrocgrid &lt;- function() {\n    plot( c(0,neg), c(0,pos),\n         xlim=c(0,neg),ylim=c(0,pos),\n         #asp = pos/neg,\n         xaxs = \"i\",yaxs = \"i\",\n         xaxt = 'n', yaxt = 'n',\n         type = \"n\",\n         xlab = \"Negatives\", ylab = \"Positives\")\n    \n    grid (nx = neg/10, ny = pos/10, col = gray(0.5))\n    \n}\n\nmetric &lt;- function(tp,fp,m) {\n  if (tp+fp == 0) { return(0) }\n  else {\n    Pos = pos\n    Neg = neg\n    N = Pos+Neg\n    TP = tp\n    FP = fp\n    FN = Pos-TP\n    TN = Neg-FP\n    if (m=='accuracy') return( (TP+TN)/N ) \n    if (m=='wracc') return( TP/N - (TP+FP)*(TP+FN)/N^2 ) \n    if (m=='confirmation') return( ((TP+FP)*(FP+TN)/N^2 - FP/N)/(sqrt((TP+FP)*(FP+TN)/N^2) - (TP+FP)*(FP+TN)/N^2) ) \n    if (m=='generality') return( (TP+FP)/N ) \n    if (m=='precision') return( TP/(TP+FP) ) \n    if (m=='laplace-precision') return( (TP+10)/(TP+FP+20) ) \n    if (m=='f-measure') return( 2*TP/(2*TP+FP+FN) ) \n    if (m=='g-measure') return( TP/(FP+Pos) ) \n    if (m=='precision*recall') return( TP^2/((TP+FP)*(TP+FN)) ) \n    if (m=='avg-precision-recall') return( TP/(2*(TP+FP)) + TP/(2*(TP+FN)) ) \n    if (m=='aucsplit') return( (TP*Neg+Pos*TN)/(2*Pos*Neg) ) \n    if (m=='balanced-aucsplit') return( TP/Pos - FP/Neg ) \n    if (m=='chi2') return( (TP*TN - FP*FN)^2 / ((TP+FP)*(TP+FN)*(FP+TN)*(FN+TN)) ) \n    if (m=='info-gain') return( entropy(Pos,Neg) - (TP+FP)/N*entropy(TP,FP) - (FN+TN)/N*entropy(FN,TN) )\n    if (m=='gini') return( gini(Pos,Neg) - (TP+FP)/N*gini(TP,FP) - (FN+TN)/N*gini(FN,TN) )\n    if (m=='dkm') return( dkm(Pos,Neg) - (TP+FP)/N*dkm(TP,FP) - (FN+TN)/N*dkm(FN,TN) )\n    if (m=='entropy') return( entropy(TP,FP)/2 )\n    if (m=='giniimp') return( gini(TP,FP) )\n    if (m=='dkmimp') return( dkm(TP,FP) )\n    if (m=='minacc') return( minacc(TP,FP) )\n  }\n}\n\nentropy &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  if (P==0 || N==0) { return( 0 ) }\n  else { return( -p*log2(p) -n*log2(n) ) }\n}\n\ngini &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 4*p*n )   \n}\n\ndkm &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( 2*sqrt(p*n) ) \n}\n\nminacc &lt;- function(P,N) {\n  p &lt;- P/(P+N)\n  n &lt;- N/(P+N)\n  return( min(p,n) )    \n}\n\n\nsave = FALSE\n\nif (save==FALSE) {colour1=\"red\"; colour2=\"blue\"} else {colour1=\"black\"; colour2=\"black\"}\n\ncontour1 &lt;- function(m,col,lty,tp,fp) {\n    v &lt;- metric(tp,fp,m)\n    col=rgb(min(2-2*v,1),v,0)\n    points(fp,tp,col=col,type='p',lwd=3)\n    if (tp==0 || fp==0) { \n        lines(c(0,fp),c(0,tp),col=col,lty=lty,lwd=4)\n        return() \n    }\n    x &lt;- seq(0,fp)\n    y &lt;- seq(0,tp)\n    z &lt;- matrix(nrow=fp+1,ncol=tp+1)\n    for (i in x) {\n      for (j in y) {\n        z[i+1,j+1] = metric(j,i,m)\n      }\n    }\n    contour(x,y,z,level=v,lwd=2,add=TRUE,col=col,lty=lty,labels=\"\")\n}\n\nrocgrid()\nd = 1\nmethod = 'precision'\ncolour = 'black'\np =  0; n = 40\narrows(50-d,50-d,n+d,p+d,col='violet',length=0.1,lwd=3)\ncontour1(method,'red','solid',  p,  n)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',10, 30)\ncontour1(method,colour,'dotted',20, 20)\ncontour1(method,'green','solid',20,  0)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',50, 10)\ncontour1(method,colour,'dotted',50, 30)\ncontour1(method,'red','solid', 0, 20)\n\n\nNULL\n\n\nCode\ncontour1(method,colour,'dotted',30, 40)\ncontour1(method,colour,'dotted',20, 10)"
  },
  {
    "objectID": "chapter_6/rulelist1.html#rule-list-left",
    "href": "chapter_6/rulelist1.html#rule-list-left",
    "title": "6.2 Rule List",
    "section": "Rule List left",
    "text": "Rule List left\n\n\nCode\ngraph TD;\n    34[\"true&lt;br&gt;[5+, 5-]\"]\n    38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[1+, 3-]\"]\n    95[\"Length=5&lt;br&gt;[2+, 2-]\"]\n    35[\"Gills=yes&lt;br&gt;[0+, 4-]\"]:::red\n    62[\"Gills=no&lt;br&gt;[5+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[5+, 3-]\"]\n    52[\"Beak=no&lt;br&gt;[0+, 2-]\"]:::red\n    32[\"Teeth=many&lt;br&gt;[3+, 4-]\"]\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 32\n    34 --&gt; 33\n    34 --&gt; 35\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 52\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;\n\n\n\n\ngraph TD;\n    34[\"true&lt;br&gt;[5+, 5-]\"]\n    38[\"Length=3&lt;br&gt;[2+, 0-]\"]:::green\n    76[\"Length=4&lt;br&gt;[1+, 3-]\"]\n    95[\"Length=5&lt;br&gt;[2+, 2-]\"]\n    35[\"Gills=yes&lt;br&gt;[0+, 4-]\"]:::red\n    62[\"Gills=no&lt;br&gt;[5+, 1-]\"]\n    33[\"Beak=yes&lt;br&gt;[5+, 3-]\"]\n    52[\"Beak=no&lt;br&gt;[0+, 2-]\"]:::red\n    32[\"Teeth=many&lt;br&gt;[3+, 4-]\"]\n    45[\"Teeth=few&lt;br&gt;[2+, 1-]\"]\n\n    34 --&gt; 32\n    34 --&gt; 33\n    34 --&gt; 35\n    34 --&gt; 38\n    34 --&gt; 45\n    34 --&gt; 52\n    34 --&gt; 62\n    34 --&gt; 76\n    34 --&gt; 95\n\n    classDef red fill:#f04030,stroke:#000,stroke-width:1px;\n    classDef green fill:#00a000,stroke:#000,stroke-width:1px;"
  },
  {
    "objectID": "chapter_10.html",
    "href": "chapter_10.html",
    "title": "Chapter 10",
    "section": "",
    "text": "10.3 Thresholding Left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n10.4 RP Left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n10.4 RP Middle\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n10.4 RP Right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n10.5 Logcal\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n3.10 Thresholding RIght\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nRoccal\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_9/gmm.html",
    "href": "chapter_9/gmm.html",
    "title": "9.8 GMM",
    "section": "",
    "text": "(array([52, 64]), array([11.24716133, 25.93402121]), array([54, 60]))"
  },
  {
    "objectID": "chapter_9/linclass2.html",
    "href": "chapter_9/linclass2.html",
    "title": "9.6 Linear Classifier 2",
    "section": "",
    "text": "Error for BLC: 8\nError for LSC: 8\nOptimization terminated successfully.\n         Current function value: 0.093137\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                      y   No. Observations:                  200\nModel:                          Logit   Df Residuals:                      197\nMethod:                           MLE   Df Model:                            2\nDate:                Wed, 28 May 2025   Pseudo R-squ.:                  0.8656\nTime:                        15:18:41   Log-Likelihood:                -18.627\nconverged:                       True   LL-Null:                       -138.63\nCovariance Type:            nonrobust   LLR p-value:                 7.652e-53\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.0925      0.946      1.155      0.248      -0.762       2.947\nx1             1.9772      0.448      4.412      0.000       1.099       2.856\nx2             4.1799      1.152      3.630      0.000       1.923       6.437\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.15 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\nError for Logistic Regression: 7\nBinary Logistic Regression Error: 0.02871156681390769"
  },
  {
    "objectID": "chapter_9/bivar.html",
    "href": "chapter_9/bivar.html",
    "title": "9.3 Bivariate Distribution Visualization",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\n\ndef bivar(graphtype, mupos=None, sigpos=None, rhopos=None, muneg=None, signeg=None, rhoneg=None):\n\n    if mupos is None:\n        mupos = np.array([4, 4])\n        sigpos = np.array([1, 1])\n        rhopos = 0\n        muneg = np.array([2, 2])\n        sigmaneg = np.array([[1, -0.6], [-0.6, 1]])  \n    else:\n        sigmapos = np.array([[sigpos[0], rhopos * np.sqrt(sigpos[0] * sigpos[1])],\n                             [rhopos * np.sqrt(sigpos[0] * sigpos[1]), sigpos[1]]])\n\n        if signeg is None:\n            sigmaneg = np.array([[1, -0.6], [-0.6, 1]])  \n        else:\n            sigmaneg = signeg\n\n    Npos = 100\n    Nneg = 100\n\n\n    pos = np.random.multivariate_normal(mupos, sigmapos, Npos)\n    neg = np.random.multivariate_normal(muneg, sigmaneg, Nneg)\n\n    mn = np.min(np.concatenate((pos, neg), axis=0))\n    mx = np.max(np.concatenate((pos, neg), axis=0))\n    \n    x = np.arange(mn, mx, 0.1)\n    y = np.arange(mn, mx, 0.1)\n    X, Y = np.meshgrid(x, y)\n\n    Ppos = np.zeros_like(X)\n    Pneg = np.zeros_like(X)\n    L = np.zeros_like(X)\n\n    for i in range(len(x)):\n        for j in range(len(y)):\n            Ppos[j, i] = getprob(x[i], y[j], mupos, sigmapos)\n            Pneg[j, i] = getprob(x[i], y[j], muneg, sigmaneg)\n            L[j, i] = Pneg[j, i] / Ppos[j, i]\n\n    Pb = (1 / (2 * np.pi * np.sqrt(np.linalg.det(sigmapos)))) * np.exp(-1 / 2)\n    Ps = (1 / (2 * np.pi * np.sqrt(np.linalg.det(sigmaneg)))) * np.exp(-1 / 2)\n\n\n    plt.figure(figsize=(8, 8))\n    if graphtype == 2:\n\n        plt.axis('square')\n        plt.axis([mn, mx, mn, mx])\n\n        plt.scatter(pos[:, 0], pos[:, 1], color='r', label='Positive')\n        plt.scatter(neg[:, 0], neg[:, 1], color='b', label='Negative')\n\n        plt.contour(X, Y, Ppos, levels=[Pb], colors='r')\n        plt.contour(X, Y, Pneg, levels=[Ps], colors='b')\n        plt.contour(X, Y, L, levels=[1], colors='k')\n\n        plt.plot([mupos[0], muneg[0]], [mupos[1], muneg[1]], color='k', linestyle=':')\n\n    elif graphtype == 3:\n\n        from mpl_toolkits.mplot3d import Axes3D\n\n        fig = plt.figure(figsize=(8, 8))\n        ax = fig.add_subplot(111, projection='3d')\n\n        ax.plot_surface(X, Y, Ppos, cmap='Reds', edgecolor='none', alpha=0.6)\n        ax.plot_surface(X, Y, Pneg, cmap='Blues', edgecolor='none', alpha=0.6)\n\n        ax.contour3D(X, Y, Ppos, levels=[Pb], cmap='Reds')\n        ax.contour3D(X, Y, Pneg, levels=[Ps], cmap='Blues')\n\n    plt.show()\n\n\ndef getprob(x, y, mu, sigma):\n    vec = np.array([x, y])\n    E = 2 * np.pi * np.sqrt(np.linalg.det(sigma))\n    P = (1 / E) * np.exp(-0.5 * np.dot(np.dot((vec - mu), np.linalg.inv(sigma)), (vec - mu).T))\n    return P\n\nbivar(2, mupos=[4, 3], sigpos=[1, 1], rhopos=0, muneg=[2, 2], signeg=[[1, -0.6], [-0.6, 1]], rhoneg=0)"
  },
  {
    "objectID": "chapter_7/linkernel.html",
    "href": "chapter_7/linkernel.html",
    "title": "7.14 Linear Kernel",
    "section": "",
    "text": "&lt;module 'matplotlib.pyplot' from '/home/ck22122/.local/share/virtualenvs/superbook2-Q63KuxOb/lib/python3.10/site-packages/matplotlib/pyplot.py'&gt;"
  },
  {
    "objectID": "chapter_9.html",
    "href": "chapter_9.html",
    "title": "Chapter 9",
    "section": "",
    "text": "9.3 Bivariate Distribution Visualization\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n9.5 Density Left\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n9.5 Density Right\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n9.6 Linear Classifier 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n9.7 Logreg\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n9.8 GMM\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_1.html",
    "href": "chapter_1.html",
    "title": "Chapter 1",
    "section": "",
    "text": "1.10 Diabetes\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n1.11 Kernel\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n1.7 ML Methods\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n1.8 mlmethodstree\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapter_1/mlmethodstree1.html",
    "href": "chapter_1/mlmethodstree1.html",
    "title": "1.8 mlmethodstree",
    "section": "",
    "text": "Code\ngraph TD;\n    N0[\"grading\"] --&gt;|a bit| N1[\"logical\"];\n    N0 --&gt;|a lot| N2[\"geometric\"];\n\n    N1 --&gt;|yes| N11[\"supervised\"];\n    N1 --&gt;|\"not so\\nmuch\"| L12[\"naive\\nBayes\"]:::orange;\n    N11 --&gt;|no| L111[\"association\\nrules\"]:::red;\n    N11 --&gt;|\"yes\"| L112[\"trees & \\nrules\"]:::red;\n\n    N2 --&gt;|yes| N21[\"splitting\"];\n    N2 --&gt;|\"not\\ncom-\\npletely\"| N22[\"supervised\"];\n    \n    N21 --&gt;|\"some\"| N212[\"supervised\"];\n    N21 --&gt;|no| L211[\"linear\\nclassifiers\"]:::purple;\n    N212 --&gt;|no| L2121[\"K-means\"]:::purple;\n    N212 --&gt;|yes| L2122[\"k-NN\"]:::purple;\n\n    N22 --&gt;|no| L221[\"GMM\"]:::orange;\n    N22 --&gt;|yes| L222[\"SVM\"]:::purple;\n\n    classDef red fill:#ff9999,stroke:#000,color:#000;\n    classDef orange fill:#ffcc99,stroke:#000,color:#000;\n    classDef purple fill:#cc99ff,stroke:#000,color:#000;\n\n    class L111,L112 red;\n    class L12,L221 orange;\n    class L211,L2121,L2122,L222 purple;\n\n\n\n\ngraph TD;\n    N0[\"grading\"] --&gt;|a bit| N1[\"logical\"];\n    N0 --&gt;|a lot| N2[\"geometric\"];\n\n    N1 --&gt;|yes| N11[\"supervised\"];\n    N1 --&gt;|\"not so\\nmuch\"| L12[\"naive\\nBayes\"]:::orange;\n    N11 --&gt;|no| L111[\"association\\nrules\"]:::red;\n    N11 --&gt;|\"yes\"| L112[\"trees & \\nrules\"]:::red;\n\n    N2 --&gt;|yes| N21[\"splitting\"];\n    N2 --&gt;|\"not\\ncom-\\npletely\"| N22[\"supervised\"];\n    \n    N21 --&gt;|\"some\"| N212[\"supervised\"];\n    N21 --&gt;|no| L211[\"linear\\nclassifiers\"]:::purple;\n    N212 --&gt;|no| L2121[\"K-means\"]:::purple;\n    N212 --&gt;|yes| L2122[\"k-NN\"]:::purple;\n\n    N22 --&gt;|no| L221[\"GMM\"]:::orange;\n    N22 --&gt;|yes| L222[\"SVM\"]:::purple;\n\n    classDef red fill:#ff9999,stroke:#000,color:#000;\n    classDef orange fill:#ffcc99,stroke:#000,color:#000;\n    classDef purple fill:#cc99ff,stroke:#000,color:#000;\n\n    class L111,L112 red;\n    class L12,L221 orange;\n    class L211,L2121,L2122,L222 purple;"
  },
  {
    "objectID": "chapter_1/diabetes.html",
    "href": "chapter_1/diabetes.html",
    "title": "1.10 Diabetes",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmupos = 90\nmuneg = 70\nsigma = 20\nPos = 50\nNeg = 50\n\npx = np.random.normal(mupos, sigma, Pos)\nnx = np.random.normal(muneg, sigma, Neg)\n\nbins = np.arange(muneg - 2 * sigma, mupos + 2 * sigma + 10, 10)\n\ncounts, xout = np.histogram(np.concatenate((px, nx)), bins)\n\nplt.style.use('ggplot')\n\nplt.figure(1)\nplt.bar(xout[:-1], counts, width=10, align='edge',  edgecolor = \"black\")\nplt.show()\n\ncounts = counts.reshape(-1, 1) \np = counts[:, 0] / (counts[:, 0] + counts[:, 0])  \n\nTP = 0\nFP = 0\ntp = [0]\nfp = [0]\n\nfor i in range(len(counts)):\n    tp.append(TP)\n    fp.append(FP)\n    TP += counts[i, 0]\n    FP += counts[i, 0]\n\ntp.append(TP)\nfp.append(FP)\n\nplt.figure(2)\nplt.plot(fp, tp, marker='o')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()\n\ncounts2 = np.zeros((6, 1))\ncounts2[0] = counts[0] + counts[1]\ncounts2[1] = counts[2] + counts[3]\ncounts2[2] = counts[4] + counts[5]\ncounts2[3] = counts[6]\ncounts2[4] = counts[7] + counts[8]\ncounts2[5] = counts[9] + counts[10] if len(counts) &gt; 10 else counts[9]\n\nbins2 = [35, 55, 75, 90, 110, 130]\n\nplt.figure(3)\nplt.bar(bins2, counts2.flatten(), width=10, align='center')\nplt.show()\n\n\n\n\n\n/tmp/ipykernel_142424/2649633566.py:24: RuntimeWarning: invalid value encountered in divide\n  p = counts[:, 0] / (counts[:, 0] + counts[:, 0])"
  },
  {
    "objectID": "chapter_1/mlmethods.html",
    "href": "chapter_1/mlmethods.html",
    "title": "1.7 ML Methods",
    "section": "",
    "text": "Code\nimport numpy as np\nimport scipy.spatial.distance as dist\nimport scipy.linalg as linalg\nimport matplotlib.pyplot as plt\n\nnames = ['Trees', 'Rules', 'naive Bayes', 'kNN', 'Linear Classifier', 'Linear Regression',\n         'Logistic Regression', 'SVM', 'Kmeans', 'GMM', 'Associations']\n\nfeatures = ['geom', 'stat', 'logic', 'group', 'grad', 'symb', 'real', 'sup', 'unsup', 'multi']\n\nM = np.array([\n    [1,0,3,3,0,3,2,3,2,3],  \n    [0,0,3,3,1,3,2,3,0,2],  \n    [1,3,1,3,1,3,1,3,0,3],  \n    [3,1,0,2,2,1,3,3,0,3],  \n    [3,0,0,0,3,1,3,3,0,0],  \n    [3,1,0,0,3,0,3,3,0,1],  \n    [3,2,0,0,3,1,3,3,0,0],  \n    [2,2,0,0,3,2,3,3,0,0],  \n    [3,2,0,1,2,1,3,0,3,1],  \n    [1,3,0,0,3,1,3,0,3,1],  \n    [0,0,3,3,0,3,1,0,3,1] \n])\n\nplt.style.use('ggplot')\n\nw1, w2, w3 = 5, 3, 1\nW = np.array([w1, w1, w1, w2, w2, w3, w3, w3, w3, w3])\nM = M * W\n\nD = dist.pdist(M, metric='euclidean')\nD = dist.squareform(D) \n\ndef cmdscale(D):\n    n = D.shape[0]\n    H = np.eye(n) - np.ones((n, n)) / n\n    B = -0.5 * H @ (D ** 2) @ H\n    eigvals, eigvecs = linalg.eigh(B)\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n    return eigvecs[:, :2] * np.sqrt(eigvals[:2]), eigvals\n\nY, eigvals = cmdscale(D)\n\nplt.figure(figsize=(10,7))\nplt.scatter(Y[:, 0], Y[:, 1], c='r', marker='.')\nfor i, name in enumerate(names):\n    plt.text(Y[i, 0], Y[i, 1], name, fontsize=12)\nplt.xlabel('Dimension 1')\nplt.ylabel('Dimension 2')\nplt.title('MDS Representation')\nplt.show()"
  },
  {
    "objectID": "chapter_1/kernel.html",
    "href": "chapter_1/kernel.html",
    "title": "1.11 Kernel",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\nx = 4 * np.random.rand(100, 1) - 2\ny = np.sqrt(4 - x ** 2)\nxe = x + np.random.normal(0, 0.1, (100, 1))\nye = y + np.random.normal(0, 0.1, (100, 1))\n\nmean = [0, 0]\ncov = [[0.5, 0], [0, 0.5]]\np = np.random.multivariate_normal(mean, cov, 100)\n\nxaxis = np.arange(-np.sqrt(3), np.sqrt(3), 0.01)\n\nplt.figure(1)\nplt.axis(\"square\")\nplt.xlim([-2.5, 2.5])\nplt.ylim([-2.5, 2.5])\nplt.scatter(p[:, 0], p[:, 1], color='r', marker='.')\nplt.scatter(xe, ye, color='b', marker='.')\nplt.plot(xaxis, np.sqrt(3 - xaxis ** 2), 'k-')\nplt.plot(xaxis, -np.sqrt(3 - xaxis ** 2), 'k-')\nplt.savefig(\"kernel-left.pdf\")\nplt.show()\n\nplt.figure(2)\nplt.axis(\"square\")\nplt.xlim([0, 5])\nplt.ylim([0, 5])\nplt.scatter(xe ** 2, ye ** 2, color='b', marker='.')\nplt.scatter(p[:, 0] ** 2, p[:, 1] ** 2, color='r', marker='.')\nplt.plot([0, 3], [3, 0], color='black')\nplt.savefig(\"kernel-right.pdf\")\nplt.show()"
  },
  {
    "objectID": "chapter_10/logcal.html",
    "href": "chapter_10/logcal.html",
    "title": "10.5 Logcal",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef linclass(mupos=None, sigpos=None, rhopos=None, muneg=None, signeg=None, rhoneg=None):\n\n    if mupos is None:\n        mupos = np.array([1, 1])\n        sigpos = np.array([0.4, 0.4])\n        rhopos = 0.2\n        muneg = np.array([-1, -1])\n        signeg = np.array([0.4, 0.4])\n        rhoneg = -0.2\n\n\n    covpos = rhopos * np.sqrt(sigpos[0] * sigpos[1])\n    sigmapos = np.array([[sigpos[0], covpos], [covpos, sigpos[1]]])\n    \n    covneg = rhoneg * np.sqrt(signeg[0] * signeg[1])\n    sigmaneg = np.array([[signeg[0], covneg], [covneg, signeg[1]]])\n\n    Npos = 100\n    Nneg = 50\n\n    pos = np.random.multivariate_normal(mupos, sigmapos, Npos)\n    neg = np.random.multivariate_normal(muneg, sigmaneg, Nneg)\n\n    plt.figure(figsize=(8, 8))\n    plt.xlim([-3, 3])\n    plt.ylim([-3, 3])\n    plt.scatter(pos[:, 0], pos[:, 1], color='k', marker='+')\n    plt.scatter(neg[:, 0], neg[:, 1], color='k', marker='.')\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    pos1 = np.hstack([np.ones((Npos, 1)), pos])\n    neg1 = np.hstack([np.ones((Nneg, 1)), neg])\n\n    emupos1 = np.mean(pos1, axis=0)\n    emuneg1 = np.mean(neg1, axis=0)\n    \n    plt.plot(emupos1[1], emupos1[2], 'ro')\n    plt.plot(emuneg1[1], emuneg1[2], 'ro')\n\n    plt.plot([emupos1[1], emuneg1[1]], [emupos1[2], emuneg1[2]], 'r:', label='Separation Line')\n\n    blc = emupos1 - emuneg1\n    x_vals = np.array([-2, 2])\n    y_vals = (-blc[0] + x_vals * 2 * blc[1]) / blc[2]\n    plt.plot(x_vals, y_vals, 'r-', label='Decision Boundary')\n\n    plt.legend()\n    plt.show()\n\nlinclass()"
  },
  {
    "objectID": "chapter_11/boosting.html",
    "href": "chapter_11/boosting.html",
    "title": "11.2 Boosting",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmupos = [1, 1]\nsigpos = [0.1, 0.6]\nrhopos = 0.1\nmupos2 = [-1, -1]\nsigpos2 = [0.2, 0.2]\nrhopos2 = 0\nmuneg = [1, -1]\nsigneg = [0.6, 0.1]\nrhoneg = 0.1\nmuneg2 = [-1, 1]\nsigneg2 = sigpos2\nrhoneg2 = rhopos2\n\ncovpos = rhopos * np.sqrt(sigpos[0] * sigpos[1])\nsigmapos = np.array([[sigpos[0], covpos], [covpos, sigpos[1]]])\ncovpos2 = rhopos2 * np.sqrt(sigpos2[0] * sigpos2[1])\nsigmapos2 = np.array([[sigpos2[0], covpos2], [covpos2, sigpos2[1]]])\ncovneg = rhoneg * np.sqrt(signeg[0] * signeg[1])\nsigmaneg = np.array([[signeg[0], covneg], [covneg, signeg[1]]])\ncovneg2 = rhoneg2 * np.sqrt(signeg2[0] * signeg2[1])\nsigmaneg2 = np.array([[signeg2[0], covneg2], [covneg2, signeg2[1]]])\n\nNpos = 25\nNpos2 = 10\nNneg = 25\nNneg2 = 10\n\npos = np.vstack([np.random.multivariate_normal(mupos, sigmapos, Npos - Npos2),\n                 np.random.multivariate_normal(mupos2, sigmapos2, Npos2)])\nneg = np.vstack([np.random.multivariate_normal(muneg, sigmaneg, Nneg - Nneg2),\n                 np.random.multivariate_normal(muneg2, sigmaneg2, Nneg2)])\n\nN = Npos + Nneg\npi0 = Npos / N\npi1 = Nneg / N\n\nxy = np.vstack([pos, neg])\nxmin, xmax = np.min(xy[:, 0]), np.max(xy[:, 0])\nymin, ymax = np.min(xy[:, 1]), np.max(xy[:, 1])\nxymin = [xmin, ymin]\nxymax = [xmax, ymax]\n\nT = 5\nblc = np.zeros((T, 2))\nx0blc = np.zeros((T, 2))\nweight = np.ones(N)\nalpha = np.zeros(T)\n\nfor t in range(T):\n    weight = weight / np.sum(weight)\n    weightedmeanpos = np.dot(weight[:Npos], pos) / np.sum(weight[:Npos])\n    weightedmeanneg = np.dot(weight[Npos:], neg) / np.sum(weight[Npos:])\n    \n    blc[t, :] = weightedmeanpos - weightedmeanneg\n    x0blc[t, :] = (weightedmeanpos + weightedmeanneg) / 2\n    \n    pred = np.sign(np.dot(xy - np.tile(x0blc[t], (N, 1)), blc[t, :]))\n    \n    error = 0\n    for i in range(Npos):\n        if pred[i] == -1:\n            error += weight[i]\n    for i in range(Npos, N):\n        if pred[i] == 1:\n            error += weight[i]\n    \n    if error &gt;= 0.5:\n        break\n    \n    for i in range(Npos):\n        if pred[i] == -1:\n            weight[i] = weight[i] / (2 * error)\n        else:\n            weight[i] = weight[i] / (2 * (1 - error))\n    for i in range(Npos, N):\n        if pred[i] == 1:\n            weight[i] = weight[i] / (2 * error)\n        else:\n            weight[i] = weight[i] / (2 * (1 - error))\n    \n    alpha[t] = 0.5 * np.log((1 - error) / error)\n\nvotes = np.zeros(N)\nfor t in range(T):\n    votes += alpha[t] * np.sign(np.dot(xy - np.tile(x0blc[t], (N, 1)), blc[t, :]))\n\nLb = (np.sign(votes) + 1) / 2\nboostederror = (np.sum(Lb[:Npos] == 0) + np.sum(Lb[Npos:] == 1)) / N\n\nLb2 = (np.sign(votes + np.sum(alpha) * (1 - 2 * np.random.rand(N))) + 1) / 2\nboostederror2 = (np.sum(Lb2[:Npos] == 0) + np.sum(Lb2[Npos:] == 1)) / N\n\nNtest = 50000\nTe = np.tile(xymin, (Ntest, 1)) + np.tile(np.array(xymax) - np.array(xymin), (Ntest, 1)) * np.random.rand(Ntest, 2)\n\nplt.figure(1)\nplt.axis([xmin, xmax, ymin, ymax])\n\nvotes = np.zeros(Ntest)\nfor t in range(T):\n    if alpha[t] == 0:\n        break\n    yleft = -(blc[t, 0] / blc[t, 1]) * (xmin - x0blc[t, 0]) + x0blc[t, 1]\n    yright = -(blc[t, 0] / blc[t, 1]) * (xmax - x0blc[t, 0]) + x0blc[t, 1]\n    \n    color = np.clip([(t - 1) / (T - 1), 0, (T - t) / (T - 1)], 0, 1)\n    \n    plt.plot([xmin, xmax], [yleft, yright], linestyle='-', color=color, linewidth=2)\n    votes += alpha[t] * np.sign(np.dot(Te - np.tile(x0blc[t], (Ntest, 1)), blc[t, :]))\n\nLb = (np.sign(votes) + 1) / 2\nplt.scatter(Te[:, 0], Te[:, 1], s=1, c=Lb)\nplt.scatter(pos[:, 0], pos[:, 1], color='r', marker='+')\nplt.scatter(neg[:, 0], neg[:, 1], color='k', marker='.')\n\nplt.figure(2)\nplt.axis([xmin, xmax, ymin, ymax])\n\nfor t in range(T):\n    if alpha[t] == 0:\n        break\n    yleft = -(blc[t, 0] / blc[t, 1]) * (xmin - x0blc[t, 0]) + x0blc[t, 1]\n    yright = -(blc[t, 0] / blc[t, 1]) * (xmax - x0blc[t, 0]) + x0blc[t, 1]\n    \n    color = np.clip([(t - 1) / (T - 1), 0, (T - t) / (T - 1)], 0, 1)\n    \n    plt.plot([xmin, xmax], [yleft, yright], linestyle='-', color=color, linewidth=2)\n\nLb2 = (np.sign(votes + np.sum(alpha) * (1 - 2 * np.random.rand(Ntest))) + 1) / 2\nplt.scatter(Te[:, 0], Te[:, 1], s=1, c=Lb2)\nplt.scatter(pos[:, 0], pos[:, 1], color='r', marker='+')\nplt.scatter(neg[:, 0], neg[:, 1], color='k', marker='.')\n\nplt.show()"
  },
  {
    "objectID": "chapter_11/bagging.html",
    "href": "chapter_11/bagging.html",
    "title": "11.1 Bagging",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmupos = [1, 1]\nsigpos = [10, 5]\nrhopos = 0\nmuneg = [-1, -1]\nsigneg = [5, 10]\nroneg = 0\n\ncovpos = rhopos * np.sqrt(sigpos[0] * sigpos[1])\nsigmapos = np.array([[sigpos[0], covpos], [covpos, sigpos[1]]])\ncovneg = roneg * np.sqrt(signeg[0] * signeg[1])\nsigmaneg = np.array([[signeg[0], covneg], [covneg, signeg[1]]])\n\nNpos = 1000\nNneg = 1000\nN = Npos + Nneg\npi0 = Npos / N\npi1 = Nneg / N\n\npos = np.random.multivariate_normal(mupos, sigmapos, Npos)\nneg = np.random.multivariate_normal(muneg, sigmaneg, Nneg)\n\nmupos2 = [-1, -1]\nsigpos2 = [0.2, 0.2]\nrhopos2 = 0\nmuneg2 = [1, -1]\nsigneg2 = [0.6, 0.1]\nrhoneg2 = 0.1  \n\ncovpos2 = rhopos2 * np.sqrt(sigpos2[0] * sigpos2[1])\nsigmapos2 = np.array([[sigpos2[0], covpos2], [covpos2, sigpos2[1]]])\ncovneg2 = rhoneg2 * np.sqrt(signeg2[0] * signeg2[1])\nsigmaneg2 = np.array([[signeg2[0], covneg2], [covneg2, signeg2[1]]])\n\nNpos2 = 10\nNneg2 = 10\n\npos = np.vstack([\n    np.random.multivariate_normal(mupos, sigmapos, Npos - Npos2),\n    np.random.multivariate_normal(mupos2, sigmapos2, Npos2)\n])\n\nneg = np.vstack([\n    np.random.multivariate_normal(muneg, sigmaneg, Nneg - Nneg2),\n    np.random.multivariate_normal(muneg2, sigmaneg2, Nneg2)\n])\n\nxy = np.vstack([pos, neg])\nxmin = np.min(xy[:, 0])\nxmax = np.max(xy[:, 0])\nymin = np.min(xy[:, 1])\nymax = np.max(xy[:, 1])\nxymin = np.array([xmin, ymin])\nxymax = np.array([xmax, ymax])\n\nT = 5\nblc = np.zeros((T, 2))\nx0blc = np.zeros((T, 2))\n\nposBS = np.zeros_like(pos)\nnegBS = np.zeros_like(neg)\n\nfor t in range(T):\n    for i in range(Npos):\n        posBS[i, :] = pos[np.random.randint(Npos), :]\n    for i in range(Nneg):\n        negBS[i, :] = neg[np.random.randint(Nneg), :]\n\n    blc[t, :] = np.mean(posBS, axis=0) - np.mean(negBS, axis=0)\n    x0blc[t, :] = (np.mean(posBS, axis=0) + np.mean(negBS, axis=0)) / 2\n\nNtest = 50000\nTe = np.tile(xymin, (Ntest, 1)) + np.tile(np.array(xymax) - np.array(xymin), (Ntest, 1)) * np.random.rand(Ntest, 2)\n\nplt.figure(figsize=(8, 8))\nplt.axis([xmin, xmax, ymin, ymax])\nvotes = np.zeros(Ntest)\n\nfor t in range(T):\n    yleft = -(blc[t, 0] / blc[t, 1]) * (xmin - x0blc[t, 0]) + x0blc[t, 1]\n    yright = -(blc[t, 0] / blc[t, 1]) * (xmax - x0blc[t, 0]) + x0blc[t, 1]\n\n    color = [(t) / (T - 1), 0, (T - t) / (T - 1)]\n    color = np.clip(color, 0, 1)  \n\n    plt.plot([xmin, xmax], [yleft, yright], linestyle='-', color=color, linewidth=2)\n\n    votes += np.sign((Te - np.tile(x0blc[t, :], (Ntest, 1))) @ blc[t, :])\n\nLb = (np.sign(votes) + 1) / 2\nplt.scatter(Te[:, 0], Te[:, 1], s=1, c=Lb, marker='.')\nplt.scatter(pos[:, 0], pos[:, 1], color='r', marker='+')\nplt.scatter(neg[:, 0], neg[:, 1], color='k', marker='.')\nplt.show()"
  },
  {
    "objectID": "chapter_3/clustering.html",
    "href": "chapter_3/clustering.html",
    "title": "3.5 Clustering",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nfrom scipy.linalg import svd\nfrom sklearn.cluster import KMeans\n\nc1 = np.random.multivariate_normal([1, 1], 0.05 * np.eye(2), 20)\nc2 = np.random.multivariate_normal([1, 2], 0.05 * np.eye(2), 20)\nc3 = np.random.multivariate_normal([2, 1], 0.05 * np.eye(2), 20)\n\nc1 = np.column_stack((c1, c1[:, 1]))\nc2 = np.column_stack((c2, c2[:, 1]))\nc3 = np.column_stack((c3, c3[:, 1]))\n\ndata = np.vstack((c1, c2, c3))\n\nkmeans = KMeans(n_clusters=3, random_state=42).fit(data[:, :2])\nlabels = kmeans.labels_\ncenters = kmeans.cluster_centers_\n\np1, p2, p3 = centers\n\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.axis([0, 3, 0, 3])\nplt.axis(\"square\")\nplt.scatter(c1[:, 0], c1[:, 1], color='r', marker='.')\nplt.scatter(c2[:, 0], c2[:, 1], color='g', marker='.')\nplt.scatter(c3[:, 0], c3[:, 1], color='b', marker='.')\nplt.scatter([p1[0], p2[0], p3[0]], [p1[1], p2[1], p3[1]], color=['r', 'g', 'b'], marker='x', s=100, linewidths=2)\n\nvor = Voronoi([p1, p2, p3])\nvoronoi_plot_2d(vor, plt.gca(), show_vertices=False, line_colors='b')\n\ndata_transformed = data @ np.array([[1, 0, 1], [0, 1, 1], [0, 0, 0]])\nplt.subplot(1, 2, 2)\nplt.axis([0, 3, 0, 3])\nplt.axis(\"square\")\n\nU, S, Vt = svd(data_transformed)\nU = U - np.min(U, axis=0)\nU = U / np.max(U, axis=0)\n\nfor i in range(60):\n    plt.scatter(data_transformed[i, 0], data_transformed[i, 1], marker='o')\n\nplt.show()"
  }
]