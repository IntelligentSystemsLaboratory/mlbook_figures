[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLbook Figures",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "chapter_2/covroc_right.html",
    "href": "chapter_2/covroc_right.html",
    "title": "2.5 Covroc right",
    "section": "",
    "text": "In a coverage plot, accuracy isometrics have a slope of 1, and average recall isometrics are parallel to the ascending diagonal. In the corresponding ROC plot, average recall isometrics have a slope of 1; the accuracy isometric here has a slope of 3, corresponding to the ratio of negatives to positives in the data set."
  },
  {
    "objectID": "chapter_2/roc_right.html",
    "href": "chapter_2/roc_right.html",
    "title": "2.3 Roc right",
    "section": "",
    "text": "C1 and C3 both dominate C2, but neither dominates the other. The diagonal line indicates that C1 and C3 achieve equal accuracy.The same plot with normalised axes. We can interpret this plot as a merger of the two coverage plots in coverage, employing normalisation to deal with the different class distributions. The diagonal line now indicates that C1 and C3 have the same average recall."
  },
  {
    "objectID": "chapter_2/covroc_left.html",
    "href": "chapter_2/covroc_left.html",
    "title": "2.5 Covroc left",
    "section": "",
    "text": "In a coverage plot, accuracy isometrics have a slope of 1, and average recall isometrics are parallel to the ascending diagonal. In the corresponding ROC plot, average recall isometrics have a slope of 1; the accuracy isometric here has a slope of 3, corresponding to the ratio of negatives to positives in the data set."
  },
  {
    "objectID": "chapter_2/coverage_right.html",
    "href": "chapter_2/coverage_right.html",
    "title": "2.2 Coverage Right",
    "section": "",
    "text": "A coverage plot depicting the two contingency tables in Table 2.2. The plot is square because the class distribution is uniform (right). Coverage plot for Example 2.1, with a class ratio clr=3."
  },
  {
    "objectID": "chapter_2/roc_left.html",
    "href": "chapter_2/roc_left.html",
    "title": "2.3 Roc left",
    "section": "",
    "text": "C1 and C3 both dominate C2, but neither dominates the other. The diagonal line indicates that C1 and C3 achieve equal accuracy.The same plot with normalised axes. We can interpret this plot as a merger of the two coverage plots in coverage, employing normalisation to deal with the different class distributions. The diagonal line now indicates that C1 and C3 have the same average recall."
  },
  {
    "objectID": "chapter_2/coverage_left.html",
    "href": "chapter_2/coverage_left.html",
    "title": "2.2 Coverage Left",
    "section": "",
    "text": "A coverage plot depicting the two contingency tables in Table 2.2. The plot is square because the class distribution is uniform (right). Coverage plot for Example 2.1, with a class ratio clr=3."
  },
  {
    "objectID": "chapter_8/mlmethods2-complete.html",
    "href": "chapter_8/mlmethods2-complete.html",
    "title": "ML Methods",
    "section": "",
    "text": "k = 2, Sum of squared distances (inertia): 560.625\nCluster 1:\n['naive Bayes' 'kNN' 'Linear Classifier' 'Linear Regression'\n 'Logistic Regression' 'SVM' 'Kmeans' 'GMM']\nCluster 2:\n['Trees' 'Rules' 'Associations']\nk = 3, Sum of squared distances (inertia): 293.5\nCluster 1:\n['naive Bayes' 'GMM']\nCluster 2:\n['Trees' 'Rules' 'Associations']\nCluster 3:\n['kNN' 'Linear Classifier' 'Linear Regression' 'Logistic Regression' 'SVM'\n 'Kmeans']\nk = 4, Sum of squared distances (inertia): 207.5\nCluster 1:\n['kNN' 'Linear Classifier' 'Linear Regression' 'Logistic Regression' 'SVM'\n 'Kmeans']\nCluster 2:\n['naive Bayes']\nCluster 3:\n['Trees' 'Rules' 'Associations']\nCluster 4:\n['GMM']\nk = 5, Sum of squared distances (inertia): 148.0\nCluster 1:\n['kNN' 'Linear Regression' 'Logistic Regression' 'SVM' 'Kmeans']\nCluster 2:\n['naive Bayes']\nCluster 3:\n['Trees' 'Rules' 'Associations']\nCluster 4:\n['GMM']\nCluster 5:\n['Linear Classifier']"
  },
  {
    "objectID": "chapter_8/twonex.html",
    "href": "chapter_8/twonex.html",
    "title": "Twonex",
    "section": "",
    "text": "/tmp/ipykernel_123152/3250587599.py:46: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))\n/tmp/ipykernel_123152/3250587599.py:46: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))\n/tmp/ipykernel_123152/3250587599.py:46: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))"
  },
  {
    "objectID": "chapter_8/randomdendrogram.html",
    "href": "chapter_8/randomdendrogram.html",
    "title": "Random Dendogram",
    "section": "",
    "text": "Spearman correlation for complete: 0.6495033933998509"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "chapter_6/ABBA.html",
    "href": "chapter_6/ABBA.html",
    "title": "ABBA",
    "section": "",
    "text": "# Plot and grid\nh &lt;- 500 # height of plot\nw &lt;- 500 # width of plot\ngrid.step &lt;- 100\n\nplot( c(0,w), c(0,h),  \n     xaxs = \"i\",yaxs = \"i\",\n     xaxt = \"n\", yaxt = \"n\",\n     type = \"n\",\n     xlab = \"Negatives\", ylab = \"Positives\")\n     \ngx &lt;- grid.step\nwhile (gx &lt;= w) {\n  abline(v = gx, col=\"gray\", lty=\"dotted\")\n  gx &lt;- gx + grid.step\n}\ngy &lt;- grid.step\nwhile (gy &lt;= h) {\n  abline(h = gy, col=\"gray\", lty=\"dotted\")\n  gy &lt;- gy + grid.step\n}\n\n# Data\n# A: p2; n2,n4,n5\n# B: p1,p2,p3,p4,p5; n1,n2,n5\n\n# Rule-list curve AB\na &lt;- c(0,100,400,500)\nb &lt;- c(0,400,500,500)\ncol &lt;- \"blue\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n# Predicted probability: 0.8\ntext( (a[1]+a[2])/2+20, (b[1]+b[2])/2, \"B\\\\A\",col=col)\n# Predicted probability: 0.25\ntext( (a[2]+a[3])/2-20, (b[2]+b[3])/2-30, \"A\",col=col)\n# Predicted probability: 0\ntext( (a[3]+a[4])/2+20, (b[3]+b[4])/2-20, \"-\",col=col)\n\n# Rule-list curve BA\na &lt;- c(0,300,500)\nb &lt;- c(0,500,500)\ncol &lt;- \"violet\"\nlines( a, b, lwd=3, type=\"o\",col=col)\n# Predicted probability: 0.625\ntext( (a[1]+a[2])/2+20, (b[1]+b[2])/2, \"B\",col=col)\n# Predicted probability: 0\ntext( (a[2]+a[3])/2+20, (b[2]+b[3])/2-20, \"A\\\\B, -\",col=col)\n\n# convex hull segment\nx &lt;- c(0,100,300,500)\ny &lt;- c(0,400,500,500)\ncol &lt;- \"red\"\nlines( x[2:3], y[2:3], lty=\"dotted\",col=col)\ntext( (x[2]+x[3])/2-15, (y[2]+y[3])/2+15, \"\",col=col)"
  },
  {
    "objectID": "chapter_9/gmm.html",
    "href": "chapter_9/gmm.html",
    "title": "GMM",
    "section": "",
    "text": "Final means: [54 67]\nFinal variances: [15  6]\nInitial means: [54 67]"
  },
  {
    "objectID": "chapter_9/linclass2.html",
    "href": "chapter_9/linclass2.html",
    "title": "Linear Classifier 2",
    "section": "",
    "text": "Error for BLC: 6\nError for LSC: 7\nOptimization terminated successfully.\n         Current function value: 0.075276\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                      y   No. Observations:                  200\nModel:                          Logit   Df Residuals:                      197\nMethod:                           MLE   Df Model:                            2\nDate:                Wed, 05 Mar 2025   Pseudo R-squ.:                  0.8914\nTime:                        01:46:26   Log-Likelihood:                -15.055\nconverged:                       True   LL-Null:                       -138.63\nCovariance Type:            nonrobust   LLR p-value:                 2.150e-54\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.2697      0.938      1.354      0.176      -0.569       3.108\nx1             1.9269      0.529      3.643      0.000       0.890       2.964\nx2             5.0529      1.252      4.037      0.000       2.600       7.506\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.23 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\nError for Logistic Regression: 5\nBinary Logistic Regression Error: 0.022666213005389194"
  },
  {
    "objectID": "chapter_9/logreg.html",
    "href": "chapter_9/logreg.html",
    "title": "Logreg",
    "section": "",
    "text": "Error Rate Logistic Calibration: 0.10959817706737454\nError Rate Isotonic Calibration: 0.0811965811965812\nError Rate Logistic Regression: 0.10992358826299661"
  },
  {
    "objectID": "chapter_7/linkernel.html",
    "href": "chapter_7/linkernel.html",
    "title": "Lin Kernel",
    "section": "",
    "text": "&lt;module 'matplotlib.pyplot' from '/home/ck22122/.local/share/virtualenvs/superbook2-Q63KuxOb/lib/python3.10/site-packages/matplotlib/pyplot.py'&gt;"
  },
  {
    "objectID": "chapter_1/mlmethodstree1.html",
    "href": "chapter_1/mlmethodstree1.html",
    "title": "Logcal",
    "section": "",
    "text": "graph TD;\n    N0[\"grading\"] --&gt;|a bit| N1[\"logical\"];\n    N0 --&gt;|a lot| N2[\"geometric\"];\n\n    N1 --&gt;|yes| N11[\"supervised\"];\n    N1 --&gt;|\"not so\\nmuch\"| L12[\"naive\\nBayes\"]:::orange;\n    N11 --&gt;|no| L111[\"association\\nrules\"]:::red;\n    N11 --&gt;|\"yes\"| L112[\"trees & \\nrules\"]:::red;\n\n    N2 --&gt;|yes| N21[\"splitting\"];\n    N2 --&gt;|\"not\\ncom-\\npletely\"| N22[\"supervised\"];\n    \n    N21 --&gt;|\"some\"| N212[\"supervised\"];\n    N21 --&gt;|no| L211[\"linear\\nclassifiers\"]:::purple;\n    N212 --&gt;|no| L2121[\"K-means\"]:::purple;\n    N212 --&gt;|yes| L2122[\"k-NN\"]:::purple;\n\n    N22 --&gt;|no| L221[\"GMM\"]:::orange;\n    N22 --&gt;|yes| L222[\"SVM\"]:::purple;\n\n    classDef red fill:#ff9999,stroke:#000,color:#000;\n    classDef orange fill:#ffcc99,stroke:#000,color:#000;\n    classDef purple fill:#cc99ff,stroke:#000,color:#000;\n\n    class L111,L112 red;\n    class L12,L221 orange;\n    class L211,L2121,L2122,L222 purple;"
  }
]