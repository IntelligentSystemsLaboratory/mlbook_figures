---
title: "8.8 Twonex"
engine: jupyter
execute: 
    echo: true
code-fold: true
---

```{python}

#| echo: false

import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Voronoi, voronoi_plot_2d
from sklearn.neighbors import KNeighborsClassifier

Tr = np.array([[-25, 5], [-11, -23], [17, 19], [5, 0], [25, -30]])
Cl = np.array([1, 3, 5, 2, 4])

Nexemplars = Tr.shape[0]

mn = -40
mx = 40
N = 2 * (mx - mn)

Te = np.zeros(((N + 1) ** 2, 2))
for i in range(N + 1):
    for j in range(N + 1):
        Te[i * (N + 1) + j, 0] = mn + j * (mx - mn) / N
        Te[i * (N + 1) + j, 1] = mn + i * (mx - mn) / N

def knn_voronoi_plot(k, Te, Tr, Cl, title):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(Tr, Cl)
    Lb = knn.predict(Te)
    
    vor = Voronoi(Tr)
    
    fig, ax = plt.subplots()
    ax.set_xlim(mn, mx)
    ax.set_ylim(mn, mx)
    ax.set_aspect('equal')
    ax.axis('off')
    
    voronoi_plot_2d(vor, ax=ax, show_vertices=False, line_colors='m', line_width=1)
    
    scatter = ax.scatter(Te[:, 0], Te[:, 1], c=Lb, s=3, cmap=plt.cm.get_cmap('tab10'))
    
    ax.scatter(Tr[:, 0], Tr[:, 1], c=Cl, s=150, marker='o', edgecolor='k', linewidth=2)
    
    ax.set_title(title)
    plt.show()

knn_voronoi_plot(1, Te, Tr, Cl, "1-NN with Voronoi Tessellation")

knn_voronoi_plot(2, Te, Tr, Cl, "2-NN with Voronoi Tessellation")

knn_voronoi_plot(3, Te, Tr, Cl, "3-NN with Voronoi Tessellation")

```